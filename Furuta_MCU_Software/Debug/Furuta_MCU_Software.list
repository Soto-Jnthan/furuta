
Furuta_MCU_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a884  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800aa18  0800aa18  0001aa18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aea4  0800aea4  0002037c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aea4  0800aea4  0001aea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aeac  0800aeac  0002037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aeac  0800aeac  0001aeac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aeb0  0800aeb0  0001aeb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000037c  20000000  0800aeb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001380  2000037c  0800b230  0002037c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016fc  0800b230  000216fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aaae  00000000  00000000  000203ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044fb  00000000  00000000  0004ae5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001fd28  00000000  00000000  0004f355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0006f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003f70  00000000  00000000  000705f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab02  00000000  00000000  00074568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026f4a  00000000  00000000  0009f06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010cbb5  00000000  00000000  000c5fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d2b69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005674  00000000  00000000  001d2bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000037c 	.word	0x2000037c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9fc 	.word	0x0800a9fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000380 	.word	0x20000380
 80001cc:	0800a9fc 	.word	0x0800a9fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9aa 	b.w	8000f78 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff ff49 	bl	8000adc <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fcbf 	bl	80005f8 <__aeabi_dmul>
 8000c7a:	f7ff ff57 	bl	8000b2c <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fc40 	bl	8000504 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fcb6 	bl	80005f8 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faf8 	bl	8000288 <__aeabi_dsub>
 8000c98:	f7ff ff48 	bl	8000b2c <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <HAL_UARTEx_RxEventCallback>:
  * @param huart Pointer to the handler of the UART that triggered the interrupt
  * @param Size Length in bytes of the data received
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint32_t old_pos;
	if (huart->Instance == huart2.Instance)
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000f80:	6802      	ldr	r2, [r0, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d000      	beq.n	8000f8a <HAL_UARTEx_RxEventCallback+0xe>
		{
			DATA_RxBuffer[RxSize - 1] = '\0';
			execute_rx_cmd((char*) DATA_RxBuffer);
		}
	}
}
 8000f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (Size > old_pos)
 8000f8a:	4e26      	ldr	r6, [pc, #152]	; (8001024 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000f8c:	460c      	mov	r4, r1
 8000f8e:	6831      	ldr	r1, [r6, #0]
 8000f90:	428c      	cmp	r4, r1
 8000f92:	d831      	bhi.n	8000ff8 <HAL_UARTEx_RxEventCallback+0x7c>
			memcpy(DATA_RxBuffer, &DMA_RxBuffer[old_pos], sizeof(*DATA_RxBuffer) * RxSize);
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <HAL_UARTEx_RxEventCallback+0xac>)
 8000f96:	4f25      	ldr	r7, [pc, #148]	; (800102c <HAL_UARTEx_RxEventCallback+0xb0>)
			RxSize = RxBUFFER_SIZE - old_pos;
 8000f98:	f1c1 0580 	rsb	r5, r1, #128	; 0x80
			memcpy(DATA_RxBuffer, &DMA_RxBuffer[old_pos], sizeof(*DATA_RxBuffer) * RxSize);
 8000f9c:	462a      	mov	r2, r5
 8000f9e:	4439      	add	r1, r7
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 fe23 	bl	8007bec <memcpy>
			memcpy(&DATA_RxBuffer[RxSize], DMA_RxBuffer, sizeof(*DATA_RxBuffer) * Size);
 8000fa6:	4622      	mov	r2, r4
 8000fa8:	4428      	add	r0, r5
 8000faa:	4639      	mov	r1, r7
 8000fac:	f006 fe1e 	bl	8007bec <memcpy>
			RxSize += Size;
 8000fb0:	4425      	add	r5, r4
		if (RxSize > 1)
 8000fb2:	2d01      	cmp	r5, #1
		old_pos = Size;
 8000fb4:	6034      	str	r4, [r6, #0]
		if (RxSize > 1)
 8000fb6:	d9e7      	bls.n	8000f88 <HAL_UARTEx_RxEventCallback+0xc>
			DATA_RxBuffer[RxSize - 1] = '\0';
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <HAL_UARTEx_RxEventCallback+0xac>)
  * @param cmd Pointer to string representing the command received
  * @retval None
  */
static inline void execute_rx_cmd(const char *restrict cmd)
{
	switch (*cmd)
 8000fba:	7803      	ldrb	r3, [r0, #0]
			DATA_RxBuffer[RxSize - 1] = '\0';
 8000fbc:	4405      	add	r5, r0
 8000fbe:	2400      	movs	r4, #0
	switch (*cmd)
 8000fc0:	2b24      	cmp	r3, #36	; 0x24
			DATA_RxBuffer[RxSize - 1] = '\0';
 8000fc2:	f805 4c01 	strb.w	r4, [r5, #-1]
	switch (*cmd)
 8000fc6:	d01f      	beq.n	8001008 <HAL_UARTEx_RxEventCallback+0x8c>
 8000fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8000fca:	d024      	beq.n	8001016 <HAL_UARTEx_RxEventCallback+0x9a>
 8000fcc:	2b23      	cmp	r3, #35	; 0x23
 8000fce:	d01e      	beq.n	800100e <HAL_UARTEx_RxEventCallback+0x92>
		break;
	case STOP_TX_CHAR:
		tx_enabled = FALSE;
		break;
	default:
		action_queue[q_head++] = atof(cmd);
 8000fd0:	4d17      	ldr	r5, [pc, #92]	; (8001030 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000fd2:	4e18      	ldr	r6, [pc, #96]	; (8001034 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000fd4:	f006 fddc 	bl	8007b90 <atof>
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8000fde:	3301      	adds	r3, #1
 8000fe0:	602b      	str	r3, [r5, #0]
 8000fe2:	ec51 0b10 	vmov	r0, r1, d0
 8000fe6:	f7ff fdc1 	bl	8000b6c <__aeabi_d2f>
		if (q_head == ACT_QUEUE_SIZE)
 8000fea:	682b      	ldr	r3, [r5, #0]
		action_queue[q_head++] = atof(cmd);
 8000fec:	6030      	str	r0, [r6, #0]
		if (q_head == ACT_QUEUE_SIZE)
 8000fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		{
			q_head = 0;
 8000ff2:	bf08      	it	eq
 8000ff4:	602c      	streq	r4, [r5, #0]
}
 8000ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(DATA_RxBuffer, &DMA_RxBuffer[old_pos], sizeof(*DATA_RxBuffer) * RxSize);
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_UARTEx_RxEventCallback+0xb0>)
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <HAL_UARTEx_RxEventCallback+0xac>)
			RxSize = Size - old_pos;
 8000ffc:	1a65      	subs	r5, r4, r1
			memcpy(DATA_RxBuffer, &DMA_RxBuffer[old_pos], sizeof(*DATA_RxBuffer) * RxSize);
 8000ffe:	462a      	mov	r2, r5
 8001000:	4419      	add	r1, r3
 8001002:	f006 fdf3 	bl	8007bec <memcpy>
 8001006:	e7d4      	b.n	8000fb2 <HAL_UARTEx_RxEventCallback+0x36>
		tx_enabled = FALSE;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_UARTEx_RxEventCallback+0xbc>)
 800100a:	701c      	strb	r4, [r3, #0]
}
 800100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_enabled = TRUE;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		reset_requested = TRUE;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_UARTEx_RxEventCallback+0xc0>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800101e:	bf00      	nop
 8001020:	20001550 	.word	0x20001550
 8001024:	200015d4 	.word	0x200015d4
 8001028:	2000039c 	.word	0x2000039c
 800102c:	2000041c 	.word	0x2000041c
 8001030:	200015d8 	.word	0x200015d8
 8001034:	200004b8 	.word	0x200004b8
 8001038:	200015e0 	.word	0x200015e0
 800103c:	20000028 	.word	0x20000028

08001040 <HAL_ADC_ConvCpltCallback>:
	if (hadc->Instance == hadc1.Instance)
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <HAL_ADC_ConvCpltCallback+0x124>)
 8001042:	6801      	ldr	r1, [r0, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4291      	cmp	r1, r2
 8001048:	d000      	beq.n	800104c <HAL_ADC_ConvCpltCallback+0xc>
 800104a:	4770      	bx	lr
{
 800104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		int phi = ((4096 + HAL_ADC_GetValue(&hadc1) - ADC_STATIC_ERROR) & 4095U) - 2048; //Adjust offset and symmetry
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fed1 	bl	8003df8 <HAL_ADC_GetValue>
 8001056:	4606      	mov	r6, r0
		int theta = BSP_MotorControl_GetPosition(0); //Steps
 8001058:	2000      	movs	r0, #0
 800105a:	f002 fc3d 	bl	80038d8 <BSP_MotorControl_GetPosition>
		if ((tx_enabled || episode_done) && !__IS_HAL_UART_TX_BUSY(&huart2))
 800105e:	4b42      	ldr	r3, [pc, #264]	; (8001168 <HAL_ADC_ConvCpltCallback+0x128>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b91b      	cbnz	r3, 800106c <HAL_ADC_ConvCpltCallback+0x2c>
 8001064:	4b41      	ldr	r3, [pc, #260]	; (800116c <HAL_ADC_ConvCpltCallback+0x12c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d06e      	beq.n	800114a <HAL_ADC_ConvCpltCallback+0x10a>
 800106c:	4c40      	ldr	r4, [pc, #256]	; (8001170 <HAL_ADC_ConvCpltCallback+0x130>)
 800106e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001070:	2b21      	cmp	r3, #33	; 0x21
 8001072:	d06a      	beq.n	800114a <HAL_ADC_ConvCpltCallback+0x10a>
			size_t len = state_itoa((char*) DMA_TxBuffer, phi, theta, episode_done);
 8001074:	4d3d      	ldr	r5, [pc, #244]	; (800116c <HAL_ADC_ConvCpltCallback+0x12c>)
		} while (a /= 10);
		if (sign)
			s[i++] = '-';
	}

	s[i++] = '\n';
 8001076:	493f      	ldr	r1, [pc, #252]	; (8001174 <HAL_ADC_ConvCpltCallback+0x134>)
			size_t len = state_itoa((char*) DMA_TxBuffer, phi, theta, episode_done);
 8001078:	782b      	ldrb	r3, [r5, #0]
			s[i++] = a % 10 + '0';
 800107a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800117c <HAL_ADC_ConvCpltCallback+0x13c>
	s[i++] = '\r';

	s[i++] = ep + '0'; //episode_done (Never greater than 1)
 800107e:	3330      	adds	r3, #48	; 0x30
	s[i++] = ' ';
 8001080:	468e      	mov	lr, r1
	s[i++] = ep + '0'; //episode_done (Never greater than 1)
 8001082:	708b      	strb	r3, [r1, #2]
	s[i++] = ' ';
 8001084:	2320      	movs	r3, #32
 8001086:	f80e 3f03 	strb.w	r3, [lr, #3]!
	s[i++] = '\n';
 800108a:	f640 530a 	movw	r3, #3338	; 0xd0a
 800108e:	800b      	strh	r3, [r1, #0]
		if (sign)
 8001090:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8001094:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	s[i++] = ' ';
 8001098:	f04f 0c04 	mov.w	ip, #4
			s[i++] = a % 10 + '0';
 800109c:	fba8 7203 	umull	r7, r2, r8, r3
 80010a0:	08d2      	lsrs	r2, r2, #3
 80010a2:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80010a6:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 80010aa:	3330      	adds	r3, #48	; 0x30
 80010ac:	f80e 3f01 	strb.w	r3, [lr, #1]!
		} while (a /= 10);
 80010b0:	4667      	mov	r7, ip
 80010b2:	4613      	mov	r3, r2
			s[i++] = a % 10 + '0';
 80010b4:	f10c 0c01 	add.w	ip, ip, #1
		} while (a /= 10);
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d1ef      	bne.n	800109c <HAL_ADC_ConvCpltCallback+0x5c>
		if (sign)
 80010bc:	2800      	cmp	r0, #0
 80010be:	db4a      	blt.n	8001156 <HAL_ADC_ConvCpltCallback+0x116>
		int phi = ((4096 + HAL_ADC_GetValue(&hadc1) - ADC_STATIC_ERROR) & 4095U) - 2048; //Adjust offset and symmetry
 80010c0:	f606 0735 	addw	r7, r6, #2101	; 0x835
 80010c4:	f3c7 070b 	ubfx	r7, r7, #0, #12
 80010c8:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800

	rev_itoa(th); //theta
	s[i++] = ' ';
 80010cc:	2320      	movs	r3, #32
 80010ce:	f801 300c 	strb.w	r3, [r1, ip]
			s[i++] = a % 10 + '0';
 80010d2:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 800117c <HAL_ADC_ConvCpltCallback+0x13c>
 80010d6:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
	s[i++] = ' ';
 80010da:	f10c 0001 	add.w	r0, ip, #1
 80010de:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 80010e2:	448c      	add	ip, r1
			s[i++] = a % 10 + '0';
 80010e4:	fbae 6203 	umull	r6, r2, lr, r3
 80010e8:	08d2      	lsrs	r2, r2, #3
 80010ea:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 80010ee:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
 80010f2:	3330      	adds	r3, #48	; 0x30
 80010f4:	f80c 3f01 	strb.w	r3, [ip, #1]!
		} while (a /= 10);
 80010f8:	4606      	mov	r6, r0
 80010fa:	4613      	mov	r3, r2
			s[i++] = a % 10 + '0';
 80010fc:	3001      	adds	r0, #1
		} while (a /= 10);
 80010fe:	2a00      	cmp	r2, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_ADC_ConvCpltCallback+0xa4>
		if (sign)
 8001102:	2f00      	cmp	r7, #0
 8001104:	db23      	blt.n	800114e <HAL_ADC_ConvCpltCallback+0x10e>
	rev_itoa(ph); //phi

	s[i] = USART_SOS;

	len = i + 1;
 8001106:	1c42      	adds	r2, r0, #1
	s[i] = USART_SOS;
 8001108:	2341      	movs	r3, #65	; 0x41
 800110a:	520b      	strh	r3, [r1, r0]
	s[len] = '\0';
 800110c:	4411      	add	r1, r2

	for (size_t j = 0; i > j; j++, i--)
 800110e:	b168      	cbz	r0, 800112c <HAL_ADC_ConvCpltCallback+0xec>
 8001110:	4e18      	ldr	r6, [pc, #96]	; (8001174 <HAL_ADC_ConvCpltCallback+0x134>)
 8001112:	2300      	movs	r3, #0
	{
		SWAP(s[i], s[j]);
 8001114:	f811 7d01 	ldrb.w	r7, [r1, #-1]!
 8001118:	f896 c000 	ldrb.w	ip, [r6]
 800111c:	f881 c000 	strb.w	ip, [r1]
	for (size_t j = 0; i > j; j++, i--)
 8001120:	3301      	adds	r3, #1
		SWAP(s[i], s[j]);
 8001122:	f806 7b01 	strb.w	r7, [r6], #1
	for (size_t j = 0; i > j; j++, i--)
 8001126:	1ac7      	subs	r7, r0, r3
 8001128:	429f      	cmp	r7, r3
 800112a:	d8f3      	bhi.n	8001114 <HAL_ADC_ConvCpltCallback+0xd4>
			HAL_UART_Transmit_DMA(&huart2, DMA_TxBuffer, len);
 800112c:	4911      	ldr	r1, [pc, #68]	; (8001174 <HAL_ADC_ConvCpltCallback+0x134>)
 800112e:	4810      	ldr	r0, [pc, #64]	; (8001170 <HAL_ADC_ConvCpltCallback+0x130>)
 8001130:	b292      	uxth	r2, r2
 8001132:	f005 fed1 	bl	8006ed8 <HAL_UART_Transmit_DMA>
			__HAL_DMA_DISABLE_IT(huart2.hdmatx, DMA_IT_HT);
 8001136:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
			ACK_sent = episode_done; //'episode_done == 1' sent at least once
 8001138:	490f      	ldr	r1, [pc, #60]	; (8001178 <HAL_ADC_ConvCpltCallback+0x138>)
			__HAL_DMA_DISABLE_IT(huart2.hdmatx, DMA_IT_HT);
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	6813      	ldr	r3, [r2, #0]
 800113e:	f023 0304 	bic.w	r3, r3, #4
 8001142:	6013      	str	r3, [r2, #0]
			ACK_sent = episode_done; //'episode_done == 1' sent at least once
 8001144:	782b      	ldrb	r3, [r5, #0]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	700b      	strb	r3, [r1, #0]
}
 800114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			s[i++] = '-';
 800114e:	232d      	movs	r3, #45	; 0x2d
 8001150:	540b      	strb	r3, [r1, r0]
 8001152:	1cb0      	adds	r0, r6, #2
 8001154:	e7d7      	b.n	8001106 <HAL_ADC_ConvCpltCallback+0xc6>
 8001156:	232d      	movs	r3, #45	; 0x2d
 8001158:	f801 300c 	strb.w	r3, [r1, ip]
 800115c:	f107 0c02 	add.w	ip, r7, #2
 8001160:	e7ae      	b.n	80010c0 <HAL_ADC_ConvCpltCallback+0x80>
 8001162:	bf00      	nop
 8001164:	2000145c 	.word	0x2000145c
 8001168:	200015e0 	.word	0x200015e0
 800116c:	20000000 	.word	0x20000000
 8001170:	20001550 	.word	0x20001550
 8001174:	2000049c 	.word	0x2000049c
 8001178:	20000398 	.word	0x20000398
 800117c:	cccccccd 	.word	0xcccccccd

08001180 <ButtonHandler>:
  * @brief Button handler for pausing the training indefinitely by the user
  * @param None
  * @retval None
  */
void ButtonHandler(void)
{
 8001180:	b508      	push	{r3, lr}
	HAL_Delay(10);
 8001182:	200a      	movs	r0, #10
 8001184:	f002 fd3e 	bl	8003c04 <HAL_Delay>
	while (BSP_PB_GetState(BUTTON_KEY) == GPIO_PIN_RESET);
 8001188:	2000      	movs	r0, #0
 800118a:	f002 f8d7 	bl	800333c <BSP_PB_GetState>
 800118e:	2800      	cmp	r0, #0
 8001190:	d0fa      	beq.n	8001188 <ButtonHandler+0x8>
	break_enabled = !break_enabled;
 8001192:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <ButtonHandler+0x20>)
 8001194:	7813      	ldrb	r3, [r2, #0]
 8001196:	f083 0301 	eor.w	r3, r3, #1
 800119a:	7013      	strb	r3, [r2, #0]
}
 800119c:	bd08      	pop	{r3, pc}
 800119e:	bf00      	nop
 80011a0:	20001458 	.word	0x20001458

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b508      	push	{r3, lr}
	/* User can add his own implementation to report the HAL error return state */
	episode_done = TRUE;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <Error_Handler+0x20>)
 80011a8:	2201      	movs	r2, #1
	BSP_MotorControl_CmdDisable(0);
 80011aa:	2000      	movs	r0, #0
	episode_done = TRUE;
 80011ac:	701a      	strb	r2, [r3, #0]
	BSP_MotorControl_CmdDisable(0);
 80011ae:	f002 fc3b 	bl	8003a28 <BSP_MotorControl_CmdDisable>
	while (1)
	{
		BSP_LED_Toggle(LED2);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f002 f86e 	bl	8003294 <BSP_LED_Toggle>
		HAL_Delay(500);
 80011b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011bc:	f002 fd22 	bl	8003c04 <HAL_Delay>
	while (1)
 80011c0:	e7f7      	b.n	80011b2 <Error_Handler+0xe>
 80011c2:	bf00      	nop
 80011c4:	20000000 	.word	0x20000000

080011c8 <MotorFailureHandler>:
{
 80011c8:	b508      	push	{r3, lr}
	Error_Handler();
 80011ca:	f7ff ffeb 	bl	80011a4 <Error_Handler>
 80011ce:	bf00      	nop

080011d0 <SystemClock_Config>:
{
 80011d0:	b500      	push	{lr}
 80011d2:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d4:	2244      	movs	r2, #68	; 0x44
 80011d6:	2100      	movs	r1, #0
 80011d8:	a806      	add	r0, sp, #24
 80011da:	f006 fd15 	bl	8007c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011de:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011e0:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	e9cd 3300 	strd	r3, r3, [sp]
 80011e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80011ec:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ee:	f003 ff63 	bl	80050b8 <HAL_PWREx_ControlVoltageScaling>
 80011f2:	bb40      	cbnz	r0, 8001246 <SystemClock_Config+0x76>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011f4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8001250 <SystemClock_Config+0x80>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011fa:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011fc:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011fe:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001202:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001206:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001208:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 1;
 800120a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800120c:	2128      	movs	r1, #40	; 0x28
 800120e:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001212:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001214:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001218:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f004 f82e 	bl	800527c <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	b980      	cbnz	r0, 8001246 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001258 <SystemClock_Config+0x88>
 8001228:	ed8d 7b00 	vstr	d7, [sp]
 800122c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001260 <SystemClock_Config+0x90>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001230:	2104      	movs	r1, #4
 8001232:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800123a:	f004 fb07 	bl	800584c <HAL_RCC_ClockConfig>
 800123e:	b910      	cbnz	r0, 8001246 <SystemClock_Config+0x76>
}
 8001240:	b019      	add	sp, #100	; 0x64
 8001242:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001246:	f7ff ffad 	bl	80011a4 <Error_Handler>
 800124a:	bf00      	nop
 800124c:	f3af 8000 	nop.w
 8001250:	00000001 	.word	0x00000001
 8001254:	00000000 	.word	0x00000000
 8001258:	0000000f 	.word	0x0000000f
 800125c:	00000003 	.word	0x00000003
	...

08001268 <main>:
{
 8001268:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800126c:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800126e:	f002 fca7 	bl	8003bc0 <HAL_Init>
  SystemClock_Config();
 8001272:	f7ff ffad 	bl	80011d0 <SystemClock_Config>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001276:	4bc4      	ldr	r3, [pc, #784]	; (8001588 <main+0x320>)
  hadc1.Instance = ADC1;
 8001278:	4cc4      	ldr	r4, [pc, #784]	; (800158c <main+0x324>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800127c:	f040 0001 	orr.w	r0, r0, #1
 8001280:	6498      	str	r0, [r3, #72]	; 0x48
 8001282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001284:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8001292:	f003 fb61 	bl	8004958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001296:	2010      	movs	r0, #16
 8001298:	f003 fb9c 	bl	80049d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 800129c:	2101      	movs	r1, #1
 800129e:	2200      	movs	r2, #0
 80012a0:	2011      	movs	r0, #17
 80012a2:	f003 fb59 	bl	8004958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012a6:	2011      	movs	r0, #17
 80012a8:	f003 fb94 	bl	80049d4 <HAL_NVIC_EnableIRQ>
  ADC_MultiModeTypeDef multimode = {0};
 80012ac:	2300      	movs	r3, #0
 80012ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80012b6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80012ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012be:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012c2:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c6:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ca:	9309      	str	r3, [sp, #36]	; 0x24
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012cc:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d4:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80012d6:	6463      	str	r3, [r4, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	61e3      	str	r3, [r4, #28]
  hadc1.Init.OversamplingMode = ENABLE;
 80012dc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80012e0:	64a3      	str	r3, [r4, #72]	; 0x48
  hadc1.Instance = ADC1;
 80012e2:	4bab      	ldr	r3, [pc, #684]	; (8001590 <main+0x328>)
 80012e4:	6023      	str	r3, [r4, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e6:	2304      	movs	r3, #4
 80012e8:	6163      	str	r3, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ee:	8323      	strh	r3, [r4, #24]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 80012f0:	2118      	movs	r1, #24
 80012f2:	23e0      	movs	r3, #224	; 0xe0
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f4:	4620      	mov	r0, r4
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 80012f6:	e9c4 130f 	strd	r1, r3, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fa:	f002 fc95 	bl	8003c28 <HAL_ADC_Init>
 80012fe:	2800      	cmp	r0, #0
 8001300:	f040 8139 	bne.w	8001576 <main+0x30e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001304:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001306:	a901      	add	r1, sp, #4
 8001308:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800130a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800130c:	f003 faa2 	bl	8004854 <HAL_ADCEx_MultiModeConfigChannel>
 8001310:	2800      	cmp	r0, #0
 8001312:	f040 8130 	bne.w	8001576 <main+0x30e>
  sConfig.Channel = ADC_CHANNEL_5;
 8001316:	a39a      	add	r3, pc, #616	; (adr r3, 8001580 <main+0x318>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001320:	2204      	movs	r2, #4
 8001322:	237f      	movs	r3, #127	; 0x7f
 8001324:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_5;
 800132a:	2204      	movs	r2, #4
 800132c:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 8001330:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	f002 fe8e 	bl	8004054 <HAL_ADC_ConfigChannel>
 8001338:	2800      	cmp	r0, #0
 800133a:	f040 811c 	bne.w	8001576 <main+0x30e>
  huart2.Instance = USART2;
 800133e:	4d95      	ldr	r5, [pc, #596]	; (8001594 <main+0x32c>)
 8001340:	4995      	ldr	r1, [pc, #596]	; (8001598 <main+0x330>)
  huart2.Init.BaudRate = 1000000;
 8001342:	4a96      	ldr	r2, [pc, #600]	; (800159c <main+0x334>)
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001344:	6228      	str	r0, [r5, #32]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001346:	230c      	movs	r3, #12
  huart2.Init.BaudRate = 1000000;
 8001348:	e9c5 1200 	strd	r1, r2, [r5]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800134c:	e9c5 0304 	strd	r0, r3, [r5, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001350:	e9c5 0002 	strd	r0, r0, [r5, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	e9c5 0006 	strd	r0, r0, [r5, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001358:	2130      	movs	r1, #48	; 0x30
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800135a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800135e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001362:	4628      	mov	r0, r5
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001364:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001368:	6269      	str	r1, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136a:	f006 fb2d 	bl	80079c8 <HAL_UART_Init>
 800136e:	2800      	cmp	r0, #0
 8001370:	f040 8101 	bne.w	8001576 <main+0x30e>
  __HAL_UART_DISABLE(&huart2);
 8001374:	682a      	ldr	r2, [r5, #0]
 8001376:	6813      	ldr	r3, [r2, #0]
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6013      	str	r3, [r2, #0]
  * @param  NodeAddress 4 or 7 bit Address of the USART node.
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_t NodeAddress)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
 800137e:	6853      	ldr	r3, [r2, #4]
 8001380:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001384:	f023 0310 	bic.w	r3, r3, #16
 8001388:	f043 6350 	orr.w	r3, r3, #218103808	; 0xd000000
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	6053      	str	r3, [r2, #4]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001392:	e852 3f00 	ldrex	r3, [r2]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_CM(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_CMIE);
 8001396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800139a:	e842 3400 	strex	r4, r3, [r2]
 800139e:	2c00      	cmp	r4, #0
 80013a0:	d1f7      	bne.n	8001392 <main+0x12a>
  __HAL_UART_ENABLE(&huart2);
 80013a2:	682a      	ldr	r2, [r5, #0]
 80013a4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80015c8 <main+0x360>
 80013a8:	6813      	ldr	r3, [r2, #0]
 80013aa:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80015cc <main+0x364>
 80013ae:	4f7c      	ldr	r7, [pc, #496]	; (80015a0 <main+0x338>)
 80013b0:	f8df b21c 	ldr.w	fp, [pc, #540]	; 80015d0 <main+0x368>
 80013b4:	4e7b      	ldr	r6, [pc, #492]	; (80015a4 <main+0x33c>)
	BSP_MotorControl_SetAcceleration(0, MTR_RESET_ACC_DEC);
 80013b6:	eddf 8a7c 	vldr	s17, [pc, #496]	; 80015a8 <main+0x340>
	BSP_MotorControl_SetMaxSpeed(0, MTR_RESET_MAX_SPEED);
 80013ba:	ed9f 9a7c 	vldr	s18, [pc, #496]	; 80015ac <main+0x344>
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220, 1);
 80013be:	2101      	movs	r1, #1
  __HAL_UART_ENABLE(&huart2);
 80013c0:	430b      	orrs	r3, r1
 80013c2:	6013      	str	r3, [r2, #0]
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220, 1);
 80013c4:	20dc      	movs	r0, #220	; 0xdc
 80013c6:	f002 fb73 	bl	8003ab0 <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220, &initDeviceParameters);
 80013ca:	4979      	ldr	r1, [pc, #484]	; (80015b0 <main+0x348>)
 80013cc:	20dc      	movs	r0, #220	; 0xdc
 80013ce:	f002 fa51 	bl	8003874 <BSP_MotorControl_Init>
	BSP_MotorControl_AttachFlagInterrupt(MotorFailureHandler);
 80013d2:	4878      	ldr	r0, [pc, #480]	; (80015b4 <main+0x34c>)
 80013d4:	f002 fa3e 	bl	8003854 <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachErrorHandler(MotorErrHandler);
 80013d8:	4877      	ldr	r0, [pc, #476]	; (80015b8 <main+0x350>)
 80013da:	f002 fa2b 	bl	8003834 <BSP_MotorControl_AttachErrorHandler>
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80013de:	2101      	movs	r1, #1
 80013e0:	4620      	mov	r0, r4
 80013e2:	f001 ff61 	bl	80032a8 <BSP_PB_Init>
	BSP_LED_Init(LED2);
 80013e6:	4620      	mov	r0, r4
 80013e8:	f001 ff2c 	bl	8003244 <BSP_LED_Init>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80013ec:	217f      	movs	r1, #127	; 0x7f
 80013ee:	4867      	ldr	r0, [pc, #412]	; (800158c <main+0x324>)
 80013f0:	4c72      	ldr	r4, [pc, #456]	; (80015bc <main+0x354>)
 80013f2:	f003 f9d9 	bl	80047a8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80013f6:	4865      	ldr	r0, [pc, #404]	; (800158c <main+0x324>)
 80013f8:	f003 f8f8 	bl	80045ec <HAL_ADC_Start_IT>
	HAL_UART_Receive_DMA(&huart2, DMA_RxBuffer, RxBUFFER_SIZE);
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	4970      	ldr	r1, [pc, #448]	; (80015c0 <main+0x358>)
 8001400:	4864      	ldr	r0, [pc, #400]	; (8001594 <main+0x32c>)
 8001402:	f006 fb9b 	bl	8007b3c <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_TC | DMA_IT_HT);
 8001406:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001408:	4d6e      	ldr	r5, [pc, #440]	; (80015c4 <main+0x35c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	6813      	ldr	r3, [r2, #0]
 800140e:	f023 0306 	bic.w	r3, r3, #6
	if (speed < STSPIN220_MIN_STCK_FREQ)
 8001412:	eeb2 8a00 	vmov.f32	s16, #32	; 0x41000000  8.0
	__HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_TC | DMA_IT_HT);
 8001416:	6013      	str	r3, [r2, #0]
		if (reset_requested)
 8001418:	f899 3000 	ldrb.w	r3, [r9]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d149      	bne.n	80014b4 <main+0x24c>
		while (q_tail != q_head)
 8001420:	f8db 2000 	ldr.w	r2, [fp]
 8001424:	6833      	ldr	r3, [r6, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d023      	beq.n	8001472 <main+0x20a>
			update_pendulum(action_queue[q_tail++]);
 800142a:	f8db 3000 	ldr.w	r3, [fp]
 800142e:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8001432:	edd2 7a00 	vldr	s15, [r2]
	float speed = fabs(action);
 8001436:	eeb0 0ae7 	vabs.f32	s0, s15
	if (speed < STSPIN220_MIN_STCK_FREQ)
 800143a:	eeb4 0ac8 	vcmpe.f32	s0, s16
			update_pendulum(action_queue[q_tail++]);
 800143e:	3301      	adds	r3, #1
	if (speed < STSPIN220_MIN_STCK_FREQ)
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			update_pendulum(action_queue[q_tail++]);
 8001444:	f8cb 3000 	str.w	r3, [fp]
	if (speed < STSPIN220_MIN_STCK_FREQ)
 8001448:	d573      	bpl.n	8001532 <main+0x2ca>
		BSP_MotorControl_SetStopMode(0, HOLD_MODE);
 800144a:	2100      	movs	r1, #0
 800144c:	4608      	mov	r0, r1
 800144e:	f002 fb0b 	bl	8003a68 <BSP_MotorControl_SetStopMode>
		BSP_MotorControl_HardStop(0);
 8001452:	2000      	movs	r0, #0
 8001454:	f002 fa66 	bl	8003924 <BSP_MotorControl_HardStop>
			if (q_tail == ACT_QUEUE_SIZE)
 8001458:	f8db 3000 	ldr.w	r3, [fp]
 800145c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
				q_tail = 0;
 8001460:	bf04      	itt	eq
 8001462:	2300      	moveq	r3, #0
 8001464:	f8cb 3000 	streq.w	r3, [fp]
		while (q_tail != q_head)
 8001468:	f8db 2000 	ldr.w	r2, [fp]
 800146c:	6833      	ldr	r3, [r6, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d1db      	bne.n	800142a <main+0x1c2>
	if (!episode_done && abs(BSP_MotorControl_GetPosition(0)) >= MTR_MAX_STEPS / 2)
 8001472:	f898 3000 	ldrb.w	r3, [r8]
 8001476:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1cc      	bne.n	8001418 <main+0x1b0>
 800147e:	4650      	mov	r0, sl
 8001480:	f002 fa2a 	bl	80038d8 <BSP_MotorControl_GetPosition>
 8001484:	2800      	cmp	r0, #0
 8001486:	bfb8      	it	lt
 8001488:	4240      	neglt	r0, r0
 800148a:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 800148e:	dbc3      	blt.n	8001418 <main+0x1b0>
		episode_done = TRUE;
 8001490:	f04f 0301 	mov.w	r3, #1
		BSP_MotorControl_SetStopMode(0, HIZ_MODE);
 8001494:	2101      	movs	r1, #1
 8001496:	4650      	mov	r0, sl
		episode_done = TRUE;
 8001498:	f888 3000 	strb.w	r3, [r8]
		BSP_MotorControl_SetStopMode(0, HIZ_MODE);
 800149c:	f002 fae4 	bl	8003a68 <BSP_MotorControl_SetStopMode>
		BSP_MotorControl_HardStop(0);
 80014a0:	4650      	mov	r0, sl
 80014a2:	f002 fa3f 	bl	8003924 <BSP_MotorControl_HardStop>
		BSP_MotorControl_WaitWhileActive(0);
 80014a6:	4650      	mov	r0, sl
 80014a8:	f002 faae 	bl	8003a08 <BSP_MotorControl_WaitWhileActive>
		if (reset_requested)
 80014ac:	f899 3000 	ldrb.w	r3, [r9]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0b5      	beq.n	8001420 <main+0x1b8>
	episode_done = TRUE;
 80014b4:	f04f 0301 	mov.w	r3, #1
	BSP_MotorControl_SetStopMode(0, HIZ_MODE);
 80014b8:	2101      	movs	r1, #1
 80014ba:	2000      	movs	r0, #0
	episode_done = TRUE;
 80014bc:	f888 3000 	strb.w	r3, [r8]
	BSP_MotorControl_SetStopMode(0, HIZ_MODE);
 80014c0:	f002 fad2 	bl	8003a68 <BSP_MotorControl_SetStopMode>
	BSP_MotorControl_HardStop(0);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f002 fa2d 	bl	8003924 <BSP_MotorControl_HardStop>
	BSP_MotorControl_WaitWhileActive(0);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f002 fa9c 	bl	8003a08 <BSP_MotorControl_WaitWhileActive>
	BSP_MotorControl_SetAcceleration(0, MTR_RESET_ACC_DEC);
 80014d0:	eeb0 0a68 	vmov.f32	s0, s17
 80014d4:	2000      	movs	r0, #0
 80014d6:	f002 fa45 	bl	8003964 <BSP_MotorControl_SetAcceleration>
	BSP_MotorControl_SetDeceleration(0, MTR_RESET_ACC_DEC);
 80014da:	eeb0 0a68 	vmov.f32	s0, s17
 80014de:	2000      	movs	r0, #0
 80014e0:	f002 fa56 	bl	8003990 <BSP_MotorControl_SetDeceleration>
	BSP_MotorControl_SetMaxSpeed(0, MTR_RESET_MAX_SPEED);
 80014e4:	eeb0 0a49 	vmov.f32	s0, s18
 80014e8:	2000      	movs	r0, #0
 80014ea:	f002 fa67 	bl	80039bc <BSP_MotorControl_SetMaxSpeed>
	BSP_MotorControl_GoHome(0);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f002 fa08 	bl	8003904 <BSP_MotorControl_GoHome>
	BSP_MotorControl_WaitWhileActive(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f002 fa87 	bl	8003a08 <BSP_MotorControl_WaitWhileActive>
	BSP_MotorControl_CmdDisable(0);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f002 fa94 	bl	8003a28 <BSP_MotorControl_CmdDisable>
	BSP_MotorControl_SetAcceleration(0, initDeviceParameters.acceleration);
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <main+0x348>)
 8001502:	2000      	movs	r0, #0
 8001504:	ed93 0a00 	vldr	s0, [r3]
 8001508:	f002 fa2c 	bl	8003964 <BSP_MotorControl_SetAcceleration>
	BSP_MotorControl_SetDeceleration(0, initDeviceParameters.deceleration);
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <main+0x348>)
 800150e:	2000      	movs	r0, #0
 8001510:	ed93 0a01 	vldr	s0, [r3, #4]
 8001514:	f002 fa3c 	bl	8003990 <BSP_MotorControl_SetDeceleration>
	while (!ACK_sent);
 8001518:	782b      	ldrb	r3, [r5, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0fc      	beq.n	8001518 <main+0x2b0>
	while (break_enabled);
 800151e:	7823      	ldrb	r3, [r4, #0]
 8001520:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1fa      	bne.n	800151e <main+0x2b6>
	episode_done = FALSE;
 8001528:	f888 2000 	strb.w	r2, [r8]
			reset_requested = FALSE;
 800152c:	f889 2000 	strb.w	r2, [r9]
 8001530:	e776      	b.n	8001420 <main+0x1b8>
	motorDir_t dir = action > 0 ? FORWARD : BACKWARD;
 8001532:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		BSP_MotorControl_SetMaxSpeed(0, speed);
 800153a:	f04f 0000 	mov.w	r0, #0
	motorDir_t dir = action > 0 ? FORWARD : BACKWARD;
 800153e:	bf94      	ite	ls
 8001540:	f04f 0a01 	movls.w	sl, #1
 8001544:	f04f 0a00 	movhi.w	sl, #0
		BSP_MotorControl_SetMaxSpeed(0, speed);
 8001548:	f002 fa38 	bl	80039bc <BSP_MotorControl_SetMaxSpeed>
		if (BSP_MotorControl_GetDeviceState(0) >= INACTIVE)
 800154c:	2000      	movs	r0, #0
 800154e:	f002 f9b1 	bl	80038b4 <BSP_MotorControl_GetDeviceState>
 8001552:	2807      	cmp	r0, #7
 8001554:	d904      	bls.n	8001560 <main+0x2f8>
			BSP_MotorControl_Run(0, dir);
 8001556:	4651      	mov	r1, sl
 8001558:	2000      	movs	r0, #0
 800155a:	f002 f9f3 	bl	8003944 <BSP_MotorControl_Run>
 800155e:	e77b      	b.n	8001458 <main+0x1f0>
		else if (dir != BSP_MotorControl_GetDirection(0))
 8001560:	2000      	movs	r0, #0
 8001562:	f002 fa91 	bl	8003a88 <BSP_MotorControl_GetDirection>
 8001566:	4582      	cmp	sl, r0
 8001568:	f43f af76 	beq.w	8001458 <main+0x1f0>
			BSP_MotorControl_HardSetDirection(0, dir);
 800156c:	4651      	mov	r1, sl
 800156e:	2000      	movs	r0, #0
 8001570:	f002 fa6a 	bl	8003a48 <BSP_MotorControl_HardSetDirection>
 8001574:	e770      	b.n	8001458 <main+0x1f0>
    Error_Handler();
 8001576:	f7ff fe15 	bl	80011a4 <Error_Handler>
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	14f00020 	.word	0x14f00020
 8001584:	00000006 	.word	0x00000006
 8001588:	40021000 	.word	0x40021000
 800158c:	2000145c 	.word	0x2000145c
 8001590:	50040000 	.word	0x50040000
 8001594:	20001550 	.word	0x20001550
 8001598:	40004400 	.word	0x40004400
 800159c:	000f4240 	.word	0x000f4240
 80015a0:	200004b8 	.word	0x200004b8
 80015a4:	200015d8 	.word	0x200015d8
 80015a8:	42960000 	.word	0x42960000
 80015ac:	437a0000 	.word	0x437a0000
 80015b0:	20000004 	.word	0x20000004
 80015b4:	080011c9 	.word	0x080011c9
 80015b8:	08001611 	.word	0x08001611
 80015bc:	20001458 	.word	0x20001458
 80015c0:	2000041c 	.word	0x2000041c
 80015c4:	20000398 	.word	0x20000398
 80015c8:	20000028 	.word	0x20000028
 80015cc:	20000000 	.word	0x20000000
 80015d0:	200015dc 	.word	0x200015dc

080015d4 <HAL_UART_ErrorCallback>:
{
 80015d4:	b510      	push	{r4, lr}
	if (huart->Instance == huart2.Instance)
 80015d6:	4c0c      	ldr	r4, [pc, #48]	; (8001608 <HAL_UART_ErrorCallback+0x34>)
 80015d8:	6802      	ldr	r2, [r0, #0]
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d000      	beq.n	80015e2 <HAL_UART_ErrorCallback+0xe>
}
 80015e0:	bd10      	pop	{r4, pc}
		if (HAL_UART_Abort(&huart2) != HAL_OK)
 80015e2:	4620      	mov	r0, r4
 80015e4:	f005 fcce 	bl	8006f84 <HAL_UART_Abort>
 80015e8:	b958      	cbnz	r0, 8001602 <HAL_UART_ErrorCallback+0x2e>
		HAL_UART_Receive_DMA(&huart2, DMA_RxBuffer, RxBUFFER_SIZE);
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <HAL_UART_ErrorCallback+0x38>)
 80015ee:	4620      	mov	r0, r4
 80015f0:	f006 faa4 	bl	8007b3c <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_TC | DMA_IT_HT);
 80015f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	6813      	ldr	r3, [r2, #0]
 80015fa:	f023 0306 	bic.w	r3, r3, #6
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bd10      	pop	{r4, pc}
			Error_Handler();
 8001602:	f7ff fdcf 	bl	80011a4 <Error_Handler>
 8001606:	bf00      	nop
 8001608:	20001550 	.word	0x20001550
 800160c:	2000041c 	.word	0x2000041c

08001610 <MotorErrHandler>:
{
 8001610:	b508      	push	{r3, lr}
	gLastError = error;
 8001612:	4b02      	ldr	r3, [pc, #8]	; (800161c <MotorErrHandler+0xc>)
 8001614:	8018      	strh	r0, [r3, #0]
	Error_Handler();
 8001616:	f7ff fdc5 	bl	80011a4 <Error_Handler>
 800161a:	bf00      	nop
 800161c:	2000145a 	.word	0x2000145a

08001620 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_MspInit+0x2c>)
 8001622:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001624:	f042 0201 	orr.w	r2, r2, #1
 8001628:	661a      	str	r2, [r3, #96]	; 0x60
 800162a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800162c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	f002 0201 	and.w	r2, r2, #1
 8001632:	9200      	str	r2, [sp, #0]
 8001634:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001638:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800163c:	659a      	str	r2, [r3, #88]	; 0x58
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001648:	b002      	add	sp, #8
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001650:	b510      	push	{r4, lr}
 8001652:	4604      	mov	r4, r0
 8001654:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001658:	2288      	movs	r2, #136	; 0x88
 800165a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001660:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001664:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001666:	f006 facf 	bl	8007c08 <memset>
  if(hadc->Instance==ADC1)
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_ADC_MspInit+0xd0>)
 800166c:	6822      	ldr	r2, [r4, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d001      	beq.n	8001676 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001672:	b02a      	add	sp, #168	; 0xa8
 8001674:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001676:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001700 <HAL_ADC_MspInit+0xb0>
 800167a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800167e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001708 <HAL_ADC_MspInit+0xb8>
 8001682:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001686:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001710 <HAL_ADC_MspInit+0xc0>
 800168a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800168e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001718 <HAL_ADC_MspInit+0xc8>
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001692:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001696:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001698:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800169c:	9326      	str	r3, [sp, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169e:	f004 fac1 	bl	8005c24 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	bb38      	cbnz	r0, 80016f4 <HAL_ADC_MspInit+0xa4>
    __HAL_RCC_ADC_CLK_ENABLE();
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_ADC_MspInit+0xd4>)
 80016a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80016a8:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80016ac:	64d8      	str	r0, [r3, #76]	; 0x4c
 80016ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80016b0:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80016b4:	9000      	str	r0, [sp, #0]
 80016b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80016ba:	f040 0001 	orr.w	r0, r0, #1
 80016be:	64d8      	str	r0, [r3, #76]	; 0x4c
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2400      	movs	r4, #0
    HAL_GPIO_Init(AS5600_IN_GPIO_Port, &GPIO_InitStruct);
 80016ca:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = AS5600_IN_Pin;
 80016cc:	2201      	movs	r2, #1
    HAL_GPIO_Init(AS5600_IN_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = AS5600_IN_Pin;
 80016d2:	230b      	movs	r3, #11
 80016d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(AS5600_IN_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f003 fb1a 	bl	8004d14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 4, 0);
 80016e0:	4622      	mov	r2, r4
 80016e2:	2104      	movs	r1, #4
 80016e4:	2012      	movs	r0, #18
 80016e6:	f003 f937 	bl	8004958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016ea:	2012      	movs	r0, #18
 80016ec:	f003 f972 	bl	80049d4 <HAL_NVIC_EnableIRQ>
}
 80016f0:	b02a      	add	sp, #168	; 0xa8
 80016f2:	bd10      	pop	{r4, pc}
      Error_Handler();
 80016f4:	f7ff fd56 	bl	80011a4 <Error_Handler>
 80016f8:	e7d4      	b.n	80016a4 <HAL_ADC_MspInit+0x54>
 80016fa:	bf00      	nop
 80016fc:	f3af 8000 	nop.w
 8001700:	00004000 	.word	0x00004000
 8001704:	00000001 	.word	0x00000001
 8001708:	00000001 	.word	0x00000001
 800170c:	00000028 	.word	0x00000028
 8001710:	00000007 	.word	0x00000007
 8001714:	00000002 	.word	0x00000002
 8001718:	00000002 	.word	0x00000002
 800171c:	01000000 	.word	0x01000000
 8001720:	50040000 	.word	0x50040000
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM2)
 8001728:	6803      	ldr	r3, [r0, #0]
 800172a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172e:	d000      	beq.n	8001732 <HAL_TIM_OC_MspInit+0xa>
 8001730:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001732:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 8001736:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001738:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800173a:	f040 0001 	orr.w	r0, r0, #1
 800173e:	6598      	str	r0, [r3, #88]	; 0x58
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8001742:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001744:	f003 0301 	and.w	r3, r3, #1
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2106      	movs	r1, #6
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800174e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001750:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8001752:	f003 f901 	bl	8004958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001756:	201c      	movs	r0, #28
 8001758:	f003 f93c 	bl	80049d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3;
 800175c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8001780 <HAL_TIM_OC_MspInit+0x58>
 8001760:	2008      	movs	r0, #8
 8001762:	2102      	movs	r1, #2
 8001764:	e9cd 0102 	strd	r0, r1, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AF_TIM_STCK;
 8001768:	2301      	movs	r3, #1
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3, &GPIO_InitStruct);
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <HAL_TIM_OC_MspInit+0x60>)
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AF_TIM_STCK;
 800176c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3, &GPIO_InitStruct);
 800176e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3;
 8001770:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3, &GPIO_InitStruct);
 8001774:	f003 face 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001778:	b009      	add	sp, #36	; 0x24
 800177a:	f85d fb04 	ldr.w	pc, [sp], #4
 800177e:	bf00      	nop
 8001780:	00000000 	.word	0x00000000
 8001784:	00000001 	.word	0x00000001
 8001788:	48000400 	.word	0x48000400

0800178c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_TIM_PWM_MspInit+0x40>)
 800178e:	6802      	ldr	r2, [r0, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d000      	beq.n	8001796 <HAL_TIM_PWM_MspInit+0xa>
 8001794:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001796:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
{
 800179a:	b510      	push	{r4, lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  /* USER CODE BEGIN TIM3_MspInit 1 */
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_PWM_REF;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AF_PWM_REF;
 800179e:	2402      	movs	r4, #2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a0:	4322      	orrs	r2, r4
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80017a6:	b088      	sub	sp, #32
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a8:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_PWM_REF;
 80017aa:	2080      	movs	r0, #128	; 0x80
 80017ac:	2102      	movs	r1, #2
 80017ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_PWM_REF;
 80017b4:	2200      	movs	r2, #0
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_PWM_REF, &GPIO_InitStruct);
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <HAL_TIM_PWM_MspInit+0x44>)
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AF_PWM_REF;
 80017b8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_PWM_REF;
 80017ba:	2301      	movs	r3, #1
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_PWM_REF, &GPIO_InitStruct);
 80017bc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_PWM_REF;
 80017be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017c2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_PWM_REF, &GPIO_InitStruct);
 80017c4:	f003 faa6 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017c8:	b008      	add	sp, #32
 80017ca:	bd10      	pop	{r4, pc}
 80017cc:	40000400 	.word	0x40000400
 80017d0:	48000800 	.word	0x48000800

080017d4 <HAL_TIM_OC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef* htim_oc)
{
 80017d4:	b508      	push	{r3, lr}
  if(htim_oc->Instance==TIM2)
 80017d6:	6803      	ldr	r3, [r0, #0]
 80017d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017dc:	d000      	beq.n	80017e0 <HAL_TIM_OC_MspDeInit+0xc>
      BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3);

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 80017de:	bd08      	pop	{r3, pc}
    __HAL_RCC_TIM2_CLK_DISABLE();
 80017e0:	4a06      	ldr	r2, [pc, #24]	; (80017fc <HAL_TIM_OC_MspDeInit+0x28>)
 80017e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80017e4:	f023 0301 	bic.w	r3, r3, #1
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80017e8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_DISABLE();
 80017ea:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80017ec:	f003 f900 	bl	80049f0 <HAL_NVIC_DisableIRQ>
}
 80017f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <HAL_TIM_OC_MspDeInit+0x2c>)
 80017f6:	2108      	movs	r1, #8
 80017f8:	f003 bb8e 	b.w	8004f18 <HAL_GPIO_DeInit>
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000400 	.word	0x48000400

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b570      	push	{r4, r5, r6, lr}
 8001806:	4604      	mov	r4, r0
 8001808:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800180c:	2288      	movs	r2, #136	; 0x88
 800180e:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001814:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001818:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800181a:	f006 f9f5 	bl	8007c08 <memset>
  if(huart->Instance==USART2)
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_UART_MspInit+0xf4>)
 8001820:	6822      	ldr	r2, [r4, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d001      	beq.n	800182a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001826:	b02a      	add	sp, #168	; 0xa8
 8001828:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800182a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800182e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001830:	f004 f9f8 	bl	8005c24 <HAL_RCCEx_PeriphCLKConfig>
 8001834:	2800      	cmp	r0, #0
 8001836:	d155      	bne.n	80018e4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_UART_MspInit+0xf8>)
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800183a:	4e31      	ldr	r6, [pc, #196]	; (8001900 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800183c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800183e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001842:	659a      	str	r2, [r3, #88]	; 0x58
 8001844:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001846:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800184a:	9200      	str	r2, [sp, #0]
 800184c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	64da      	str	r2, [r3, #76]	; 0x4c
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800185e:	220c      	movs	r2, #12
 8001860:	2302      	movs	r3, #2
 8001862:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001866:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800186a:	2303      	movs	r3, #3
 800186c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001872:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001878:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f003 fa4b 	bl	8004d14 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800187e:	4921      	ldr	r1, [pc, #132]	; (8001904 <HAL_UART_MspInit+0x100>)
 8001880:	2202      	movs	r2, #2
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001882:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001884:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001888:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800188a:	2180      	movs	r1, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800188c:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001892:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001896:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800189a:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800189c:	f003 f8e6 	bl	8004a6c <HAL_DMA_Init>
 80018a0:	bb30      	cbnz	r0, 80018f0 <HAL_UART_MspInit+0xec>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80018a2:	4d19      	ldr	r5, [pc, #100]	; (8001908 <HAL_UART_MspInit+0x104>)
 80018a4:	4919      	ldr	r1, [pc, #100]	; (800190c <HAL_UART_MspInit+0x108>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80018a6:	6726      	str	r6, [r4, #112]	; 0x70
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80018a8:	2202      	movs	r2, #2
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018aa:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80018ac:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018b0:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b2:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018b4:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b6:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ba:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018be:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80018c2:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018c4:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018c6:	f003 f8d1 	bl	8004a6c <HAL_DMA_Init>
 80018ca:	b970      	cbnz	r0, 80018ea <HAL_UART_MspInit+0xe6>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2103      	movs	r1, #3
 80018d0:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018d2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80018d4:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80018d6:	f003 f83f 	bl	8004958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018da:	2026      	movs	r0, #38	; 0x26
 80018dc:	f003 f87a 	bl	80049d4 <HAL_NVIC_EnableIRQ>
}
 80018e0:	b02a      	add	sp, #168	; 0xa8
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80018e4:	f7ff fc5e 	bl	80011a4 <Error_Handler>
 80018e8:	e7a6      	b.n	8001838 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80018ea:	f7ff fc5b 	bl	80011a4 <Error_Handler>
 80018ee:	e7ed      	b.n	80018cc <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80018f0:	f7ff fc58 	bl	80011a4 <Error_Handler>
 80018f4:	e7d5      	b.n	80018a2 <HAL_UART_MspInit+0x9e>
 80018f6:	bf00      	nop
 80018f8:	40004400 	.word	0x40004400
 80018fc:	40021000 	.word	0x40021000
 8001900:	200014c0 	.word	0x200014c0
 8001904:	4002006c 	.word	0x4002006c
 8001908:	20001508 	.word	0x20001508
 800190c:	40020080 	.word	0x40020080

08001910 <HAL_TIM_OC_DelayElapsedCallback>:
 * @param  htim : TIM OC handle
 * @retval None
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
	if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIM_STCK)
 8001910:	6803      	ldr	r3, [r0, #0]
 8001912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001916:	d000      	beq.n	800191a <HAL_TIM_OC_DelayElapsedCallback+0xa>
		&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIM_STCK))
	{
		BSP_MotorControl_StepClockHandler(0);
	}
}
 8001918:	4770      	bx	lr
		&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIM_STCK))
 800191a:	7f03      	ldrb	r3, [r0, #28]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d1fb      	bne.n	8001918 <HAL_TIM_OC_DelayElapsedCallback+0x8>
		BSP_MotorControl_StepClockHandler(0);
 8001920:	2000      	movs	r0, #0
 8001922:	f002 b861 	b.w	80039e8 <BSP_MotorControl_StepClockHandler>
 8001926:	bf00      	nop

08001928 <HAL_GPIO_EXTI_Callback>:
 * @param[in] GPIO_Pin pin number
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT)
 8001928:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_EXTI_Callback+0xe>
	{
		BSP_MotorControl_FlagInterruptHandler();
	}
	if (GPIO_Pin == KEY_BUTTON_PIN)
 800192e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001932:	d002      	beq.n	800193a <HAL_GPIO_EXTI_Callback+0x12>
	{
		ButtonHandler();
	}
}
 8001934:	4770      	bx	lr
		BSP_MotorControl_FlagInterruptHandler();
 8001936:	f001 bfad 	b.w	8003894 <BSP_MotorControl_FlagInterruptHandler>
		ButtonHandler();
 800193a:	f7ff bc21 	b.w	8001180 <ButtonHandler>
 800193e:	bf00      	nop

08001940 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler>
 8001942:	bf00      	nop

08001944 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <HardFault_Handler>
 8001946:	bf00      	nop

08001948 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler>
 800194a:	bf00      	nop

0800194c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <BusFault_Handler>
 800194e:	bf00      	nop

08001950 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler>
 8001952:	bf00      	nop

08001954 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop

08001958 <DebugMon_Handler>:
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <PendSV_Handler>:
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f002 b93e 	b.w	8003be0 <HAL_IncTick>

08001964 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001964:	4801      	ldr	r0, [pc, #4]	; (800196c <DMA1_Channel6_IRQHandler+0x8>)
 8001966:	f003 b985 	b.w	8004c74 <HAL_DMA_IRQHandler>
 800196a:	bf00      	nop
 800196c:	200014c0 	.word	0x200014c0

08001970 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001970:	4801      	ldr	r0, [pc, #4]	; (8001978 <DMA1_Channel7_IRQHandler+0x8>)
 8001972:	f003 b97f 	b.w	8004c74 <HAL_DMA_IRQHandler>
 8001976:	bf00      	nop
 8001978:	20001508 	.word	0x20001508

0800197c <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800197c:	4801      	ldr	r0, [pc, #4]	; (8001984 <ADC1_2_IRQHandler+0x8>)
 800197e:	f002 ba43 	b.w	8003e08 <HAL_ADC_IRQHandler>
 8001982:	bf00      	nop
 8001984:	2000145c 	.word	0x2000145c

08001988 <TIM2_IRQHandler>:
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

	HAL_TIM_IRQHandler(&hTimerStepClock);
 8001988:	4801      	ldr	r0, [pc, #4]	; (8001990 <TIM2_IRQHandler+0x8>)
 800198a:	f004 bf4d 	b.w	8006828 <HAL_TIM_IRQHandler>
 800198e:	bf00      	nop
 8001990:	20001694 	.word	0x20001694

08001994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001994:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t err = (huart2.Instance->ISR & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001996:	4c11      	ldr	r4, [pc, #68]	; (80019dc <USART2_IRQHandler+0x48>)
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	69da      	ldr	r2, [r3, #28]
	if (__HAL_UART_GET_IT(&huart2, UART_IT_CM) && err == 0)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	039b      	lsls	r3, r3, #14
 80019a0:	d503      	bpl.n	80019aa <USART2_IRQHandler+0x16>
	uint32_t err = (huart2.Instance->ISR & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80019a2:	f640 030f 	movw	r3, #2063	; 0x80f
	if (__HAL_UART_GET_IT(&huart2, UART_IT_CM) && err == 0)
 80019a6:	421a      	tst	r2, r3
 80019a8:	d004      	beq.n	80019b4 <USART2_IRQHandler+0x20>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
	}
  /* USER CODE END USART2_IRQn 1 */
}
 80019aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_IRQHandler(&huart2);
 80019ae:	480b      	ldr	r0, [pc, #44]	; (80019dc <USART2_IRQHandler+0x48>)
 80019b0:	f005 bbfe 	b.w	80071b0 <HAL_UART_IRQHandler>
		huart2.RxXferCount = (uint16_t) __HAL_DMA_GET_COUNTER(huart2.hdmarx);
 80019b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(&huart2, huart2.RxXferSize - huart2.RxXferCount);
 80019b6:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
		huart2.RxXferCount = (uint16_t) __HAL_DMA_GET_COUNTER(huart2.hdmarx);
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        HAL_UARTEx_RxEventCallback(&huart2, huart2.RxXferSize - huart2.RxXferCount);
 80019c4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80019c8:	1ac9      	subs	r1, r1, r3
 80019ca:	4620      	mov	r0, r4
 80019cc:	b289      	uxth	r1, r1
 80019ce:	f7ff fad5 	bl	8000f7c <HAL_UARTEx_RxEventCallback>
        __HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_CMF);
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019d8:	621a      	str	r2, [r3, #32]
}
 80019da:	bd10      	pop	{r4, pc}
 80019dc:	20001550 	.word	0x20001550

080019e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
 80019e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019e6:	f003 fb53 	bl	8005090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STS_EN_AND_FAULT_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	}
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 80019ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019f2:	f003 bb4d 	b.w	8005090 <HAL_GPIO_EXTI_IRQHandler>
 80019f6:	bf00      	nop

080019f8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80019f8:	2001      	movs	r0, #1
 80019fa:	4770      	bx	lr

080019fc <_kill>:

int _kill(int pid, int sig)
{
 80019fc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019fe:	f006 f8cb 	bl	8007b98 <__errno>
 8001a02:	2316      	movs	r3, #22
 8001a04:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001a06:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0a:	bd08      	pop	{r3, pc}

08001a0c <_exit>:

void _exit (int status)
{
 8001a0c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001a0e:	f006 f8c3 	bl	8007b98 <__errno>
 8001a12:	2316      	movs	r3, #22
 8001a14:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001a16:	e7fe      	b.n	8001a16 <_exit+0xa>

08001a18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a18:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	1e16      	subs	r6, r2, #0
 8001a1c:	dd07      	ble.n	8001a2e <_read+0x16>
 8001a1e:	460c      	mov	r4, r1
 8001a20:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	42a5      	cmp	r5, r4
 8001a2c:	d1f9      	bne.n	8001a22 <_read+0xa>
  }

  return len;
}
 8001a2e:	4630      	mov	r0, r6
 8001a30:	bd70      	pop	{r4, r5, r6, pc}
 8001a32:	bf00      	nop

08001a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a34:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	1e16      	subs	r6, r2, #0
 8001a38:	dd07      	ble.n	8001a4a <_write+0x16>
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001a3e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	42ac      	cmp	r4, r5
 8001a48:	d1f9      	bne.n	8001a3e <_write+0xa>
  }
  return len;
}
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	bd70      	pop	{r4, r5, r6, pc}
 8001a4e:	bf00      	nop

08001a50 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5c:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001a5e:	2000      	movs	r0, #0
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop

08001a64 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001a64:	2001      	movs	r0, #1
 8001a66:	4770      	bx	lr

08001a68 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001a68:	2000      	movs	r0, #0
 8001a6a:	4770      	bx	lr

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a6e:	4c0c      	ldr	r4, [pc, #48]	; (8001aa0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <_sbrk+0x38>)
 8001a72:	490d      	ldr	r1, [pc, #52]	; (8001aa8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001a74:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a76:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001a78:	b12a      	cbz	r2, 8001a86 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7a:	4410      	add	r0, r2
 8001a7c:	4288      	cmp	r0, r1
 8001a7e:	d807      	bhi.n	8001a90 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a80:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001a82:	4610      	mov	r0, r2
 8001a84:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <_sbrk+0x40>)
 8001a88:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4410      	add	r0, r2
 8001a8c:	4288      	cmp	r0, r1
 8001a8e:	d9f7      	bls.n	8001a80 <_sbrk+0x14>
    errno = ENOMEM;
 8001a90:	f006 f882 	bl	8007b98 <__errno>
 8001a94:	230c      	movs	r3, #12
    return (void *)-1;
 8001a96:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8001a9a:	6003      	str	r3, [r0, #0]
}
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	bd10      	pop	{r4, pc}
 8001aa0:	200015e4 	.word	0x200015e4
 8001aa4:	20018000 	.word	0x20018000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	20001700 	.word	0x20001700

08001ab0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ab0:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <SystemInit+0x10>)
 8001ab2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ab6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac8:	f7ff fff2 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ace:	490d      	ldr	r1, [pc, #52]	; (8001b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <LoopForever+0xe>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae4:	4c0a      	ldr	r4, [pc, #40]	; (8001b10 <LoopForever+0x16>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001af2:	f006 f857 	bl	8007ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001af6:	f7ff fbb7 	bl	8001268 <main>

08001afa <LoopForever>:

LoopForever:
    b LoopForever
 8001afa:	e7fe      	b.n	8001afa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001afc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	2000037c 	.word	0x2000037c
  ldr r2, =_sidata
 8001b08:	0800aeb4 	.word	0x0800aeb4
  ldr r2, =_sbss
 8001b0c:	2000037c 	.word	0x2000037c
  ldr r4, =_ebss
 8001b10:	200016fc 	.word	0x200016fc

08001b14 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC3_IRQHandler>
	...

08001b18 <Stspin220_ReadId>:
 * @brief Read id
 * @retval Id of the stspin220 Driver Instance
 **********************************************************/
uint16_t Stspin220_ReadId(void)
{
  return (stspin220DriverInstance);
 8001b18:	4b01      	ldr	r3, [pc, #4]	; (8001b20 <Stspin220_ReadId+0x8>)
}
 8001b1a:	8818      	ldrh	r0, [r3, #0]
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20001640 	.word	0x20001640

08001b24 <Stspin220_AttachErrorHandler>:
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Stspin220_AttachErrorHandler(void (*callback)(uint16_t))
{
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <Stspin220_AttachErrorHandler+0x8>)
 8001b26:	6018      	str	r0, [r3, #0]
}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20001638 	.word	0x20001638

08001b30 <Stspin220_AttachFlagInterrupt>:
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Stspin220_AttachFlagInterrupt(void (*callback)(void))
{
  flagInterruptCallback = (void (*)())callback;
 8001b30:	4b01      	ldr	r3, [pc, #4]	; (8001b38 <Stspin220_AttachFlagInterrupt+0x8>)
 8001b32:	6018      	str	r0, [r3, #0]
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000163c 	.word	0x2000163c

08001b3c <Stspin220_ErrorHandler>:
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Stspin220_ErrorHandler(uint16_t error)
{
  if (errorHandlerCallback != 0)
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <Stspin220_ErrorHandler+0xc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b103      	cbz	r3, 8001b44 <Stspin220_ErrorHandler+0x8>
  {
    (void) errorHandlerCallback(error);
 8001b42:	4718      	bx	r3
  }
  else   
  {
    while(1)
 8001b44:	e7fe      	b.n	8001b44 <Stspin220_ErrorHandler+0x8>
 8001b46:	bf00      	nop
 8001b48:	20001638 	.word	0x20001638

08001b4c <Stspin220_GetAcceleration>:
 * @param[in] deviceId Unused parameter
 * @retval Acceleration in pps^2
 **********************************************************/
float Stspin220_GetAcceleration(uint8_t deviceId)
{                                                  
  return (devicePrm.acceleration);
 8001b4c:	4b01      	ldr	r3, [pc, #4]	; (8001b54 <Stspin220_GetAcceleration+0x8>)
 8001b4e:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
}            
 8001b52:	4770      	bx	lr
 8001b54:	200015e8 	.word	0x200015e8

08001b58 <Stspin220_GetCurrentSpeed>:
 * @param[in] deviceId Unused parameter
 * @retval Speed in pps
 **********************************************************/
float Stspin220_GetCurrentSpeed(uint8_t deviceId)
{
  return devicePrm.speed;
 8001b58:	4b01      	ldr	r3, [pc, #4]	; (8001b60 <Stspin220_GetCurrentSpeed+0x8>)
 8001b5a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
}
 8001b5e:	4770      	bx	lr
 8001b60:	200015e8 	.word	0x200015e8

08001b64 <Stspin220_GetDeceleration>:
 * @param[in] deviceId Unused parameter
 * @retval Deceleration in pps^2
 **********************************************************/
float Stspin220_GetDeceleration(uint8_t deviceId)
{                                                  
  return (devicePrm.deceleration);
 8001b64:	4b01      	ldr	r3, [pc, #4]	; (8001b6c <Stspin220_GetDeceleration+0x8>)
 8001b66:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
}          
 8001b6a:	4770      	bx	lr
 8001b6c:	200015e8 	.word	0x200015e8

08001b70 <Stspin220_GetDeviceState>:
 * @param[in] deviceId Unused parameter
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t Stspin220_GetDeviceState(uint8_t deviceId)
{
  return devicePrm.motionState;
 8001b70:	4b01      	ldr	r3, [pc, #4]	; (8001b78 <Stspin220_GetDeviceState+0x8>)
 8001b72:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
}
 8001b76:	4770      	bx	lr
 8001b78:	200015e8 	.word	0x200015e8

08001b7c <Stspin220_GetDirection>:
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t Stspin220_GetDirection(uint8_t deviceId)
{
  return devicePrm.direction;
 8001b7c:	4b01      	ldr	r3, [pc, #4]	; (8001b84 <Stspin220_GetDirection+0x8>)
 8001b7e:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
}
 8001b82:	4770      	bx	lr
 8001b84:	200015e8 	.word	0x200015e8

08001b88 <Stspin220_GetFwVersion>:
 * @retval Stspin220_FW_VERSION
 **********************************************************/
uint32_t Stspin220_GetFwVersion(void)
{
  return (STSPIN220_FW_VERSION);
}
 8001b88:	4800      	ldr	r0, [pc, #0]	; (8001b8c <Stspin220_GetFwVersion+0x4>)
 8001b8a:	4770      	bx	lr
 8001b8c:	00010300 	.word	0x00010300

08001b90 <Stspin220_GetMark>:
 * @param[in] deviceId Unused parameter
 * @retval mark position value
 **********************************************************/
int32_t Stspin220_GetMark(uint8_t deviceId)
{
  return devicePrm.markPosition;
 8001b90:	4b01      	ldr	r3, [pc, #4]	; (8001b98 <Stspin220_GetMark+0x8>)
 8001b92:	68d8      	ldr	r0, [r3, #12]
}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200015e8 	.word	0x200015e8

08001b9c <Stspin220_GetMaxSpeed>:
 * @param[in] deviceId Unused parameter
 * @retval maxSpeed in pps
 **********************************************************/
float Stspin220_GetMaxSpeed(uint8_t deviceId)
{                                                  
  return (devicePrm.maxSpeed);
 8001b9c:	4b01      	ldr	r3, [pc, #4]	; (8001ba4 <Stspin220_GetMaxSpeed+0x8>)
 8001b9e:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
}
 8001ba2:	4770      	bx	lr
 8001ba4:	200015e8 	.word	0x200015e8

08001ba8 <Stspin220_GetMinSpeed>:
 * @param[in] deviceId Unused parameter
 * @retval minSpeed in pps
 **********************************************************/
float Stspin220_GetMinSpeed(uint8_t deviceId)
{                                                  
  return (devicePrm.minSpeed);
 8001ba8:	4b01      	ldr	r3, [pc, #4]	; (8001bb0 <Stspin220_GetMinSpeed+0x8>)
 8001baa:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
}                                                     
 8001bae:	4770      	bx	lr
 8001bb0:	200015e8 	.word	0x200015e8

08001bb4 <Stspin220_GetNbDevices>:
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t Stspin220_GetNbDevices(void)
{
  return (stspin220NumberOfDevices);
 8001bb4:	4b01      	ldr	r3, [pc, #4]	; (8001bbc <Stspin220_GetNbDevices+0x8>)
}
 8001bb6:	7818      	ldrb	r0, [r3, #0]
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20001642 	.word	0x20001642

08001bc0 <Stspin220_GetPosition>:
 * @param[in] deviceId Unused parameter
 * @retval current position value
 **********************************************************/
int32_t Stspin220_GetPosition(uint8_t deviceId)
{
  return devicePrm.currentPosition;
 8001bc0:	4b01      	ldr	r3, [pc, #4]	; (8001bc8 <Stspin220_GetPosition+0x8>)
 8001bc2:	6858      	ldr	r0, [r3, #4]
}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	200015e8 	.word	0x200015e8

08001bcc <Stspin220_GetStepMode>:
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t Stspin220_GetStepMode(uint8_t deviceId)
{
  return devicePrm.stepMode;
 8001bcc:	4b01      	ldr	r3, [pc, #4]	; (8001bd4 <Stspin220_GetStepMode+0x8>)
 8001bce:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
}
 8001bd2:	4770      	bx	lr
 8001bd4:	200015e8 	.word	0x200015e8

08001bd8 <Stspin220_GetStopMode>:
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t Stspin220_GetStopMode(uint8_t deviceId)
{
  return devicePrm.stopMode;
 8001bd8:	4b01      	ldr	r3, [pc, #4]	; (8001be0 <Stspin220_GetStopMode+0x8>)
}
 8001bda:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 8001bde:	4770      	bx	lr
 8001be0:	200015e8 	.word	0x200015e8

08001be4 <Stspin220_GetTorque>:
 * @note
 **********************************************************/
uint8_t Stspin220_GetTorque(uint8_t deviceId, motorTorqueMode_t torqueMode)
{
  uint8_t torqueValue = 0;
  switch(torqueMode)
 8001be4:	2904      	cmp	r1, #4
 8001be6:	d81d      	bhi.n	8001c24 <Stspin220_GetTorque+0x40>
 8001be8:	e8df f001 	tbb	[pc, r1]
 8001bec:	17120d08 	.word	0x17120d08
 8001bf0:	03          	.byte	0x03
 8001bf1:	00          	.byte	0x00
      break;
    case HOLD_TORQUE:
      torqueValue = devicePrm.holdTorque;
      break;
    case CURRENT_TORQUE:
      torqueValue = devicePrm.currentTorque;
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <Stspin220_GetTorque+0x44>)
 8001bf4:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8001bf8:	b2c0      	uxtb	r0, r0
      break;
 8001bfa:	4770      	bx	lr
      torqueValue = devicePrm.accelTorque;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <Stspin220_GetTorque+0x44>)
 8001bfe:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8001c02:	b2c0      	uxtb	r0, r0
      break;
 8001c04:	4770      	bx	lr
      torqueValue = devicePrm.decelTorque;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <Stspin220_GetTorque+0x44>)
 8001c08:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8001c0c:	b2c0      	uxtb	r0, r0
      break;
 8001c0e:	4770      	bx	lr
      torqueValue = devicePrm.runTorque;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <Stspin220_GetTorque+0x44>)
 8001c12:	f893 0020 	ldrb.w	r0, [r3, #32]
 8001c16:	b2c0      	uxtb	r0, r0
      break;
 8001c18:	4770      	bx	lr
      torqueValue = devicePrm.holdTorque;
 8001c1a:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <Stspin220_GetTorque+0x44>)
 8001c1c:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8001c20:	b2c0      	uxtb	r0, r0
      break;
 8001c22:	4770      	bx	lr
  switch(torqueMode)
 8001c24:	2000      	movs	r0, #0
    default:
      break;
  }
  return torqueValue;
}
 8001c26:	4770      	bx	lr
 8001c28:	200015e8 	.word	0x200015e8

08001c2c <Stspin220_GetTorqueBoostEnable>:
 * @param[in] deviceId Unused parameter
 * @retval TRUE if enabled, FALSE if disabled
 **********************************************************/
bool Stspin220_GetTorqueBoostEnable(uint8_t deviceId)
{
  return devicePrm.torqueBoostEnable;
 8001c2c:	4b01      	ldr	r3, [pc, #4]	; (8001c34 <Stspin220_GetTorqueBoostEnable+0x8>)
 8001c2e:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
}
 8001c32:	4770      	bx	lr
 8001c34:	200015e8 	.word	0x200015e8

08001c38 <Stspin220_GetTorqueBoostThreshold>:
 * @retval the torque boost threshold above which the step mode is
 * changed to full step
 **********************************************************/
float Stspin220_GetTorqueBoostThreshold(uint8_t deviceId)
{
  return devicePrm.torqueBoostSpeedThreshold;
 8001c38:	4b01      	ldr	r3, [pc, #4]	; (8001c40 <Stspin220_GetTorqueBoostThreshold+0x8>)
 8001c3a:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
}
 8001c3e:	4770      	bx	lr
 8001c40:	200015e8 	.word	0x200015e8

08001c44 <Stspin220_SetHome>:
 * STEP_MODE_1_128                  : 1/128 step
 * STEP_MODE_1_256                  : 1/256 step
 **********************************************************/
void Stspin220_SetHome(uint8_t deviceId, int32_t homePosition)
{
  devicePrm.currentPosition -= homePosition;
 8001c44:	4a02      	ldr	r2, [pc, #8]	; (8001c50 <Stspin220_SetHome+0xc>)
 8001c46:	6853      	ldr	r3, [r2, #4]
 8001c48:	1a59      	subs	r1, r3, r1
 8001c4a:	6051      	str	r1, [r2, #4]
}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	200015e8 	.word	0x200015e8

08001c54 <Stspin220_SetMark>:
 * STEP_MODE_1_128                  : 1/128 step
 * STEP_MODE_1_256                  : 1/256 step
 **********************************************************/
void Stspin220_SetMark(uint8_t deviceId, int32_t markPosition)
{
  devicePrm.markPosition = markPosition;
 8001c54:	4b01      	ldr	r3, [pc, #4]	; (8001c5c <Stspin220_SetMark+0x8>)
 8001c56:	60d9      	str	r1, [r3, #12]
}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	200015e8 	.word	0x200015e8

08001c60 <Stspin220_SetNbDevices>:
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Stspin220_SetNbDevices(uint8_t nbDevices)
{
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8001c60:	2801      	cmp	r0, #1
 8001c62:	d901      	bls.n	8001c68 <Stspin220_SetNbDevices+0x8>
    stspin220DriverInstance = 0;
    return TRUE;
  }
  else
  {
    return FALSE;
 8001c64:	2000      	movs	r0, #0
  }
}
 8001c66:	4770      	bx	lr
    stspin220NumberOfDevices = nbDevices;
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <Stspin220_SetNbDevices+0x18>)
    stspin220DriverInstance = 0;
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <Stspin220_SetNbDevices+0x1c>)
    stspin220NumberOfDevices = nbDevices;
 8001c6c:	7008      	strb	r0, [r1, #0]
    stspin220DriverInstance = 0;
 8001c6e:	2200      	movs	r2, #0
 8001c70:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8001c72:	2001      	movs	r0, #1
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20001642 	.word	0x20001642
 8001c7c:	20001640 	.word	0x20001640

08001c80 <Stspin220_SetStopMode>:
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void Stspin220_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
  devicePrm.stopMode = stopMode;
 8001c80:	4b01      	ldr	r3, [pc, #4]	; (8001c88 <Stspin220_SetStopMode+0x8>)
 8001c82:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
}
 8001c86:	4770      	bx	lr
 8001c88:	200015e8 	.word	0x200015e8

08001c8c <Stspin220_SetTorqueBoostEnable>:
 * @param[in] enable true to enable torque boost, false to disable
 * @retval None
 **********************************************************/
void Stspin220_SetTorqueBoostEnable(uint8_t deviceId, bool enable)
{
  devicePrm.torqueBoostEnable = enable;
 8001c8c:	4b01      	ldr	r3, [pc, #4]	; (8001c94 <Stspin220_SetTorqueBoostEnable+0x8>)
 8001c8e:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
}
 8001c92:	4770      	bx	lr
 8001c94:	200015e8 	.word	0x200015e8

08001c98 <Stspin220_SetTorqueBoostThreshold>:
 * changed to full step
 * @retval None
 **********************************************************/
void Stspin220_SetTorqueBoostThreshold(uint8_t deviceId, float speedThreshold)
{
  devicePrm.torqueBoostSpeedThreshold = speedThreshold;
 8001c98:	4b01      	ldr	r3, [pc, #4]	; (8001ca0 <Stspin220_SetTorqueBoostThreshold+0x8>)
 8001c9a:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
}
 8001c9e:	4770      	bx	lr
 8001ca0:	200015e8 	.word	0x200015e8

08001ca4 <Stspin220_VrefPwmGetFreq>:
 * @retval the frequency of REF PWM in Hz
 * @note
 **********************************************************/
uint32_t Stspin220_VrefPwmGetFreq(uint8_t deviceId)
{
  return devicePrm.refPwmFreq;
 8001ca4:	4b01      	ldr	r3, [pc, #4]	; (8001cac <Stspin220_VrefPwmGetFreq+0x8>)
 8001ca6:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200015e8 	.word	0x200015e8

08001cb0 <Stspin220_WaitWhileActive>:
 * @retval None
 **********************************************************/
void Stspin220_WaitWhileActive(uint8_t deviceId)
 {
  /* Wait while motor is running */
  while (((Stspin220_GetDeviceState(deviceId)&INACTIVE)!=INACTIVE)||\
 8001cb0:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <Stspin220_WaitWhileActive+0x1c>)
   (((Stspin220_GetDeviceState(deviceId)&INACTIVE)==INACTIVE)&&(toggleOdd!=0)));
 8001cb2:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <Stspin220_WaitWhileActive+0x20>)
  return devicePrm.motionState;
 8001cb4:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
  while (((Stspin220_GetDeviceState(deviceId)&INACTIVE)!=INACTIVE)||\
 8001cb8:	0718      	lsls	r0, r3, #28
 8001cba:	d5fb      	bpl.n	8001cb4 <Stspin220_WaitWhileActive+0x4>
  return devicePrm.motionState;
 8001cbc:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
  while (((Stspin220_GetDeviceState(deviceId)&INACTIVE)!=INACTIVE)||\
 8001cc0:	071b      	lsls	r3, r3, #28
 8001cc2:	d502      	bpl.n	8001cca <Stspin220_WaitWhileActive+0x1a>
   (((Stspin220_GetDeviceState(deviceId)&INACTIVE)==INACTIVE)&&(toggleOdd!=0)));
 8001cc4:	780b      	ldrb	r3, [r1, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f4      	bne.n	8001cb4 <Stspin220_WaitWhileActive+0x4>
}
 8001cca:	4770      	bx	lr
 8001ccc:	200015e8 	.word	0x200015e8
 8001cd0:	20001643 	.word	0x20001643

08001cd4 <Stspin220_FlagInterruptHandler>:
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Stspin220_FlagInterruptHandler(void)
{
  if (flagInterruptCallback != 0)
 8001cd4:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <Stspin220_FlagInterruptHandler+0xc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b103      	cbz	r3, 8001cdc <Stspin220_FlagInterruptHandler+0x8>
  {
    flagInterruptCallback();
 8001cda:	4718      	bx	r3
  }
}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2000163c 	.word	0x2000163c

08001ce4 <Stspin220_CheckStatusHw>:
{
 8001ce4:	b508      	push	{r3, lr}
	if(!Stspin220_Board_EN_AND_FAULT_PIN_GetState())
 8001ce6:	f001 fd25 	bl	8003734 <Stspin220_Board_EN_AND_FAULT_PIN_GetState>
}
 8001cea:	fab0 f080 	clz	r0, r0
 8001cee:	0940      	lsrs	r0, r0, #5
 8001cf0:	bd08      	pop	{r3, pc}
 8001cf2:	bf00      	nop

08001cf4 <Stspin220_Disable>:
  Stspin220_Board_Disable();
 8001cf4:	f001 bcc4 	b.w	8003680 <Stspin220_Board_Disable>

08001cf8 <Stspin220_Enable>:
  Stspin220_Board_Enable();
 8001cf8:	f001 bce8 	b.w	80036cc <Stspin220_Board_Enable>

08001cfc <Stspin220_HardSetDirection>:
	devicePrm.direction = dir;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <Stspin220_HardSetDirection+0xc>)
    Stspin220_Board_SetDirectionGpio(dir);
 8001cfe:	4608      	mov	r0, r1
	devicePrm.direction = dir;
 8001d00:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
    Stspin220_Board_SetDirectionGpio(dir);
 8001d04:	f001 bcb2 	b.w	800366c <Stspin220_Board_SetDirectionGpio>
 8001d08:	200015e8 	.word	0x200015e8

08001d0c <Stspin220_SetTorque>:
{
 8001d0c:	b510      	push	{r4, lr}
  devicePrm.updateTorque = TRUE;
 8001d0e:	4c13      	ldr	r4, [pc, #76]	; (8001d5c <Stspin220_SetTorque+0x50>)
 8001d10:	2301      	movs	r3, #1
 8001d12:	2a64      	cmp	r2, #100	; 0x64
 8001d14:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if (torqueValue>100) torqueValue = 100;
 8001d18:	bf28      	it	cs
 8001d1a:	2264      	movcs	r2, #100	; 0x64
  switch(torqueMode)
 8001d1c:	2904      	cmp	r1, #4
 8001d1e:	d810      	bhi.n	8001d42 <Stspin220_SetTorque+0x36>
 8001d20:	e8df f001 	tbb	[pc, r1]
 8001d24:	03191316 	.word	0x03191316
 8001d28:	09          	.byte	0x09
 8001d29:	00          	.byte	0x00
      devicePrm.holdTorque = torqueValue;
 8001d2a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
      if (devicePrm.motionState != INACTIVE)
 8001d2e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d108      	bne.n	8001d48 <Stspin220_SetTorque+0x3c>
      devicePrm.currentTorque = torqueValue;
 8001d36:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
      Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 8001d3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	f001 fbe3 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
      devicePrm.updateTorque = FALSE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 8001d48:	bd10      	pop	{r4, pc}
      devicePrm.decelTorque = torqueValue;
 8001d4a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
}
 8001d4e:	bd10      	pop	{r4, pc}
      devicePrm.accelTorque = torqueValue;
 8001d50:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
}
 8001d54:	bd10      	pop	{r4, pc}
      devicePrm.runTorque = torqueValue;
 8001d56:	f884 2020 	strb.w	r2, [r4, #32]
}
 8001d5a:	bd10      	pop	{r4, pc}
 8001d5c:	200015e8 	.word	0x200015e8

08001d60 <Stspin220_VrefPwmSetFreq>:
  devicePrm.refPwmFreq = newFreq;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <Stspin220_VrefPwmSetFreq+0x10>)
 8001d62:	6299      	str	r1, [r3, #40]	; 0x28
{ 
 8001d64:	4608      	mov	r0, r1
  Stspin220_Board_PwmRefSetFreqAndDutyCycle(newFreq,devicePrm.currentTorque);
 8001d66:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8001d6a:	f001 bbcd 	b.w	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
 8001d6e:	bf00      	nop
 8001d70:	200015e8 	.word	0x200015e8

08001d74 <Stspin220_SetMaxSpeed>:
  if ((newMaxSpeed >= STSPIN220_MIN_STCK_FREQ)&&\
 8001d74:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8001d78:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	db2f      	blt.n	8001de2 <Stspin220_SetMaxSpeed+0x6e>
 8001d82:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001de8 <Stspin220_SetMaxSpeed+0x74>
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <Stspin220_SetMaxSpeed+0x78>)
 8001d88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	d813      	bhi.n	8001dba <Stspin220_SetMaxSpeed+0x46>
      (devicePrm.minSpeed <= newMaxSpeed) &&\
 8001d92:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
        ((newMaxSpeed/(1<<Stspin220_GetStepMode(deviceId)))<= STSPIN220_MAX_STCK_FREQ)))&&\
 8001d96:	eef4 7ac0 	vcmpe.f32	s15, s0
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d820      	bhi.n	8001de2 <Stspin220_SetMaxSpeed+0x6e>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||\
 8001da0:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
      (devicePrm.minSpeed <= newMaxSpeed) &&\
 8001da4:	0712      	lsls	r2, r2, #28
 8001da6:	d404      	bmi.n	8001db2 <Stspin220_SetMaxSpeed+0x3e>
      ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 8001da8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||\
 8001dac:	f010 0001 	ands.w	r0, r0, #1
 8001db0:	d018      	beq.n	8001de4 <Stspin220_SetMaxSpeed+0x70>
    devicePrm.maxSpeed = newMaxSpeed;
 8001db2:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
    cmdExecuted = TRUE;
 8001db6:	2001      	movs	r0, #1
 8001db8:	4770      	bx	lr
       ((devicePrm.torqueBoostEnable != FALSE)&&\
 8001dba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
      ((newMaxSpeed <= STSPIN220_MAX_STCK_FREQ)||\
 8001dbe:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8001dc2:	b17a      	cbz	r2, 8001de4 <Stspin220_SetMaxSpeed+0x70>
  return devicePrm.stepMode;
 8001dc4:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
        ((newMaxSpeed/(1<<Stspin220_GetStepMode(deviceId)))<= STSPIN220_MAX_STCK_FREQ)))&&\
 8001dc8:	2201      	movs	r2, #1
 8001dca:	408a      	lsls	r2, r1
 8001dcc:	ee07 2a10 	vmov	s14, r2
 8001dd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dd4:	eec0 6a07 	vdiv.f32	s13, s0, s14
       ((devicePrm.torqueBoostEnable != FALSE)&&\
 8001dd8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	d9d7      	bls.n	8001d92 <Stspin220_SetMaxSpeed+0x1e>
  bool cmdExecuted = FALSE;
 8001de2:	2000      	movs	r0, #0
}                                                     
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	461c4000 	.word	0x461c4000
 8001dec:	200015e8 	.word	0x200015e8

08001df0 <Stspin220_SoftStop>:
  if ((devicePrm.motionState & INACTIVE) != INACTIVE)
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <Stspin220_SoftStop+0x20>)
 8001df2:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8001df6:	0712      	lsls	r2, r2, #28
 8001df8:	d407      	bmi.n	8001e0a <Stspin220_SoftStop+0x1a>
    devicePrm.commandExecuted |= STSPIN220_SOFT_STOP_BIT_MASK;
 8001dfa:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001dfe:	f042 0204 	orr.w	r2, r2, #4
 8001e02:	2001      	movs	r0, #1
 8001e04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return (cmdExecuted);
 8001e08:	4770      	bx	lr
  bool cmdExecuted = FALSE;
 8001e0a:	2000      	movs	r0, #0
}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200015e8 	.word	0x200015e8

08001e14 <Stspin220_SetDirection>:
  if ((devicePrm.motionState == INACTIVE)||\
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <Stspin220_SetDirection+0x34>)
 8001e16:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8001e1a:	2a08      	cmp	r2, #8
 8001e1c:	d00e      	beq.n	8001e3c <Stspin220_SetDirection+0x28>
      (devicePrm.motionState == STANDBY))
 8001e1e:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
  if ((devicePrm.motionState == INACTIVE)||\
 8001e22:	2a09      	cmp	r2, #9
 8001e24:	d00a      	beq.n	8001e3c <Stspin220_SetDirection+0x28>
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
 8001e26:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001e2a:	07d2      	lsls	r2, r2, #31
 8001e2c:	d505      	bpl.n	8001e3a <Stspin220_SetDirection+0x26>
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
 8001e2e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001e32:	f042 0208 	orr.w	r2, r2, #8
 8001e36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8001e3a:	4770      	bx	lr
    Stspin220_Board_SetDirectionGpio(dir);
 8001e3c:	4608      	mov	r0, r1
    devicePrm.direction = dir;
 8001e3e:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
    Stspin220_Board_SetDirectionGpio(dir);
 8001e42:	f001 bc13 	b.w	800366c <Stspin220_Board_SetDirectionGpio>
 8001e46:	bf00      	nop
 8001e48:	200015e8 	.word	0x200015e8

08001e4c <Stspin220_SetAcceleration>:
  if ((newAcc != 0)&&
 8001e4c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	d008      	beq.n	8001e68 <Stspin220_SetAcceleration+0x1c>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <Stspin220_SetAcceleration+0x34>)
 8001e58:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
  if ((newAcc != 0)&&
 8001e5c:	0712      	lsls	r2, r2, #28
 8001e5e:	d505      	bpl.n	8001e6c <Stspin220_SetAcceleration+0x20>
    devicePrm.acceleration = newAcc;
 8001e60:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
    cmdExecuted = TRUE;
 8001e64:	2001      	movs	r0, #1
 8001e66:	4770      	bx	lr
  bool cmdExecuted = FALSE;
 8001e68:	2000      	movs	r0, #0
}            
 8001e6a:	4770      	bx	lr
       ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 8001e6c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8001e70:	f010 0001 	ands.w	r0, r0, #1
 8001e74:	d0f9      	beq.n	8001e6a <Stspin220_SetAcceleration+0x1e>
    devicePrm.acceleration = newAcc;
 8001e76:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
    cmdExecuted = TRUE;
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200015e8 	.word	0x200015e8

08001e84 <Stspin220_SetDeceleration>:
  if ((newDec != 0)&& 
 8001e84:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	d008      	beq.n	8001ea0 <Stspin220_SetDeceleration+0x1c>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <Stspin220_SetDeceleration+0x34>)
 8001e90:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
  if ((newDec != 0)&& 
 8001e94:	0712      	lsls	r2, r2, #28
 8001e96:	d505      	bpl.n	8001ea4 <Stspin220_SetDeceleration+0x20>
    devicePrm.deceleration = newDec;
 8001e98:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
    cmdExecuted = TRUE;
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	4770      	bx	lr
  bool cmdExecuted = FALSE;
 8001ea0:	2000      	movs	r0, #0
}
 8001ea2:	4770      	bx	lr
       ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 8001ea4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8001ea8:	f010 0001 	ands.w	r0, r0, #1
 8001eac:	d0f9      	beq.n	8001ea2 <Stspin220_SetDeceleration+0x1e>
    devicePrm.deceleration = newDec;
 8001eae:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
    cmdExecuted = TRUE;
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200015e8 	.word	0x200015e8

08001ebc <Stspin220_SetMinSpeed>:
  if ((newMinSpeed >= STSPIN220_MIN_STCK_FREQ)&&
 8001ebc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8001ec0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	db06      	blt.n	8001ed8 <Stspin220_SetMinSpeed+0x1c>
 8001eca:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001f08 <Stspin220_SetMinSpeed+0x4c>
 8001ece:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed6:	d901      	bls.n	8001edc <Stspin220_SetMinSpeed+0x20>
  bool cmdExecuted = FALSE;
 8001ed8:	2000      	movs	r0, #0
}
 8001eda:	4770      	bx	lr
      (newMinSpeed <= devicePrm.maxSpeed) && 
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <Stspin220_SetMinSpeed+0x50>)
 8001ede:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
      (newMinSpeed <= STSPIN220_MAX_STCK_FREQ) &&
 8001ee2:	eef4 7ac0 	vcmpe.f32	s15, s0
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	dbf5      	blt.n	8001ed8 <Stspin220_SetMinSpeed+0x1c>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8001eec:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
      (newMinSpeed <= devicePrm.maxSpeed) && 
 8001ef0:	0712      	lsls	r2, r2, #28
 8001ef2:	d404      	bmi.n	8001efe <Stspin220_SetMinSpeed+0x42>
       ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 8001ef4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8001ef8:	f010 0001 	ands.w	r0, r0, #1
 8001efc:	d0ed      	beq.n	8001eda <Stspin220_SetMinSpeed+0x1e>
    devicePrm.minSpeed = newMinSpeed;
 8001efe:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    cmdExecuted = TRUE;
 8001f02:	2001      	movs	r0, #1
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	461c4000 	.word	0x461c4000
 8001f0c:	200015e8 	.word	0x200015e8

08001f10 <Stspin220_GetMotorHandle>:
}
 8001f10:	4800      	ldr	r0, [pc, #0]	; (8001f14 <Stspin220_GetMotorHandle+0x4>)
 8001f12:	4770      	bx	lr
 8001f14:	20000030 	.word	0x20000030

08001f18 <Stspin220_HardHiZ>:
{
 8001f18:	b538      	push	{r3, r4, r5, lr}
  devicePrm.motionState = INACTIVE;
 8001f1a:	4c1a      	ldr	r4, [pc, #104]	; (8001f84 <Stspin220_HardHiZ+0x6c>)
  if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 8001f1c:	481a      	ldr	r0, [pc, #104]	; (8001f88 <Stspin220_HardHiZ+0x70>)
  devicePrm.motionState = INACTIVE;
 8001f1e:	2308      	movs	r3, #8
 8001f20:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
  if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 8001f24:	f001 fb70 	bl	8003608 <Stspin220_Board_TimStckStop>
 8001f28:	b928      	cbnz	r0, 8001f36 <Stspin220_HardHiZ+0x1e>
  if (errorHandlerCallback != 0)
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <Stspin220_HardHiZ+0x74>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b303      	cbz	r3, 8001f72 <Stspin220_HardHiZ+0x5a>
    (void) errorHandlerCallback(error);
 8001f30:	f24a 000e 	movw	r0, #40974	; 0xa00e
 8001f34:	4798      	blx	r3
  Stspin220_Board_Delay(DISABLE_DELAY);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f001 fa0c 	bl	8003354 <Stspin220_Board_Delay>
      devicePrm.currentTorque = torqueValue;
 8001f3c:	2500      	movs	r5, #0
  devicePrm.updateTorque = TRUE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = torqueValue;
 8001f44:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
      Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 8001f48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	f001 fadc 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
      devicePrm.updateTorque = FALSE;
 8001f50:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
  Stspin220_Board_Disable();
 8001f54:	f001 fb94 	bl	8003680 <Stspin220_Board_Disable>
  if (devicePrm.stepModeLatched != devicePrm.stepMode)
 8001f58:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001f5c:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d107      	bne.n	8001f74 <Stspin220_HardHiZ+0x5c>
  devicePrm.commandExecuted = NO_CMD;
 8001f64:	2300      	movs	r3, #0
  devicePrm.speed = 0;
 8001f66:	2200      	movs	r2, #0
  devicePrm.commandExecuted = NO_CMD;
 8001f68:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  devicePrm.stepsToTake = 0;  
 8001f6c:	61e3      	str	r3, [r4, #28]
  devicePrm.speed = 0;
 8001f6e:	6462      	str	r2, [r4, #68]	; 0x44
}
 8001f70:	bd38      	pop	{r3, r4, r5, pc}
    while(1)
 8001f72:	e7fe      	b.n	8001f72 <Stspin220_HardHiZ+0x5a>
    Stspin220_Board_UnsetFullStep();
 8001f74:	f001 fc48 	bl	8003808 <Stspin220_Board_UnsetFullStep>
    devicePrm.stepMode = devicePrm.stepModeLatched;
 8001f78:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8001f7c:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 8001f80:	e7f0      	b.n	8001f64 <Stspin220_HardHiZ+0x4c>
 8001f82:	bf00      	nop
 8001f84:	200015e8 	.word	0x200015e8
 8001f88:	20001643 	.word	0x20001643
 8001f8c:	20001638 	.word	0x20001638

08001f90 <Stspin220_PutDeviceInStandby>:
{
 8001f90:	b508      	push	{r3, lr}
  Stspin220_HardHiZ(deviceId);
 8001f92:	f7ff ffc1 	bl	8001f18 <Stspin220_HardHiZ>
	Stspin220_Board_Reset();
 8001f96:	f001 fb61 	bl	800365c <Stspin220_Board_Reset>
  devicePrm.motionState = STANDBY;
 8001f9a:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <Stspin220_PutDeviceInStandby+0x14>)
 8001f9c:	2209      	movs	r2, #9
 8001f9e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8001fa2:	bd08      	pop	{r3, pc}
 8001fa4:	200015e8 	.word	0x200015e8

08001fa8 <Stspin220_HardStop>:
{
 8001fa8:	b510      	push	{r4, lr}
  if (devicePrm.stopMode == HOLD_MODE)
 8001faa:	4c23      	ldr	r4, [pc, #140]	; (8002038 <Stspin220_HardStop+0x90>)
 8001fac:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8001fb0:	b123      	cbz	r3, 8001fbc <Stspin220_HardStop+0x14>
  else if (devicePrm.stopMode == HIZ_MODE)
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d03a      	beq.n	800202c <Stspin220_HardStop+0x84>
  else if (devicePrm.stopMode == STANDBY_MODE)
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d02f      	beq.n	800201a <Stspin220_HardStop+0x72>
}
 8001fba:	bd10      	pop	{r4, pc}
    devicePrm.motionState = INACTIVE;
 8001fbc:	2308      	movs	r3, #8
    if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 8001fbe:	481f      	ldr	r0, [pc, #124]	; (800203c <Stspin220_HardStop+0x94>)
    devicePrm.motionState = INACTIVE;
 8001fc0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 8001fc4:	f001 fb20 	bl	8003608 <Stspin220_Board_TimStckStop>
 8001fc8:	b928      	cbnz	r0, 8001fd6 <Stspin220_HardStop+0x2e>
  if (errorHandlerCallback != 0)
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <Stspin220_HardStop+0x98>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b1e3      	cbz	r3, 800200a <Stspin220_HardStop+0x62>
    (void) errorHandlerCallback(error);
 8001fd0:	f24a 000e 	movw	r0, #40974	; 0xa00e
 8001fd4:	4798      	blx	r3
  devicePrm.updateTorque = FALSE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = devicePrm.holdTorque;
 8001fdc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  torqueValue = devicePrm.currentTorque;
 8001fe6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
  Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 8001fea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001fec:	f001 fa8c 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
    if (devicePrm.stepModeLatched != devicePrm.stepMode)
 8001ff0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001ff4:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d107      	bne.n	800200c <Stspin220_HardStop+0x64>
    devicePrm.commandExecuted = NO_CMD;
 8001ffc:	2300      	movs	r3, #0
    devicePrm.speed = 0;
 8001ffe:	2200      	movs	r2, #0
    devicePrm.commandExecuted = NO_CMD;
 8002000:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    devicePrm.stepsToTake = 0;  
 8002004:	61e3      	str	r3, [r4, #28]
    devicePrm.speed = 0;
 8002006:	6462      	str	r2, [r4, #68]	; 0x44
}
 8002008:	bd10      	pop	{r4, pc}
    while(1)
 800200a:	e7fe      	b.n	800200a <Stspin220_HardStop+0x62>
      Stspin220_Board_UnsetFullStep();
 800200c:	f001 fbfc 	bl	8003808 <Stspin220_Board_UnsetFullStep>
      devicePrm.stepMode = devicePrm.stepModeLatched;
 8002010:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002014:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 8002018:	e7f0      	b.n	8001ffc <Stspin220_HardStop+0x54>
  Stspin220_HardHiZ(deviceId);
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff ff7c 	bl	8001f18 <Stspin220_HardHiZ>
	Stspin220_Board_Reset();
 8002020:	f001 fb1c 	bl	800365c <Stspin220_Board_Reset>
  devicePrm.motionState = STANDBY;
 8002024:	2309      	movs	r3, #9
 8002026:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
 800202a:	bd10      	pop	{r4, pc}
 800202c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Stspin220_HardHiZ(deviceId);
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff bf71 	b.w	8001f18 <Stspin220_HardHiZ>
 8002036:	bf00      	nop
 8002038:	200015e8 	.word	0x200015e8
 800203c:	20001643 	.word	0x20001643
 8002040:	20001638 	.word	0x20001638

08002044 <Stspin220_SetStepMode>:
{
 8002044:	b538      	push	{r3, r4, r5, lr}
  if ((devicePrm.motionState != INACTIVE)&&\
 8002046:	4c38      	ldr	r4, [pc, #224]	; (8002128 <Stspin220_SetStepMode+0xe4>)
 8002048:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800204c:	2b08      	cmp	r3, #8
{
 800204e:	460d      	mov	r5, r1
  if ((devicePrm.motionState != INACTIVE)&&\
 8002050:	d003      	beq.n	800205a <Stspin220_SetStepMode+0x16>
      (devicePrm.motionState != STANDBY))
 8002052:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((devicePrm.motionState != INACTIVE)&&\
 8002056:	2b09      	cmp	r3, #9
 8002058:	d112      	bne.n	8002080 <Stspin220_SetStepMode+0x3c>
  Stspin220_Board_Reset();
 800205a:	f001 faff 	bl	800365c <Stspin220_Board_Reset>
  devicePrm.sequencerPosition = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	8123      	strh	r3, [r4, #8]
 **********************************************************/
bool Stspin220_SetStepModeWithoutReset(uint8_t deviceId, motorStepMode_t stepMode)
{
  /* Store step mode */
  devicePrm.stepMode = stepMode;
  devicePrm.stepModeLatched = stepMode;
 8002062:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  devicePrm.currentPosition = 0; 
 8002066:	6063      	str	r3, [r4, #4]
  devicePrm.markPosition = 0;
 8002068:	60e3      	str	r3, [r4, #12]
  devicePrm.stepMode = stepMode;
 800206a:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
  
  /* Set the mode pins to the levels corresponding to the selected step mode */
  switch (stepMode)
 800206e:	2d08      	cmp	r5, #8
 8002070:	d858      	bhi.n	8002124 <Stspin220_SetStepMode+0xe0>
 8002072:	e8df f005 	tbb	[pc, r5]
 8002076:	261a      	.short	0x261a
 8002078:	423b342d 	.word	0x423b342d
 800207c:	5049      	.short	0x5049
 800207e:	08          	.byte	0x08
 800207f:	00          	.byte	0x00
    Stspin220_HardHiZ(deviceId);
 8002080:	f7ff ff4a 	bl	8001f18 <Stspin220_HardHiZ>
 8002084:	e7e9      	b.n	800205a <Stspin220_SetStepMode+0x16>
      break;
    case STEP_MODE_1_128:
      Stspin220_Board_SetModePins(0, 0, 1, 0);
      break;  
    case STEP_MODE_1_256:
      Stspin220_Board_SetModePins(1, 1, 0, 0);
 8002086:	2300      	movs	r3, #0
 8002088:	2101      	movs	r1, #1
 800208a:	461a      	mov	r2, r3
 800208c:	4608      	mov	r0, r1
 800208e:	f001 fb59 	bl	8003744 <Stspin220_Board_SetModePins>
    default:
      return FALSE;
  }

  /* Wait */
  Stspin220_Board_Delay(SELECT_STEP_MODE_DELAY);
 8002092:	2001      	movs	r0, #1
 8002094:	f001 f95e 	bl	8003354 <Stspin220_Board_Delay>
  
  /* Exit standby, selected step mode is latched */
  Stspin220_Board_ReleaseReset();
 8002098:	f001 fad8 	bl	800364c <Stspin220_Board_ReleaseReset>
  
  /* Let a delay after reset release and step mode latching*/
  Stspin220_Board_Delay(AFTER_STANDBY_EXIT_DEAD_TIME);
 800209c:	2001      	movs	r0, #1
 800209e:	f001 f959 	bl	8003354 <Stspin220_Board_Delay>
  
  /* If full step mode is not selected, do not keep MODE1 = MODE2 = 0 */
  /* after the device quit the standby condition */
  if (stepMode!=STEP_MODE_FULL)
  {
    Stspin220_Board_UnsetFullStep();
 80020a2:	f001 fbb1 	bl	8003808 <Stspin220_Board_UnsetFullStep>
  }

  return TRUE;
 80020a6:	2001      	movs	r0, #1
}
 80020a8:	bd38      	pop	{r3, r4, r5, pc}
      Stspin220_Board_SetFullStep();
 80020aa:	f001 fb9d 	bl	80037e8 <Stspin220_Board_SetFullStep>
  Stspin220_Board_Delay(SELECT_STEP_MODE_DELAY);
 80020ae:	2001      	movs	r0, #1
 80020b0:	f001 f950 	bl	8003354 <Stspin220_Board_Delay>
  Stspin220_Board_ReleaseReset();
 80020b4:	f001 faca 	bl	800364c <Stspin220_Board_ReleaseReset>
  Stspin220_Board_Delay(AFTER_STANDBY_EXIT_DEAD_TIME);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f001 f94b 	bl	8003354 <Stspin220_Board_Delay>
  return TRUE;
 80020be:	2001      	movs	r0, #1
}
 80020c0:	bd38      	pop	{r3, r4, r5, pc}
      Stspin220_Board_SetModePins(1, 0, 1, 0);
 80020c2:	2300      	movs	r3, #0
 80020c4:	2201      	movs	r2, #1
 80020c6:	4619      	mov	r1, r3
 80020c8:	4610      	mov	r0, r2
 80020ca:	f001 fb3b 	bl	8003744 <Stspin220_Board_SetModePins>
      break;    
 80020ce:	e7e0      	b.n	8002092 <Stspin220_SetStepMode+0x4e>
      Stspin220_Board_SetModePins(0, 1, 0, 1);
 80020d0:	2301      	movs	r3, #1
 80020d2:	2200      	movs	r2, #0
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f001 fb34 	bl	8003744 <Stspin220_Board_SetModePins>
      break;        
 80020dc:	e7d9      	b.n	8002092 <Stspin220_SetStepMode+0x4e>
      Stspin220_Board_SetModePins(1, 1, 1, 0);
 80020de:	2201      	movs	r2, #1
 80020e0:	2300      	movs	r3, #0
 80020e2:	4611      	mov	r1, r2
 80020e4:	4610      	mov	r0, r2
 80020e6:	f001 fb2d 	bl	8003744 <Stspin220_Board_SetModePins>
      break;
 80020ea:	e7d2      	b.n	8002092 <Stspin220_SetStepMode+0x4e>
      Stspin220_Board_SetModePins(1, 1, 1, 1);
 80020ec:	2301      	movs	r3, #1
 80020ee:	461a      	mov	r2, r3
 80020f0:	4619      	mov	r1, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 fb26 	bl	8003744 <Stspin220_Board_SetModePins>
      break;   
 80020f8:	e7cb      	b.n	8002092 <Stspin220_SetStepMode+0x4e>
      Stspin220_Board_SetModePins(0, 0, 0, 1);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2301      	movs	r3, #1
 80020fe:	4611      	mov	r1, r2
 8002100:	4610      	mov	r0, r2
 8002102:	f001 fb1f 	bl	8003744 <Stspin220_Board_SetModePins>
      break;   
 8002106:	e7c4      	b.n	8002092 <Stspin220_SetStepMode+0x4e>
      Stspin220_Board_SetModePins(1, 1, 0, 1);
 8002108:	2301      	movs	r3, #1
 800210a:	2200      	movs	r2, #0
 800210c:	4619      	mov	r1, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f001 fb18 	bl	8003744 <Stspin220_Board_SetModePins>
      break;
 8002114:	e7bd      	b.n	8002092 <Stspin220_SetStepMode+0x4e>
      Stspin220_Board_SetModePins(0, 0, 1, 0);
 8002116:	2300      	movs	r3, #0
 8002118:	2201      	movs	r2, #1
 800211a:	4619      	mov	r1, r3
 800211c:	4618      	mov	r0, r3
 800211e:	f001 fb11 	bl	8003744 <Stspin220_Board_SetModePins>
      break;  
 8002122:	e7b6      	b.n	8002092 <Stspin220_SetStepMode+0x4e>
  switch (stepMode)
 8002124:	2000      	movs	r0, #0
}
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	200015e8 	.word	0x200015e8

0800212c <Stspin220_ApplySpeed>:
{
 800212c:	b510      	push	{r4, lr}
  if (devicePrm.torqueBoostEnable != FALSE)
 800212e:	4c50      	ldr	r4, [pc, #320]	; (8002270 <Stspin220_ApplySpeed+0x144>)
 8002130:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
{
 8002134:	ed2d 8b02 	vpush	{d8}
 8002138:	eeb0 8a40 	vmov.f32	s16, s0
  if (devicePrm.torqueBoostEnable != FALSE)
 800213c:	2b00      	cmp	r3, #0
 800213e:	d03f      	beq.n	80021c0 <Stspin220_ApplySpeed+0x94>
    if (devicePrm.stepMode > STEP_MODE_1_256)
 8002140:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8002144:	2b08      	cmp	r3, #8
 8002146:	d853      	bhi.n	80021f0 <Stspin220_ApplySpeed+0xc4>
    if (devicePrm.stepMode != STEP_MODE_FULL)
 8002148:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800214c:	2b00      	cmp	r3, #0
 800214e:	d059      	beq.n	8002204 <Stspin220_ApplySpeed+0xd8>
      if (((newSpeed/(1<<devicePrm.stepModeLatched))>\
 8002150:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
           devicePrm.torqueBoostSpeedThreshold)&&\
 8002154:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
      if (((newSpeed/(1<<devicePrm.stepModeLatched))>\
 8002158:	2301      	movs	r3, #1
 800215a:	4093      	lsls	r3, r2
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002164:	eec8 6a27 	vdiv.f32	s13, s16, s15
 8002168:	eef4 6ac7 	vcmpe.f32	s13, s14
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	dd0c      	ble.n	800218c <Stspin220_ApplySpeed+0x60>
          (((devicePrm.commandExecuted & STSPIN220_MOVE_BIT_MASK) != MOVE_CMD) ||\
 8002172:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
           devicePrm.torqueBoostSpeedThreshold)&&\
 8002176:	0799      	lsls	r1, r3, #30
 8002178:	d504      	bpl.n	8002184 <Stspin220_ApplySpeed+0x58>
           ((devicePrm.stepsToTake-devicePrm.relativePos)>=\
 800217a:	6961      	ldr	r1, [r4, #20]
 800217c:	69e3      	ldr	r3, [r4, #28]
 800217e:	1a5b      	subs	r3, r3, r1
          (((devicePrm.commandExecuted & STSPIN220_MOVE_BIT_MASK) != MOVE_CMD) ||\
 8002180:	40d3      	lsrs	r3, r2
 8002182:	d003      	beq.n	800218c <Stspin220_ApplySpeed+0x60>
        if ((devicePrm.sequencerPosition & 0xFF) == 0X80)
 8002184:	8923      	ldrh	r3, [r4, #8]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d05e      	beq.n	800224a <Stspin220_ApplySpeed+0x11e>
  if (newSpeed < STSPIN220_MIN_STCK_FREQ)
 800218c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8002190:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	bfa8      	it	ge
 800219a:	eeb0 0a48 	vmovge.f32	s0, s16
  if (newSpeed > STSPIN220_MAX_STCK_FREQ)
 800219e:	eddf 7a35 	vldr	s15, [pc, #212]	; 8002274 <Stspin220_ApplySpeed+0x148>
}
 80021a2:	ecbd 8b02 	vpop	{d8}
 80021a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80021aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ae:	bf88      	it	hi
 80021b0:	eeb0 0a67 	vmovhi.f32	s0, s15
  devicePrm.speed = newSpeed;
 80021b4:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
}
 80021b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Stspin220_Board_TimStckSetFreq(newSpeed);
 80021bc:	f001 b96a 	b.w	8003494 <Stspin220_Board_TimStckSetFreq>
  else if (devicePrm.stepMode != devicePrm.stepModeLatched)
 80021c0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80021c4:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d0df      	beq.n	800218c <Stspin220_ApplySpeed+0x60>
    Stspin220_Board_UnsetFullStep();
 80021cc:	f001 fb1c 	bl	8003808 <Stspin220_Board_UnsetFullStep>
    devicePrm.stepMode = devicePrm.stepModeLatched;
 80021d0:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 80021d4:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
    newSpeed *= 1<<devicePrm.stepModeLatched;
 80021d8:	2301      	movs	r3, #1
    devicePrm.accu <<= devicePrm.stepModeLatched;
 80021da:	6822      	ldr	r2, [r4, #0]
    newSpeed *= 1<<devicePrm.stepModeLatched;
 80021dc:	408b      	lsls	r3, r1
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    devicePrm.accu <<= devicePrm.stepModeLatched;
 80021e6:	408a      	lsls	r2, r1
    newSpeed *= 1<<devicePrm.stepModeLatched;
 80021e8:	ee28 8a27 	vmul.f32	s16, s16, s15
    devicePrm.accu <<= devicePrm.stepModeLatched;
 80021ec:	6022      	str	r2, [r4, #0]
    newSpeed *= 1<<devicePrm.stepModeLatched;
 80021ee:	e7cd      	b.n	800218c <Stspin220_ApplySpeed+0x60>
  if (errorHandlerCallback != 0)
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <Stspin220_ApplySpeed+0x14c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b1d3      	cbz	r3, 800222c <Stspin220_ApplySpeed+0x100>
    (void) errorHandlerCallback(error);
 80021f6:	f24a 000c 	movw	r0, #40972	; 0xa00c
 80021fa:	4798      	blx	r3
    if (devicePrm.stepMode != STEP_MODE_FULL)
 80021fc:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1a5      	bne.n	8002150 <Stspin220_ApplySpeed+0x24>
    else if (((newSpeed <= devicePrm.torqueBoostSpeedThreshold) &&\
 8002204:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8002208:	eef4 7ac8 	vcmpe.f32	s15, s16
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	db0d      	blt.n	800222e <Stspin220_ApplySpeed+0x102>
 8002212:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002216:	b153      	cbz	r3, 800222e <Stspin220_ApplySpeed+0x102>
      Stspin220_Board_UnsetFullStep();
 8002218:	f001 faf6 	bl	8003808 <Stspin220_Board_UnsetFullStep>
      devicePrm.stepMode = devicePrm.stepModeLatched;
 800221c:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 8002220:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
      newSpeed *= 1<<devicePrm.stepModeLatched;
 8002224:	2301      	movs	r3, #1
      devicePrm.accu <<= devicePrm.stepModeLatched;
 8002226:	6822      	ldr	r2, [r4, #0]
      newSpeed *= 1<<devicePrm.stepModeLatched;
 8002228:	408b      	lsls	r3, r1
 800222a:	e7d8      	b.n	80021de <Stspin220_ApplySpeed+0xb2>
    while(1)
 800222c:	e7fe      	b.n	800222c <Stspin220_ApplySpeed+0x100>
             (((devicePrm.commandExecuted & STSPIN220_MOVE_BIT_MASK) == MOVE_CMD)&&\
 800222e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
              (devicePrm.stepModeLatched != STEP_MODE_FULL))||\
 8002232:	079b      	lsls	r3, r3, #30
 8002234:	d5aa      	bpl.n	800218c <Stspin220_ApplySpeed+0x60>
               ((devicePrm.stepsToTake-devicePrm.relativePos)<=\
 8002236:	6960      	ldr	r0, [r4, #20]
 8002238:	69e2      	ldr	r2, [r4, #28]
                (1<<devicePrm.stepModeLatched))))
 800223a:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 800223e:	2301      	movs	r3, #1
               ((devicePrm.stepsToTake-devicePrm.relativePos)<=\
 8002240:	1a12      	subs	r2, r2, r0
                (1<<devicePrm.stepModeLatched))))
 8002242:	408b      	lsls	r3, r1
             (((devicePrm.commandExecuted & STSPIN220_MOVE_BIT_MASK) == MOVE_CMD)&&\
 8002244:	429a      	cmp	r2, r3
 8002246:	d8a1      	bhi.n	800218c <Stspin220_ApplySpeed+0x60>
 8002248:	e7e6      	b.n	8002218 <Stspin220_ApplySpeed+0xec>
          Stspin220_Board_SetFullStep();
 800224a:	f001 facd 	bl	80037e8 <Stspin220_Board_SetFullStep>
          devicePrm.accu >>= devicePrm.stepModeLatched;
 800224e:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
          devicePrm.stepMode = STEP_MODE_FULL;
 8002252:	2300      	movs	r3, #0
 8002254:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
          newSpeed /= 1<<devicePrm.stepModeLatched;
 8002258:	2301      	movs	r3, #1
 800225a:	408b      	lsls	r3, r1
 800225c:	ee07 3a90 	vmov	s15, r3
          devicePrm.accu >>= devicePrm.stepModeLatched;
 8002260:	6822      	ldr	r2, [r4, #0]
          newSpeed /= 1<<devicePrm.stepModeLatched;
 8002262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          devicePrm.accu >>= devicePrm.stepModeLatched;
 8002266:	40ca      	lsrs	r2, r1
          newSpeed /= 1<<devicePrm.stepModeLatched;
 8002268:	ee88 8a27 	vdiv.f32	s16, s16, s15
          devicePrm.accu >>= devicePrm.stepModeLatched;
 800226c:	6022      	str	r2, [r4, #0]
          newSpeed /= 1<<devicePrm.stepModeLatched;
 800226e:	e78d      	b.n	800218c <Stspin220_ApplySpeed+0x60>
 8002270:	200015e8 	.word	0x200015e8
 8002274:	461c4000 	.word	0x461c4000
 8002278:	20001638 	.word	0x20001638

0800227c <Stspin220_StepClockHandler>:
 * @param[in] deviceId Unused parameter
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void Stspin220_StepClockHandler(uint8_t deviceId)
{
 800227c:	b570      	push	{r4, r5, r6, lr}
  uint32_t stepModeShift = devicePrm.stepModeLatched - devicePrm.stepMode;
 800227e:	4cc2      	ldr	r4, [pc, #776]	; (8002588 <Stspin220_StepClockHandler+0x30c>)
 8002280:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
  uint16_t tmp;
  deviceId = 0;
  
  if (devicePrm.motionState == STANDBYTOINACTIVE)
 8002284:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 8002288:	2a0a      	cmp	r2, #10
{
 800228a:	ed2d 8b02 	vpush	{d8}
  if (devicePrm.motionState == STANDBYTOINACTIVE)
 800228e:	f000 80ae 	beq.w	80023ee <Stspin220_StepClockHandler+0x172>
    }
    Stspin220_Board_TimStckSetFreq(STSPIN220_MAX_STCK_FREQ);
    return;
  }  
  
  if (toggleOdd == 0)
 8002292:	4abe      	ldr	r2, [pc, #760]	; (800258c <Stspin220_StepClockHandler+0x310>)
 8002294:	7811      	ldrb	r1, [r2, #0]
 8002296:	b979      	cbnz	r1, 80022b8 <Stspin220_StepClockHandler+0x3c>
  {
    toggleOdd = 1;
 8002298:	2301      	movs	r3, #1
 800229a:	7013      	strb	r3, [r2, #0]
      {
        break;
      }
    }
  }
  if ((devicePrm.motionState & INACTIVE) != INACTIVE)
 800229c:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 80022a0:	f010 0008 	ands.w	r0, r0, #8
 80022a4:	f040 80b3 	bne.w	800240e <Stspin220_StepClockHandler+0x192>
    if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
    {
      Stspin220_ErrorHandler(STSPIN220_ERROR_STEP_CLOCK);
    }
  }
}
 80022a8:	ecbd 8b02 	vpop	{d8}
    Stspin220_ApplySpeed(deviceId, devicePrm.speed);
 80022ac:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
}
 80022b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Stspin220_ApplySpeed(deviceId, devicePrm.speed);
 80022b4:	f7ff bf3a 	b.w	800212c <Stspin220_ApplySpeed>
  uint32_t stepModeShift = devicePrm.stepModeLatched - devicePrm.stepMode;
 80022b8:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
    toggleOdd = 0;
 80022bc:	2100      	movs	r1, #0
 80022be:	7011      	strb	r1, [r2, #0]
    devicePrm.relativePos += (1 << stepModeShift);
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	6961      	ldr	r1, [r4, #20]
  uint32_t stepModeShift = devicePrm.stepModeLatched - devicePrm.stepMode;
 80022c4:	1aeb      	subs	r3, r5, r3
    devicePrm.relativePos += (1 << stepModeShift);
 80022c6:	2201      	movs	r2, #1
 80022c8:	fa02 f503 	lsl.w	r5, r2, r3
 80022cc:	4429      	add	r1, r5
 80022ce:	6161      	str	r1, [r4, #20]
    if (devicePrm.direction != BACKWARD)
 80022d0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80022d4:	4293      	cmp	r3, r2
 80022d6:	b2d9      	uxtb	r1, r3
      devicePrm.currentPosition += (1 << stepModeShift);
 80022d8:	6863      	ldr	r3, [r4, #4]
    if (devicePrm.direction != BACKWARD)
 80022da:	f000 80cc 	beq.w	8002476 <Stspin220_StepClockHandler+0x1fa>
      devicePrm.currentPosition += (1 << stepModeShift);
 80022de:	442b      	add	r3, r5
 80022e0:	6063      	str	r3, [r4, #4]
      tmp = (1 << (STEP_MODE_1_256-devicePrm.stepMode));
 80022e2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
      devicePrm.sequencerPosition += tmp;
 80022e6:	8921      	ldrh	r1, [r4, #8]
      tmp = (1 << (STEP_MODE_1_256-devicePrm.stepMode));
 80022e8:	f1c3 0308 	rsb	r3, r3, #8
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
      devicePrm.sequencerPosition += tmp;
 80022f0:	440b      	add	r3, r1
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	8123      	strh	r3, [r4, #8]
      if (devicePrm.sequencerPosition >= (SEQUENCER_MAX_VALUE+1))
 80022f6:	8923      	ldrh	r3, [r4, #8]
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fe:	f280 80a1 	bge.w	8002444 <Stspin220_StepClockHandler+0x1c8>
    switch (devicePrm.motionState) 
 8002302:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 8002306:	2a02      	cmp	r2, #2
 8002308:	b2d3      	uxtb	r3, r2
 800230a:	f000 80fd 	beq.w	8002508 <Stspin220_StepClockHandler+0x28c>
 800230e:	2b03      	cmp	r3, #3
 8002310:	f000 80c6 	beq.w	80024a0 <Stspin220_StepClockHandler+0x224>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1c1      	bne.n	800229c <Stspin220_StepClockHandler+0x20>
          uint32_t relPos = devicePrm.relativePos;
 8002318:	6962      	ldr	r2, [r4, #20]
          uint32_t endAccPos = devicePrm.endAccPos;
 800231a:	6921      	ldr	r1, [r4, #16]
          float speed = devicePrm.speed;
 800231c:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
          float acc = (devicePrm.acceleration * (1 << 16))/(1<<stepModeShift);
 8002320:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
          if (((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)||\
 8002324:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002328:	f013 0f0c 	tst.w	r3, #12
 800232c:	f040 8194 	bne.w	8002658 <Stspin220_StepClockHandler+0x3dc>
              ((devicePrm.commandExecuted==MOVE_CMD)&&(relPos>=devicePrm.startDecPos)))
 8002330:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
          if (((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)||\
 8002334:	2b02      	cmp	r3, #2
 8002336:	f000 81a5 	beq.w	8002684 <Stspin220_StepClockHandler+0x408>
          float acc = (devicePrm.acceleration * (1 << 16))/(1<<stepModeShift);
 800233a:	ee06 5a90 	vmov	s13, r5
          else if ((speed>=(devicePrm.maxSpeed/(1<<stepModeShift)))||\
 800233e:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
          float acc = (devicePrm.acceleration * (1 << 16))/(1<<stepModeShift);
 8002342:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
          else if ((speed>=(devicePrm.maxSpeed/(1<<stepModeShift)))||\
 8002346:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800234a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002352:	f240 81a5 	bls.w	80026a0 <Stspin220_StepClockHandler+0x424>
                   ((devicePrm.commandExecuted==MOVE_CMD)&&(relPos >= endAccPos)))
 8002356:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
          else if ((speed>=(devicePrm.maxSpeed/(1<<stepModeShift)))||\
 800235a:	2b02      	cmp	r3, #2
 800235c:	f000 81d1 	beq.w	8002702 <Stspin220_StepClockHandler+0x486>
          float acc = (devicePrm.acceleration * (1 << 16))/(1<<stepModeShift);
 8002360:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8002598 <Stspin220_StepClockHandler+0x31c>
            devicePrm.accu += acc / speed;
 8002364:	edd4 5a00 	vldr	s11, [r4]
            if (speed==0) speed =1;
 8002368:	eef5 7a40 	vcmp.f32	s15, #0.0
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	bf18      	it	ne
 8002372:	ee26 5a27 	vmulne.f32	s10, s12, s15
          float acc = (devicePrm.acceleration * (1 << 16))/(1<<stepModeShift);
 8002376:	ee27 7a26 	vmul.f32	s14, s14, s13
 800237a:	bf08      	it	eq
 800237c:	eeb0 5a46 	vmoveq.f32	s10, s12
            devicePrm.accu += acc / speed;
 8002380:	eec7 6a05 	vdiv.f32	s13, s14, s10
 8002384:	eef8 5a65 	vcvt.f32.u32	s11, s11
            if (speed==0) speed =1;
 8002388:	bf08      	it	eq
 800238a:	eef7 7a00 	vmoveq.f32	s15, #112	; 0x3f800000  1.0
            devicePrm.accu += acc / speed;
 800238e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8002392:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002396:	ed84 7a00 	vstr	s14, [r4]
            while (devicePrm.accu>=(0X10000L))
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d31a      	bcc.n	80023d8 <Stspin220_StepClockHandler+0x15c>
              speed +=1;
 80023a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
              devicePrm.accu -= (0X10000L);
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80023ac:	6023      	str	r3, [r4, #0]
            while (devicePrm.accu>=(0X10000L))
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
              speed +=1;
 80023b4:	ee77 7a87 	vadd.f32	s15, s15, s14
            while (devicePrm.accu>=(0X10000L))
 80023b8:	d2f5      	bcs.n	80023a6 <Stspin220_StepClockHandler+0x12a>
              if (speed>(devicePrm.maxSpeed/(1<<stepModeShift)))
 80023ba:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80023be:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80023c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                speed = devicePrm.maxSpeed/(1<<stepModeShift);
 80023ca:	bf44      	itt	mi
 80023cc:	ed94 7a0f 	vldrmi	s14, [r4, #60]	; 0x3c
 80023d0:	eec7 7a06 	vdivmi.f32	s15, s14, s12
              devicePrm.speed = speed;
 80023d4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
            if (devicePrm.updateTorque!=FALSE)
 80023d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f43f af5d 	beq.w	800229c <Stspin220_StepClockHandler+0x20>
  devicePrm.updateTorque = FALSE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = devicePrm.accelTorque;
 80023e8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80023ec:	e13d      	b.n	800266a <Stspin220_StepClockHandler+0x3ee>
    if (toggleOdd != 0)
 80023ee:	4867      	ldr	r0, [pc, #412]	; (800258c <Stspin220_StepClockHandler+0x310>)
 80023f0:	7803      	ldrb	r3, [r0, #0]
 80023f2:	b36b      	cbz	r3, 8002450 <Stspin220_StepClockHandler+0x1d4>
      toggleOdd = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	7003      	strb	r3, [r0, #0]
      if (devicePrm.sequencerPosition == 0)
 80023f8:	8923      	ldrh	r3, [r4, #8]
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	b1cb      	cbz	r3, 8002432 <Stspin220_StepClockHandler+0x1b6>
}
 80023fe:	ecbd 8b02 	vpop	{d8}
    Stspin220_Board_TimStckSetFreq(STSPIN220_MAX_STCK_FREQ);
 8002402:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8002590 <Stspin220_StepClockHandler+0x314>
}
 8002406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Stspin220_Board_TimStckSetFreq(STSPIN220_MAX_STCK_FREQ);
 800240a:	f001 b843 	b.w	8003494 <Stspin220_Board_TimStckSetFreq>
    if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 800240e:	485f      	ldr	r0, [pc, #380]	; (800258c <Stspin220_StepClockHandler+0x310>)
 8002410:	f001 f8fa 	bl	8003608 <Stspin220_Board_TimStckStop>
 8002414:	b948      	cbnz	r0, 800242a <Stspin220_StepClockHandler+0x1ae>
  if (errorHandlerCallback != 0)
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <Stspin220_StepClockHandler+0x318>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b14b      	cbz	r3, 8002430 <Stspin220_StepClockHandler+0x1b4>
}
 800241c:	ecbd 8b02 	vpop	{d8}
    (void) errorHandlerCallback(error);
 8002420:	f24a 000e 	movw	r0, #40974	; 0xa00e
}
 8002424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void) errorHandlerCallback(error);
 8002428:	4718      	bx	r3
}
 800242a:	ecbd 8b02 	vpop	{d8}
 800242e:	bd70      	pop	{r4, r5, r6, pc}
    while(1)
 8002430:	e7fe      	b.n	8002430 <Stspin220_StepClockHandler+0x1b4>
        if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 8002432:	f001 f8e9 	bl	8003608 <Stspin220_Board_TimStckStop>
 8002436:	2800      	cmp	r0, #0
 8002438:	d1f7      	bne.n	800242a <Stspin220_StepClockHandler+0x1ae>
  if (errorHandlerCallback != 0)
 800243a:	4b56      	ldr	r3, [pc, #344]	; (8002594 <Stspin220_StepClockHandler+0x318>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ec      	bne.n	800241c <Stspin220_StepClockHandler+0x1a0>
    while(1)
 8002442:	e7fe      	b.n	8002442 <Stspin220_StepClockHandler+0x1c6>
        devicePrm.sequencerPosition -= (SEQUENCER_MAX_VALUE+1);
 8002444:	8923      	ldrh	r3, [r4, #8]
 8002446:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800244a:	b21b      	sxth	r3, r3
 800244c:	8123      	strh	r3, [r4, #8]
 800244e:	e758      	b.n	8002302 <Stspin220_StepClockHandler+0x86>
      toggleOdd = 1;
 8002450:	2201      	movs	r2, #1
 8002452:	7002      	strb	r2, [r0, #0]
      tmp = (1 << (STEP_MODE_1_256-devicePrm.stepMode));
 8002454:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
      devicePrm.sequencerPosition -= tmp;
 8002458:	8923      	ldrh	r3, [r4, #8]
    Stspin220_Board_TimStckSetFreq(STSPIN220_MAX_STCK_FREQ);
 800245a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8002590 <Stspin220_StepClockHandler+0x314>
}
 800245e:	ecbd 8b02 	vpop	{d8}
      tmp = (1 << (STEP_MODE_1_256-devicePrm.stepMode));
 8002462:	f1c1 0108 	rsb	r1, r1, #8
 8002466:	408a      	lsls	r2, r1
      devicePrm.sequencerPosition -= tmp;
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	b21b      	sxth	r3, r3
 800246c:	8123      	strh	r3, [r4, #8]
}
 800246e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Stspin220_Board_TimStckSetFreq(STSPIN220_MAX_STCK_FREQ);
 8002472:	f001 b80f 	b.w	8003494 <Stspin220_Board_TimStckSetFreq>
      devicePrm.currentPosition -= (1 << stepModeShift);
 8002476:	1b5b      	subs	r3, r3, r5
 8002478:	6063      	str	r3, [r4, #4]
      tmp = (1 << (STEP_MODE_1_256-devicePrm.stepMode));
 800247a:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
      devicePrm.sequencerPosition -= tmp;
 800247e:	8923      	ldrh	r3, [r4, #8]
      tmp = (1 << (STEP_MODE_1_256-devicePrm.stepMode));
 8002480:	f1c2 0208 	rsb	r2, r2, #8
 8002484:	4091      	lsls	r1, r2
      devicePrm.sequencerPosition -= tmp;
 8002486:	1a5b      	subs	r3, r3, r1
 8002488:	b21b      	sxth	r3, r3
 800248a:	8123      	strh	r3, [r4, #8]
      if (devicePrm.sequencerPosition < 0)
 800248c:	8923      	ldrh	r3, [r4, #8]
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	f57f af37 	bpl.w	8002302 <Stspin220_StepClockHandler+0x86>
        devicePrm.sequencerPosition += (SEQUENCER_MAX_VALUE+1);
 8002494:	8923      	ldrh	r3, [r4, #8]
 8002496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800249a:	b21b      	sxth	r3, r3
 800249c:	8123      	strh	r3, [r4, #8]
 800249e:	e730      	b.n	8002302 <Stspin220_StepClockHandler+0x86>
        float maxSpeed = devicePrm.maxSpeed/(1<<stepModeShift);
 80024a0:	ed94 8a0f 	vldr	s16, [r4, #60]	; 0x3c
        uint32_t relativePos = devicePrm.relativePos;
 80024a4:	6966      	ldr	r6, [r4, #20]
        if (devicePrm.updateTorque!=FALSE)
 80024a6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 8112 	bne.w	80026d4 <Stspin220_StepClockHandler+0x458>
        if  (((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)||\
 80024b0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80024b4:	f013 0f0c 	tst.w	r3, #12
 80024b8:	f040 80ce 	bne.w	8002658 <Stspin220_StepClockHandler+0x3dc>
             ((devicePrm.commandExecuted==MOVE_CMD)&&\
 80024bc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        if  (((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)||\
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	f000 80c5 	beq.w	8002650 <Stspin220_StepClockHandler+0x3d4>
        float maxSpeed = devicePrm.maxSpeed/(1<<stepModeShift);
 80024c6:	ee07 5a90 	vmov	s15, r5
             ((devicePrm.commandExecuted==RUN_CMD)&&\
 80024ca:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        float maxSpeed = devicePrm.maxSpeed/(1<<stepModeShift);
 80024ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
              (relativePos>=(devicePrm.startDecPos)))||\
 80024d2:	2b01      	cmp	r3, #1
        float maxSpeed = devicePrm.maxSpeed/(1<<stepModeShift);
 80024d4:	ee88 7a27 	vdiv.f32	s14, s16, s15
              (relativePos>=(devicePrm.startDecPos)))||\
 80024d8:	f000 810a 	beq.w	80026f0 <Stspin220_StepClockHandler+0x474>
        else if ((devicePrm.commandExecuted==RUN_CMD)&&(devicePrm.speed<maxSpeed))
 80024dc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	f47f aedb 	bne.w	800229c <Stspin220_StepClockHandler+0x20>
 80024e6:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 80024ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	f57f aed3 	bpl.w	800229c <Stspin220_StepClockHandler+0x20>
          devicePrm.motionState = ACCELERATING;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
          devicePrm.accu = 0;
 80024fc:	6023      	str	r3, [r4, #0]
  devicePrm.updateTorque = FALSE;
 80024fe:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = devicePrm.accelTorque;
 8002502:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002506:	e0b0      	b.n	800266a <Stspin220_StepClockHandler+0x3ee>
        uint32_t relativePos = devicePrm.relativePos;
 8002508:	6962      	ldr	r2, [r4, #20]
        float speed = devicePrm.speed;
 800250a:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
        float dec = (devicePrm.deceleration * (1 << 16))/(1<<stepModeShift);
 800250e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
        if ((((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)&&\
 8002512:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        float dec = (devicePrm.deceleration * (1 << 16))/(1<<stepModeShift);
 8002516:	ee07 5a90 	vmov	s15, r5
        if ((((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)&&\
 800251a:	f013 0f0c 	tst.w	r3, #12
        float dec = (devicePrm.deceleration * (1 << 16))/(1<<stepModeShift);
 800251e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        if ((((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)&&\
 8002522:	d03b      	beq.n	800259c <Stspin220_StepClockHandler+0x320>
             (speed<=(devicePrm.minSpeed/(1<<stepModeShift))))||\
 8002524:	edd4 5a10 	vldr	s11, [r4, #64]	; 0x40
 8002528:	ee85 6aa7 	vdiv.f32	s12, s11, s15
        if ((((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)&&\
 800252c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002534:	db32      	blt.n	800259c <Stspin220_StepClockHandler+0x320>
          if ((devicePrm.commandExecuted&STSPIN220_DIR_CHANGE_BIT_MASK)!=0)
 8002536:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800253a:	071b      	lsls	r3, r3, #28
 800253c:	d517      	bpl.n	800256e <Stspin220_StepClockHandler+0x2f2>
            devicePrm.commandExecuted&=~STSPIN220_DIR_CHANGE_BIT_MASK;
 800253e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002542:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8002546:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
            if (devicePrm.direction==BACKWARD) devicePrm.direction=FORWARD;
 800254a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800254e:	2b01      	cmp	r3, #1
 8002550:	bf0c      	ite	eq
 8002552:	2300      	moveq	r3, #0
            else devicePrm.direction=BACKWARD;
 8002554:	2301      	movne	r3, #1
 8002556:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
            Stspin220_Board_SetDirectionGpio(devicePrm.direction);
 800255a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800255e:	f001 f885 	bl	800366c <Stspin220_Board_SetDirectionGpio>
            if ((devicePrm.commandExecuted&STSPIN220_SOFT_STOP_BIT_MASK)==0)
 8002562:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002566:	f013 0304 	ands.w	r3, r3, #4
 800256a:	f000 80d9 	beq.w	8002720 <Stspin220_StepClockHandler+0x4a4>
          if (devicePrm.stopMode==HOLD_MODE)
 800256e:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 8002572:	2800      	cmp	r0, #0
 8002574:	f000 80c9 	beq.w	800270a <Stspin220_StepClockHandler+0x48e>
          else if (devicePrm.stopMode==STANDBY_MODE)
 8002578:	2802      	cmp	r0, #2
  Stspin220_HardHiZ(deviceId);
 800257a:	f04f 0000 	mov.w	r0, #0
          else if (devicePrm.stopMode==STANDBY_MODE)
 800257e:	f000 80c7 	beq.w	8002710 <Stspin220_StepClockHandler+0x494>
            Stspin220_HardHiZ(deviceId);
 8002582:	f7ff fcc9 	bl	8001f18 <Stspin220_HardHiZ>
 8002586:	e689      	b.n	800229c <Stspin220_StepClockHandler+0x20>
 8002588:	200015e8 	.word	0x200015e8
 800258c:	20001643 	.word	0x20001643
 8002590:	461c4000 	.word	0x461c4000
 8002594:	20001638 	.word	0x20001638
 8002598:	47800000 	.word	0x47800000
            ((devicePrm.commandExecuted==MOVE_CMD)&&(relativePos>=devicePrm.stepsToTake)))
 800259c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
             (speed<=(devicePrm.minSpeed/(1<<stepModeShift))))||\
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d06b      	beq.n	800267c <Stspin220_StepClockHandler+0x400>
        else if ((devicePrm.commandExecuted==RUN_CMD)&&
 80025a4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d070      	beq.n	800268e <Stspin220_StepClockHandler+0x412>
          if (speed>(devicePrm.minSpeed/(1<<stepModeShift)))
 80025ac:	edd4 5a10 	vldr	s11, [r4, #64]	; 0x40
 80025b0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80025b4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	f57f ae6e 	bpl.w	800229c <Stspin220_StepClockHandler+0x20>
        float dec = (devicePrm.deceleration * (1 << 16))/(1<<stepModeShift);
 80025c0:	ed1f 6a0b 	vldr	s12, [pc, #-44]	; 8002598 <Stspin220_StepClockHandler+0x31c>
            devicePrm.accu += dec / speed;
 80025c4:	edd4 5a00 	vldr	s11, [r4]
            if (speed==0) speed =1;
 80025c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	bf18      	it	ne
 80025d2:	ee27 5a87 	vmulne.f32	s10, s15, s14
        float dec = (devicePrm.deceleration * (1 << 16))/(1<<stepModeShift);
 80025d6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80025da:	bf08      	it	eq
 80025dc:	eeb0 5a67 	vmoveq.f32	s10, s15
            devicePrm.accu += dec / speed;
 80025e0:	ee86 6a85 	vdiv.f32	s12, s13, s10
 80025e4:	eef8 5a65 	vcvt.f32.u32	s11, s11
            if (speed==0) speed =1;
 80025e8:	bf08      	it	eq
 80025ea:	eeb7 7a00 	vmoveq.f32	s14, #112	; 0x3f800000  1.0
            devicePrm.accu += dec / speed;
 80025ee:	ee76 6a25 	vadd.f32	s13, s12, s11
 80025f2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80025f6:	edc4 6a00 	vstr	s13, [r4]
            while (devicePrm.accu>=(0X10000L))
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d31f      	bcc.n	8002642 <Stspin220_StepClockHandler+0x3c6>
              if (speed>1)
 8002602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
              devicePrm.accu -= (0X10000L);
 8002606:	6823      	ldr	r3, [r4, #0]
              if (speed>1)
 8002608:	eeb4 7ae6 	vcmpe.f32	s14, s13
              devicePrm.accu -= (0X10000L);
 800260c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002610:	6023      	str	r3, [r4, #0]
              if (speed>1)
 8002612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            while (devicePrm.accu>=(0X10000L))
 8002616:	6823      	ldr	r3, [r4, #0]
              if (speed>1)
 8002618:	dd4b      	ble.n	80026b2 <Stspin220_StepClockHandler+0x436>
            while (devicePrm.accu>=(0X10000L))
 800261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
                speed -=1;
 800261e:	ee37 7a66 	vsub.f32	s14, s14, s13
            while (devicePrm.accu>=(0X10000L))
 8002622:	d2f0      	bcs.n	8002606 <Stspin220_StepClockHandler+0x38a>
              if (speed<(devicePrm.minSpeed/(1<<stepModeShift)))
 8002624:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
 8002628:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800262c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                speed = devicePrm.minSpeed/(1<<stepModeShift);
 8002634:	bfc4      	itt	gt
 8002636:	edd4 6a10 	vldrgt	s13, [r4, #64]	; 0x40
 800263a:	ee86 7aa7 	vdivgt.f32	s14, s13, s15
              devicePrm.speed = speed;
 800263e:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
            if (devicePrm.updateTorque!=FALSE)
 8002642:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002646:	2b00      	cmp	r3, #0
 8002648:	f43f ae28 	beq.w	800229c <Stspin220_StepClockHandler+0x20>
  devicePrm.updateTorque = FALSE;
 800264c:	2300      	movs	r3, #0
 800264e:	e008      	b.n	8002662 <Stspin220_StepClockHandler+0x3e6>
              (relativePos>=(devicePrm.startDecPos)))||\
 8002650:	69a3      	ldr	r3, [r4, #24]
             ((devicePrm.commandExecuted==MOVE_CMD)&&\
 8002652:	42b3      	cmp	r3, r6
 8002654:	f63f af37 	bhi.w	80024c6 <Stspin220_StepClockHandler+0x24a>
          devicePrm.accu = 0;
 8002658:	2300      	movs	r3, #0
          devicePrm.motionState = DECELERATING;
 800265a:	2202      	movs	r2, #2
 800265c:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
          devicePrm.accu = 0;
 8002660:	6023      	str	r3, [r4, #0]
  devicePrm.updateTorque = FALSE;
 8002662:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = devicePrm.decelTorque;
 8002666:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  torqueValue = devicePrm.currentTorque;
 8002670:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
  Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 8002674:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002676:	f000 ff47 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
 800267a:	e60f      	b.n	800229c <Stspin220_StepClockHandler+0x20>
            ((devicePrm.commandExecuted==MOVE_CMD)&&(relativePos>=devicePrm.stepsToTake)))
 800267c:	69e3      	ldr	r3, [r4, #28]
 800267e:	4293      	cmp	r3, r2
 8002680:	d890      	bhi.n	80025a4 <Stspin220_StepClockHandler+0x328>
 8002682:	e758      	b.n	8002536 <Stspin220_StepClockHandler+0x2ba>
              ((devicePrm.commandExecuted==MOVE_CMD)&&(relPos>=devicePrm.startDecPos)))
 8002684:	69a3      	ldr	r3, [r4, #24]
 8002686:	4293      	cmp	r3, r2
 8002688:	f63f ae57 	bhi.w	800233a <Stspin220_StepClockHandler+0xbe>
 800268c:	e7e4      	b.n	8002658 <Stspin220_StepClockHandler+0x3dc>
                 (speed<=(devicePrm.maxSpeed/(1<<stepModeShift))))
 800268e:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
 8002692:	ee85 6aa7 	vdiv.f32	s12, s11, s15
        else if ((devicePrm.commandExecuted==RUN_CMD)&&
 8002696:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269e:	db85      	blt.n	80025ac <Stspin220_StepClockHandler+0x330>
  devicePrm.updateTorque = FALSE;
 80026a0:	2300      	movs	r3, #0
          devicePrm.motionState = STEADY;
 80026a2:	2203      	movs	r2, #3
 80026a4:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
  devicePrm.updateTorque = FALSE;
 80026a8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = devicePrm.runTorque;
 80026ac:	f894 3020 	ldrb.w	r3, [r4, #32]
 80026b0:	e7db      	b.n	800266a <Stspin220_StepClockHandler+0x3ee>
            while (devicePrm.accu>=(0X10000L))
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b6:	d3b5      	bcc.n	8002624 <Stspin220_StepClockHandler+0x3a8>
 80026b8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	dca1      	bgt.n	8002606 <Stspin220_StepClockHandler+0x38a>
              devicePrm.accu -= (0X10000L);
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80026c8:	6023      	str	r3, [r4, #0]
            while (devicePrm.accu>=(0X10000L))
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d2f7      	bcs.n	80026c2 <Stspin220_StepClockHandler+0x446>
 80026d2:	e7a7      	b.n	8002624 <Stspin220_StepClockHandler+0x3a8>
  devicePrm.updateTorque = FALSE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = devicePrm.runTorque;
 80026da:	f894 3020 	ldrb.w	r3, [r4, #32]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  torqueValue = devicePrm.currentTorque;
 80026e4:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
  Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 80026e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80026ea:	f000 ff0d 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
 80026ee:	e6df      	b.n	80024b0 <Stspin220_StepClockHandler+0x234>
              (devicePrm.speed>maxSpeed)))
 80026f0:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
             ((devicePrm.commandExecuted==RUN_CMD)&&\
 80026f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	f77f aeee 	ble.w	80024dc <Stspin220_StepClockHandler+0x260>
 8002700:	e7aa      	b.n	8002658 <Stspin220_StepClockHandler+0x3dc>
                   ((devicePrm.commandExecuted==MOVE_CMD)&&(relPos >= endAccPos)))
 8002702:	428a      	cmp	r2, r1
 8002704:	f4ff ae2c 	bcc.w	8002360 <Stspin220_StepClockHandler+0xe4>
 8002708:	e7ca      	b.n	80026a0 <Stspin220_StepClockHandler+0x424>
            Stspin220_HardStop(deviceId);
 800270a:	f7ff fc4d 	bl	8001fa8 <Stspin220_HardStop>
 800270e:	e5c5      	b.n	800229c <Stspin220_StepClockHandler+0x20>
  Stspin220_HardHiZ(deviceId);
 8002710:	f7ff fc02 	bl	8001f18 <Stspin220_HardHiZ>
	Stspin220_Board_Reset();
 8002714:	f000 ffa2 	bl	800365c <Stspin220_Board_Reset>
  devicePrm.motionState = STANDBY;
 8002718:	2309      	movs	r3, #9
 800271a:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
 800271e:	e5bd      	b.n	800229c <Stspin220_StepClockHandler+0x20>
              devicePrm.motionState = ACCELERATING;
 8002720:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
              devicePrm.accu = 0;
 8002724:	6023      	str	r3, [r4, #0]
  devicePrm.updateTorque = FALSE;
 8002726:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = devicePrm.accelTorque;
 800272a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800272e:	e79c      	b.n	800266a <Stspin220_StepClockHandler+0x3ee>

08002730 <Stspin220_ComputeSpeedProfile>:
{
 8002730:	b510      	push	{r4, lr}
  float minSpeed = devicePrm.minSpeed;
 8002732:	4c36      	ldr	r4, [pc, #216]	; (800280c <Stspin220_ComputeSpeedProfile+0xdc>)
 8002734:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
  reqAccSteps = (devicePrm.maxSpeed - minSpeed);
 8002738:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
  reqAccSteps *= (devicePrm.maxSpeed + minSpeed);
 800273c:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
  reqAccSteps /= devicePrm.acceleration;
 8002740:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
  reqAccSteps = (devicePrm.maxSpeed - minSpeed);
 8002744:	ee37 7a46 	vsub.f32	s14, s14, s12
  reqAccSteps *= (devicePrm.maxSpeed + minSpeed);
 8002748:	ee77 7a86 	vadd.f32	s15, s15, s12
  reqDecSteps /= devicePrm.deceleration;
 800274c:	ed94 6a0e 	vldr	s12, [r4, #56]	; 0x38
  reqAccSteps *= (devicePrm.maxSpeed + minSpeed);
 8002750:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 8002754:	ed2d 8b02 	vpush	{d8}
  reqAccSteps /= devicePrm.acceleration;
 8002758:	ee87 7aa5 	vdiv.f32	s14, s15, s11
  reqDecSteps /= devicePrm.deceleration;
 800275c:	eec7 8a86 	vdiv.f32	s17, s15, s12
	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002760:	ee07 1a90 	vmov	s15, r1
  reqAccSteps /= 2;
 8002764:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002768:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  reqDecSteps /= 2;
 800276c:	ee68 8aa6 	vmul.f32	s17, s17, s13
  reqAccSteps /= 2;
 8002770:	ee67 7a26 	vmul.f32	s15, s14, s13
	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002774:	ee37 7aa8 	vadd.f32	s14, s15, s17
 8002778:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	dd20      	ble.n	80027c4 <Stspin220_ComputeSpeedProfile+0x94>
    float dec = devicePrm.deceleration;
 8002782:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    float acc = devicePrm.acceleration;
 8002786:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    reqDecSteps =  (dec * nbSteps) / (acc + dec);
 800278a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800278e:	ee77 6aa6 	vadd.f32	s13, s15, s13
    if (reqDecSteps > 1)
 8002792:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    reqDecSteps =  (dec * nbSteps) / (acc + dec);
 8002796:	ee88 7a26 	vdiv.f32	s14, s16, s13
}
 800279a:	ecbd 8b02 	vpop	{d8}
    if (reqDecSteps > 1)
 800279e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      reqAccSteps = reqDecSteps - 1;
 80027a6:	bfc8      	it	gt
 80027a8:	ee77 7a67 	vsubgt.f32	s15, s14, s15
    devicePrm.startDecPos = reqDecSteps;
 80027ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    devicePrm.endAccPos = reqAccSteps;
 80027b0:	bfca      	itet	gt
 80027b2:	eefc 7ae7 	vcvtgt.u32.f32	s15, s15
 80027b6:	2300      	movle	r3, #0
 80027b8:	ee17 3a90 	vmovgt	r3, s15
 80027bc:	6123      	str	r3, [r4, #16]
    devicePrm.startDecPos = reqDecSteps;
 80027be:	ed84 7a06 	vstr	s14, [r4, #24]
}
 80027c2:	bd10      	pop	{r4, pc}
    devicePrm.endAccPos = round(reqAccSteps);
 80027c4:	ee17 0a90 	vmov	r0, s15
 80027c8:	f7fd febe 	bl	8000548 <__aeabi_f2d>
 80027cc:	ec41 0b10 	vmov	d0, r0, r1
 80027d0:	f008 f8ce 	bl	800a970 <round>
 80027d4:	ec51 0b10 	vmov	r0, r1, d0
 80027d8:	f7fe f9a8 	bl	8000b2c <__aeabi_d2uiz>
    devicePrm.startDecPos = round(nbSteps - reqDecSteps - 1);
 80027dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80027e0:	ee38 8a67 	vsub.f32	s16, s16, s15
    devicePrm.endAccPos = round(reqAccSteps);
 80027e4:	4603      	mov	r3, r0
    devicePrm.startDecPos = round(nbSteps - reqDecSteps - 1);
 80027e6:	ee78 7a68 	vsub.f32	s15, s16, s17
    devicePrm.endAccPos = round(reqAccSteps);
 80027ea:	6123      	str	r3, [r4, #16]
    devicePrm.startDecPos = round(nbSteps - reqDecSteps - 1);
 80027ec:	ee17 0a90 	vmov	r0, s15
 80027f0:	f7fd feaa 	bl	8000548 <__aeabi_f2d>
 80027f4:	ec41 0b10 	vmov	d0, r0, r1
 80027f8:	f008 f8ba 	bl	800a970 <round>
 80027fc:	ec51 0b10 	vmov	r0, r1, d0
 8002800:	f7fe f994 	bl	8000b2c <__aeabi_d2uiz>
}
 8002804:	ecbd 8b02 	vpop	{d8}
    devicePrm.startDecPos = round(nbSteps - reqDecSteps - 1);
 8002808:	61a0      	str	r0, [r4, #24]
}
 800280a:	bd10      	pop	{r4, pc}
 800280c:	200015e8 	.word	0x200015e8

08002810 <Stspin220_SetDeviceParamsToPredefinedValues>:
{
 8002810:	b510      	push	{r4, lr}
  devicePrm.motionState = STANDBY;
 8002812:	4c79      	ldr	r4, [pc, #484]	; (80029f8 <Stspin220_SetDeviceParamsToPredefinedValues+0x1e8>)
 8002814:	2309      	movs	r3, #9
 8002816:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 800281a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((newAcc != 0)&&
 800281e:	0718      	lsls	r0, r3, #28
 8002820:	d403      	bmi.n	800282a <Stspin220_SetDeviceParamsToPredefinedValues+0x1a>
       ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 8002822:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8002826:	07d9      	lsls	r1, r3, #31
 8002828:	d532      	bpl.n	8002890 <Stspin220_SetDeviceParamsToPredefinedValues+0x80>
    devicePrm.acceleration = newAcc;
 800282a:	4b74      	ldr	r3, [pc, #464]	; (80029fc <Stspin220_SetDeviceParamsToPredefinedValues+0x1ec>)
 800282c:	6363      	str	r3, [r4, #52]	; 0x34
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 800282e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((newDec != 0)&& 
 8002832:	071a      	lsls	r2, r3, #28
 8002834:	d536      	bpl.n	80028a4 <Stspin220_SetDeviceParamsToPredefinedValues+0x94>
    devicePrm.deceleration = newDec;
 8002836:	4b71      	ldr	r3, [pc, #452]	; (80029fc <Stspin220_SetDeviceParamsToPredefinedValues+0x1ec>)
 8002838:	63a3      	str	r3, [r4, #56]	; 0x38
      (devicePrm.minSpeed <= newMaxSpeed) &&\
 800283a:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
        ((newMaxSpeed/(1<<Stspin220_GetStepMode(deviceId)))<= STSPIN220_MAX_STCK_FREQ)))&&\
 800283e:	eddf 7a70 	vldr	s15, [pc, #448]	; 8002a00 <Stspin220_SetDeviceParamsToPredefinedValues+0x1f0>
 8002842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	d80a      	bhi.n	8002862 <Stspin220_SetDeviceParamsToPredefinedValues+0x52>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||\
 800284c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
      (devicePrm.minSpeed <= newMaxSpeed) &&\
 8002850:	0718      	lsls	r0, r3, #28
 8002852:	d502      	bpl.n	800285a <Stspin220_SetDeviceParamsToPredefinedValues+0x4a>
    devicePrm.maxSpeed = newMaxSpeed;
 8002854:	4b6b      	ldr	r3, [pc, #428]	; (8002a04 <Stspin220_SetDeviceParamsToPredefinedValues+0x1f4>)
 8002856:	63e3      	str	r3, [r4, #60]	; 0x3c
  return cmdExecuted;
 8002858:	e009      	b.n	800286e <Stspin220_SetDeviceParamsToPredefinedValues+0x5e>
      ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 800285a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||\
 800285e:	07d9      	lsls	r1, r3, #31
 8002860:	d4f8      	bmi.n	8002854 <Stspin220_SetDeviceParamsToPredefinedValues+0x44>
  if (errorHandlerCallback != 0)
 8002862:	4b69      	ldr	r3, [pc, #420]	; (8002a08 <Stspin220_SetDeviceParamsToPredefinedValues+0x1f8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b193      	cbz	r3, 800288e <Stspin220_SetDeviceParamsToPredefinedValues+0x7e>
    (void) errorHandlerCallback(error);
 8002868:	f24a 0001 	movw	r0, #40961	; 0xa001
 800286c:	4798      	blx	r3
      (newMinSpeed <= devicePrm.maxSpeed) && 
 800286e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
      (newMinSpeed <= STSPIN220_MAX_STCK_FREQ) &&
 8002872:	eddf 7a66 	vldr	s15, [pc, #408]	; 8002a0c <Stspin220_SetDeviceParamsToPredefinedValues+0x1fc>
 8002876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800287a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287e:	db22      	blt.n	80028c6 <Stspin220_SetDeviceParamsToPredefinedValues+0xb6>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8002880:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
      (newMinSpeed <= devicePrm.maxSpeed) && 
 8002884:	071a      	lsls	r2, r3, #28
 8002886:	d51a      	bpl.n	80028be <Stspin220_SetDeviceParamsToPredefinedValues+0xae>
    devicePrm.minSpeed = newMinSpeed;
 8002888:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <Stspin220_SetDeviceParamsToPredefinedValues+0x200>)
 800288a:	6423      	str	r3, [r4, #64]	; 0x40
  return cmdExecuted;
 800288c:	e022      	b.n	80028d4 <Stspin220_SetDeviceParamsToPredefinedValues+0xc4>
    while(1)
 800288e:	e7fe      	b.n	800288e <Stspin220_SetDeviceParamsToPredefinedValues+0x7e>
  if (errorHandlerCallback != 0)
 8002890:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <Stspin220_SetDeviceParamsToPredefinedValues+0x1f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b18b      	cbz	r3, 80028ba <Stspin220_SetDeviceParamsToPredefinedValues+0xaa>
    (void) errorHandlerCallback(error);
 8002896:	f24a 0003 	movw	r0, #40963	; 0xa003
 800289a:	4798      	blx	r3
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 800289c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((newDec != 0)&& 
 80028a0:	071a      	lsls	r2, r3, #28
 80028a2:	d4c8      	bmi.n	8002836 <Stspin220_SetDeviceParamsToPredefinedValues+0x26>
       ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 80028a4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 80028a8:	07db      	lsls	r3, r3, #31
 80028aa:	d4c4      	bmi.n	8002836 <Stspin220_SetDeviceParamsToPredefinedValues+0x26>
  if (errorHandlerCallback != 0)
 80028ac:	4b56      	ldr	r3, [pc, #344]	; (8002a08 <Stspin220_SetDeviceParamsToPredefinedValues+0x1f8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	b123      	cbz	r3, 80028bc <Stspin220_SetDeviceParamsToPredefinedValues+0xac>
    (void) errorHandlerCallback(error);
 80028b2:	f24a 0004 	movw	r0, #40964	; 0xa004
 80028b6:	4798      	blx	r3
}
 80028b8:	e7bf      	b.n	800283a <Stspin220_SetDeviceParamsToPredefinedValues+0x2a>
    while(1)
 80028ba:	e7fe      	b.n	80028ba <Stspin220_SetDeviceParamsToPredefinedValues+0xaa>
 80028bc:	e7fe      	b.n	80028bc <Stspin220_SetDeviceParamsToPredefinedValues+0xac>
       ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 80028be:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 80028c2:	07db      	lsls	r3, r3, #31
 80028c4:	d4e0      	bmi.n	8002888 <Stspin220_SetDeviceParamsToPredefinedValues+0x78>
  if (errorHandlerCallback != 0)
 80028c6:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <Stspin220_SetDeviceParamsToPredefinedValues+0x1f8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d079      	beq.n	80029c2 <Stspin220_SetDeviceParamsToPredefinedValues+0x1b2>
    (void) errorHandlerCallback(error);
 80028ce:	f24a 0002 	movw	r0, #40962	; 0xa002
 80028d2:	4798      	blx	r3
  devicePrm.refPwmFreq = newFreq;
 80028d4:	484f      	ldr	r0, [pc, #316]	; (8002a14 <Stspin220_SetDeviceParamsToPredefinedValues+0x204>)
 80028d6:	62a0      	str	r0, [r4, #40]	; 0x28
  Stspin220_Board_PwmRefSetFreqAndDutyCycle(newFreq,devicePrm.currentTorque);
 80028d8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80028dc:	f000 fe14 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
  devicePrm.updateTorque = TRUE;
 80028e0:	2301      	movs	r3, #1
      devicePrm.decelTorque = torqueValue;
 80028e2:	210f      	movs	r1, #15
      devicePrm.accelTorque = torqueValue;
 80028e4:	2014      	movs	r0, #20
  devicePrm.updateTorque = TRUE;
 80028e6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.runTorque = torqueValue;
 80028ea:	220a      	movs	r2, #10
      devicePrm.accelTorque = torqueValue;
 80028ec:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  devicePrm.updateTorque = TRUE;
 80028f0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.decelTorque = torqueValue;
 80028f4:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
      devicePrm.holdTorque = torqueValue;
 80028f8:	2119      	movs	r1, #25
  devicePrm.updateTorque = TRUE;
 80028fa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.runTorque = torqueValue;
 80028fe:	f884 2020 	strb.w	r2, [r4, #32]
  devicePrm.updateTorque = TRUE;
 8002902:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.holdTorque = torqueValue;
 8002906:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
      if (devicePrm.motionState != INACTIVE)
 800290a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800290e:	2b08      	cmp	r3, #8
 8002910:	d107      	bne.n	8002922 <Stspin220_SetDeviceParamsToPredefinedValues+0x112>
      devicePrm.currentTorque = torqueValue;
 8002912:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 8002916:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002918:	f000 fdf6 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
      devicePrm.updateTorque = FALSE;
 800291c:	2300      	movs	r3, #0
 800291e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  devicePrm.stopMode = stopMode;
 8002922:	2300      	movs	r3, #0
  devicePrm.speed = 0;
 8002924:	2200      	movs	r2, #0
  devicePrm.torqueBoostSpeedThreshold = STSPIN220_CONF_PARAM_TORQUE_BOOST_TH;
 8002926:	493c      	ldr	r1, [pc, #240]	; (8002a18 <Stspin220_SetDeviceParamsToPredefinedValues+0x208>)
  devicePrm.stopMode = stopMode;
 8002928:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  devicePrm.torqueBoostEnable = STSPIN220_CONF_PARAM_TORQUE_BOOST_EN;
 800292c:	2001      	movs	r0, #1
 800292e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  devicePrm.torqueBoostSpeedThreshold = STSPIN220_CONF_PARAM_TORQUE_BOOST_TH;
 8002932:	6321      	str	r1, [r4, #48]	; 0x30
  devicePrm.accu = 0;
 8002934:	6023      	str	r3, [r4, #0]
  devicePrm.currentPosition = 0;
 8002936:	6063      	str	r3, [r4, #4]
  devicePrm.sequencerPosition = 0;
 8002938:	8123      	strh	r3, [r4, #8]
  devicePrm.endAccPos = 0;
 800293a:	6123      	str	r3, [r4, #16]
  devicePrm.relativePos = 0;
 800293c:	6163      	str	r3, [r4, #20]
  devicePrm.startDecPos = 0;
 800293e:	61a3      	str	r3, [r4, #24]
  devicePrm.updateTorque = FALSE;
 8002940:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  devicePrm.speed = 0;
 8002944:	6462      	str	r2, [r4, #68]	; 0x44
  devicePrm.commandExecuted = NO_CMD;
 8002946:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  devicePrm.direction = FORWARD;
 800294a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
  tmp = devicePrm.minSpeed;
 800294e:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
  if (((devicePrm.torqueBoostEnable != FALSE)&&\
 8002952:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
  devicePrm.stepsToTake = 0;
 8002956:	61e3      	str	r3, [r4, #28]
  if (((devicePrm.torqueBoostEnable != FALSE)&&\
 8002958:	b3a2      	cbz	r2, 80029c4 <Stspin220_SetDeviceParamsToPredefinedValues+0x1b4>
       (devicePrm.torqueBoostSpeedThreshold>STSPIN220_MAX_STCK_FREQ))||\
 800295a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
  if (((devicePrm.torqueBoostEnable != FALSE)&&\
 800295e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a1c <Stspin220_SetDeviceParamsToPredefinedValues+0x20c>
 8002962:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296a:	dd2b      	ble.n	80029c4 <Stspin220_SetDeviceParamsToPredefinedValues+0x1b4>
  if (errorHandlerCallback != 0)
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <Stspin220_SetDeviceParamsToPredefinedValues+0x1f8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d03b      	beq.n	80029ec <Stspin220_SetDeviceParamsToPredefinedValues+0x1dc>
    (void) errorHandlerCallback(error);
 8002974:	f24a 0009 	movw	r0, #40969	; 0xa009
 8002978:	4798      	blx	r3
  if ((devicePrm.motionState != INACTIVE)&&\
 800297a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800297e:	2b08      	cmp	r3, #8
 8002980:	d003      	beq.n	800298a <Stspin220_SetDeviceParamsToPredefinedValues+0x17a>
      (devicePrm.motionState != STANDBY))
 8002982:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((devicePrm.motionState != INACTIVE)&&\
 8002986:	2b09      	cmp	r3, #9
 8002988:	d131      	bne.n	80029ee <Stspin220_SetDeviceParamsToPredefinedValues+0x1de>
  Stspin220_Board_Reset();
 800298a:	f000 fe67 	bl	800365c <Stspin220_Board_Reset>
  devicePrm.sequencerPosition = 0;
 800298e:	2200      	movs	r2, #0
  devicePrm.stepMode = stepMode;
 8002990:	2005      	movs	r0, #5
  devicePrm.sequencerPosition = 0;
 8002992:	8122      	strh	r2, [r4, #8]
      Stspin220_Board_SetModePins(0, 0, 0, 1);
 8002994:	2301      	movs	r3, #1
  devicePrm.currentPosition = 0; 
 8002996:	6062      	str	r2, [r4, #4]
      Stspin220_Board_SetModePins(0, 0, 0, 1);
 8002998:	4611      	mov	r1, r2
  devicePrm.markPosition = 0;
 800299a:	60e2      	str	r2, [r4, #12]
  devicePrm.stepModeLatched = stepMode;
 800299c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  devicePrm.stepMode = stepMode;
 80029a0:	f884 004b 	strb.w	r0, [r4, #75]	; 0x4b
      Stspin220_Board_SetModePins(0, 0, 0, 1);
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 fecd 	bl	8003744 <Stspin220_Board_SetModePins>
  Stspin220_Board_Delay(SELECT_STEP_MODE_DELAY);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f000 fcd2 	bl	8003354 <Stspin220_Board_Delay>
  Stspin220_Board_ReleaseReset();
 80029b0:	f000 fe4c 	bl	800364c <Stspin220_Board_ReleaseReset>
  Stspin220_Board_Delay(AFTER_STANDBY_EXIT_DEAD_TIME);
 80029b4:	2001      	movs	r0, #1
 80029b6:	f000 fccd 	bl	8003354 <Stspin220_Board_Delay>
}
 80029ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Stspin220_Board_UnsetFullStep();
 80029be:	f000 bf23 	b.w	8003808 <Stspin220_Board_UnsetFullStep>
    while(1)
 80029c2:	e7fe      	b.n	80029c2 <Stspin220_SetDeviceParamsToPredefinedValues+0x1b2>
  tmp = devicePrm.minSpeed;
 80029c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      (tmp>devicePrm.maxSpeed))
 80029c8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80029cc:	ee17 3a90 	vmov	r3, s15
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
       (devicePrm.torqueBoostSpeedThreshold>STSPIN220_MAX_STCK_FREQ))||\
 80029da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e2:	ddca      	ble.n	800297a <Stspin220_SetDeviceParamsToPredefinedValues+0x16a>
  if (errorHandlerCallback != 0)
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <Stspin220_SetDeviceParamsToPredefinedValues+0x1f8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1c3      	bne.n	8002974 <Stspin220_SetDeviceParamsToPredefinedValues+0x164>
    while(1)
 80029ec:	e7fe      	b.n	80029ec <Stspin220_SetDeviceParamsToPredefinedValues+0x1dc>
    Stspin220_HardHiZ(deviceId);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7ff fa92 	bl	8001f18 <Stspin220_HardHiZ>
 80029f4:	e7c9      	b.n	800298a <Stspin220_SetDeviceParamsToPredefinedValues+0x17a>
 80029f6:	bf00      	nop
 80029f8:	200015e8 	.word	0x200015e8
 80029fc:	43f00000 	.word	0x43f00000
 8002a00:	44c80000 	.word	0x44c80000
 8002a04:	44c80000 	.word	0x44c80000
 8002a08:	20001638 	.word	0x20001638
 8002a0c:	43c80000 	.word	0x43c80000
 8002a10:	43c80000 	.word	0x43c80000
 8002a14:	000186a0 	.word	0x000186a0
 8002a18:	43480000 	.word	0x43480000
 8002a1c:	461c4000 	.word	0x461c4000

08002a20 <Stspin220_SetStepModeWithoutReset>:
{
 8002a20:	b508      	push	{r3, lr}
  devicePrm.stepMode = stepMode;
 8002a22:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <Stspin220_SetStepModeWithoutReset+0xc0>)
 8002a24:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
  devicePrm.stepModeLatched = stepMode;
 8002a28:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
  switch (stepMode)
 8002a2c:	2908      	cmp	r1, #8
 8002a2e:	d855      	bhi.n	8002adc <Stspin220_SetStepModeWithoutReset+0xbc>
 8002a30:	e8df f001 	tbb	[pc, r1]
 8002a34:	312a2317 	.word	0x312a2317
 8002a38:	4d463f38 	.word	0x4d463f38
 8002a3c:	05          	.byte	0x05
 8002a3d:	00          	.byte	0x00
      Stspin220_Board_SetModePins(1, 1, 0, 0);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2101      	movs	r1, #1
 8002a42:	461a      	mov	r2, r3
 8002a44:	4608      	mov	r0, r1
 8002a46:	f000 fe7d 	bl	8003744 <Stspin220_Board_SetModePins>
  Stspin220_Board_Delay(SELECT_STEP_MODE_DELAY);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f000 fc82 	bl	8003354 <Stspin220_Board_Delay>
  Stspin220_Board_ReleaseReset();
 8002a50:	f000 fdfc 	bl	800364c <Stspin220_Board_ReleaseReset>
  Stspin220_Board_Delay(AFTER_STANDBY_EXIT_DEAD_TIME);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f000 fc7d 	bl	8003354 <Stspin220_Board_Delay>
    Stspin220_Board_UnsetFullStep();
 8002a5a:	f000 fed5 	bl	8003808 <Stspin220_Board_UnsetFullStep>
  return TRUE;
 8002a5e:	2001      	movs	r0, #1
}
 8002a60:	bd08      	pop	{r3, pc}
      Stspin220_Board_SetFullStep();
 8002a62:	f000 fec1 	bl	80037e8 <Stspin220_Board_SetFullStep>
  Stspin220_Board_Delay(SELECT_STEP_MODE_DELAY);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f000 fc74 	bl	8003354 <Stspin220_Board_Delay>
  Stspin220_Board_ReleaseReset();
 8002a6c:	f000 fdee 	bl	800364c <Stspin220_Board_ReleaseReset>
  Stspin220_Board_Delay(AFTER_STANDBY_EXIT_DEAD_TIME);
 8002a70:	2001      	movs	r0, #1
 8002a72:	f000 fc6f 	bl	8003354 <Stspin220_Board_Delay>
  return TRUE;
 8002a76:	2001      	movs	r0, #1
}
 8002a78:	bd08      	pop	{r3, pc}
      Stspin220_Board_SetModePins(1, 0, 1, 0);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f000 fe5f 	bl	8003744 <Stspin220_Board_SetModePins>
      break;    
 8002a86:	e7e0      	b.n	8002a4a <Stspin220_SetStepModeWithoutReset+0x2a>
      Stspin220_Board_SetModePins(0, 1, 0, 1);
 8002a88:	2301      	movs	r3, #1
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f000 fe58 	bl	8003744 <Stspin220_Board_SetModePins>
      break;        
 8002a94:	e7d9      	b.n	8002a4a <Stspin220_SetStepModeWithoutReset+0x2a>
      Stspin220_Board_SetModePins(1, 1, 1, 0);
 8002a96:	2201      	movs	r2, #1
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	f000 fe51 	bl	8003744 <Stspin220_Board_SetModePins>
      break;
 8002aa2:	e7d2      	b.n	8002a4a <Stspin220_SetStepModeWithoutReset+0x2a>
      Stspin220_Board_SetModePins(1, 1, 1, 1);
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fe4a 	bl	8003744 <Stspin220_Board_SetModePins>
      break;   
 8002ab0:	e7cb      	b.n	8002a4a <Stspin220_SetStepModeWithoutReset+0x2a>
      Stspin220_Board_SetModePins(0, 0, 0, 1);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f000 fe43 	bl	8003744 <Stspin220_Board_SetModePins>
      break;   
 8002abe:	e7c4      	b.n	8002a4a <Stspin220_SetStepModeWithoutReset+0x2a>
      Stspin220_Board_SetModePins(1, 1, 0, 1);
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fe3c 	bl	8003744 <Stspin220_Board_SetModePins>
      break;
 8002acc:	e7bd      	b.n	8002a4a <Stspin220_SetStepModeWithoutReset+0x2a>
      Stspin220_Board_SetModePins(0, 0, 1, 0);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fe35 	bl	8003744 <Stspin220_Board_SetModePins>
      break;  
 8002ada:	e7b6      	b.n	8002a4a <Stspin220_SetStepModeWithoutReset+0x2a>
  switch (stepMode)
 8002adc:	2000      	movs	r0, #0
}
 8002ade:	bd08      	pop	{r3, pc}
 8002ae0:	200015e8 	.word	0x200015e8

08002ae4 <Stspin220_ExitDeviceFromStandby>:
{
 8002ae4:	b570      	push	{r4, r5, r6, lr}
  uint32_t sequencerPosition = devicePrm.sequencerPosition;
 8002ae6:	4c21      	ldr	r4, [pc, #132]	; (8002b6c <Stspin220_ExitDeviceFromStandby+0x88>)
  Stspin220_SetStepModeWithoutReset(0, devicePrm.stepMode);
 8002ae8:	2000      	movs	r0, #0
  uint32_t sequencerPosition = devicePrm.sequencerPosition;
 8002aea:	8926      	ldrh	r6, [r4, #8]
  Stspin220_SetStepModeWithoutReset(0, devicePrm.stepMode);
 8002aec:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8002af0:	f7ff ff96 	bl	8002a20 <Stspin220_SetStepModeWithoutReset>
  if (devicePrm.sequencerPosition != 0)
 8002af4:	8923      	ldrh	r3, [r4, #8]
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	b91b      	cbnz	r3, 8002b02 <Stspin220_ExitDeviceFromStandby+0x1e>
  devicePrm.motionState = INACTIVE;
 8002afa:	2308      	movs	r3, #8
 8002afc:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
 8002b00:	bd70      	pop	{r4, r5, r6, pc}
  if ((devicePrm.motionState == INACTIVE)||\
 8002b02:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d029      	beq.n	8002b5e <Stspin220_ExitDeviceFromStandby+0x7a>
      (devicePrm.motionState == STANDBY))
 8002b0a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((devicePrm.motionState == INACTIVE)||\
 8002b0e:	2b09      	cmp	r3, #9
 8002b10:	d025      	beq.n	8002b5e <Stspin220_ExitDeviceFromStandby+0x7a>
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
 8002b12:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002b16:	07db      	lsls	r3, r3, #31
 8002b18:	d505      	bpl.n	8002b26 <Stspin220_ExitDeviceFromStandby+0x42>
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
 8002b1a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002b1e:	f043 0308 	orr.w	r3, r3, #8
 8002b22:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    devicePrm.motionState = STANDBYTOINACTIVE;
 8002b26:	230a      	movs	r3, #10
 8002b28:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    toggleOdd = 0;
 8002b2c:	4d10      	ldr	r5, [pc, #64]	; (8002b70 <Stspin220_ExitDeviceFromStandby+0x8c>)
    Stspin220_Board_TimStckInit();
 8002b2e:	f000 fd31 	bl	8003594 <Stspin220_Board_TimStckInit>
    Stspin220_Board_TimStckCompareInit();
 8002b32:	f000 fca5 	bl	8003480 <Stspin220_Board_TimStckCompareInit>
    Stspin220_Board_TimStckSetFreq(STSPIN220_MAX_STCK_FREQ);
 8002b36:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002b74 <Stspin220_ExitDeviceFromStandby+0x90>
 8002b3a:	f000 fcab 	bl	8003494 <Stspin220_Board_TimStckSetFreq>
    toggleOdd = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	702b      	strb	r3, [r5, #0]
    Stspin220_Board_TimStckStart();
 8002b42:	f000 fc87 	bl	8003454 <Stspin220_Board_TimStckStart>
    while (devicePrm.sequencerPosition != 0);
 8002b46:	8923      	ldrh	r3, [r4, #8]
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1fb      	bne.n	8002b46 <Stspin220_ExitDeviceFromStandby+0x62>
    while (toggleOdd!=0);
 8002b4e:	782b      	ldrb	r3, [r5, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1fc      	bne.n	8002b4e <Stspin220_ExitDeviceFromStandby+0x6a>
  devicePrm.motionState = INACTIVE;
 8002b54:	2308      	movs	r3, #8
    devicePrm.sequencerPosition = sequencerPosition;    
 8002b56:	8126      	strh	r6, [r4, #8]
  devicePrm.motionState = INACTIVE;
 8002b58:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}
    devicePrm.direction = dir;
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
    Stspin220_Board_SetDirectionGpio(dir);
 8002b64:	f000 fd82 	bl	800366c <Stspin220_Board_SetDirectionGpio>
 8002b68:	e7dd      	b.n	8002b26 <Stspin220_ExitDeviceFromStandby+0x42>
 8002b6a:	bf00      	nop
 8002b6c:	200015e8 	.word	0x200015e8
 8002b70:	20001643 	.word	0x20001643
 8002b74:	461c4000 	.word	0x461c4000

08002b78 <Stspin220_SetDeviceParamsToGivenValues>:
{
 8002b78:	b530      	push	{r4, r5, lr}
  devicePrm.motionState = STANDBY;;
 8002b7a:	4ca0      	ldr	r4, [pc, #640]	; (8002dfc <Stspin220_SetDeviceParamsToGivenValues+0x284>)
 8002b7c:	2309      	movs	r3, #9
 8002b7e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
  if (Stspin220_SetAcceleration(0,pInitDevicePrm->acceleration)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_ACCELERATION); 
 8002b82:	edd0 7a00 	vldr	s15, [r0]
  if ((newAcc != 0)&&
 8002b86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002b8e:	b083      	sub	sp, #12
 8002b90:	4605      	mov	r5, r0
  if ((newAcc != 0)&&
 8002b92:	d018      	beq.n	8002bc6 <Stspin220_SetDeviceParamsToGivenValues+0x4e>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8002b94:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((newAcc != 0)&&
 8002b98:	0718      	lsls	r0, r3, #28
 8002b9a:	d510      	bpl.n	8002bbe <Stspin220_SetDeviceParamsToGivenValues+0x46>
    devicePrm.acceleration = newAcc;
 8002b9c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
  if (Stspin220_SetDeceleration(0,pInitDevicePrm->deceleration)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_DECELERATION);
 8002ba0:	edd5 7a01 	vldr	s15, [r5, #4]
  if ((newDec != 0)&& 
 8002ba4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	d018      	beq.n	8002be0 <Stspin220_SetDeviceParamsToGivenValues+0x68>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8002bae:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((newDec != 0)&& 
 8002bb2:	071a      	lsls	r2, r3, #28
 8002bb4:	f140 8100 	bpl.w	8002db8 <Stspin220_SetDeviceParamsToGivenValues+0x240>
    devicePrm.deceleration = newDec;
 8002bb8:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  return cmdExecuted;
 8002bbc:	e016      	b.n	8002bec <Stspin220_SetDeviceParamsToGivenValues+0x74>
       ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 8002bbe:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8002bc2:	07d9      	lsls	r1, r3, #31
 8002bc4:	d4ea      	bmi.n	8002b9c <Stspin220_SetDeviceParamsToGivenValues+0x24>
  if (errorHandlerCallback != 0)
 8002bc6:	4b8e      	ldr	r3, [pc, #568]	; (8002e00 <Stspin220_SetDeviceParamsToGivenValues+0x288>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b373      	cbz	r3, 8002c2a <Stspin220_SetDeviceParamsToGivenValues+0xb2>
    (void) errorHandlerCallback(error);
 8002bcc:	f24a 0003 	movw	r0, #40963	; 0xa003
 8002bd0:	4798      	blx	r3
  if (Stspin220_SetDeceleration(0,pInitDevicePrm->deceleration)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_DECELERATION);
 8002bd2:	edd5 7a01 	vldr	s15, [r5, #4]
  if ((newDec != 0)&& 
 8002bd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bde:	d1e6      	bne.n	8002bae <Stspin220_SetDeviceParamsToGivenValues+0x36>
  if (errorHandlerCallback != 0)
 8002be0:	4b87      	ldr	r3, [pc, #540]	; (8002e00 <Stspin220_SetDeviceParamsToGivenValues+0x288>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b313      	cbz	r3, 8002c2c <Stspin220_SetDeviceParamsToGivenValues+0xb4>
    (void) errorHandlerCallback(error);
 8002be6:	f24a 0004 	movw	r0, #40964	; 0xa004
 8002bea:	4798      	blx	r3
  if (Stspin220_SetMaxSpeed(0,pInitDevicePrm->maxSpeed)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_MAX_SPEED);
 8002bec:	edd5 7a02 	vldr	s15, [r5, #8]
  if ((newMaxSpeed >= STSPIN220_MIN_STCK_FREQ)&&\
 8002bf0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfc:	db29      	blt.n	8002c52 <Stspin220_SetDeviceParamsToGivenValues+0xda>
 8002bfe:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002e04 <Stspin220_SetDeviceParamsToGivenValues+0x28c>
 8002c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d810      	bhi.n	8002c2e <Stspin220_SetDeviceParamsToGivenValues+0xb6>
      (devicePrm.minSpeed <= newMaxSpeed) &&\
 8002c0c:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
        ((newMaxSpeed/(1<<Stspin220_GetStepMode(deviceId)))<= STSPIN220_MAX_STCK_FREQ)))&&\
 8002c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c18:	db1b      	blt.n	8002c52 <Stspin220_SetDeviceParamsToGivenValues+0xda>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||\
 8002c1a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
      (devicePrm.minSpeed <= newMaxSpeed) &&\
 8002c1e:	0718      	lsls	r0, r3, #28
 8002c20:	f140 80df 	bpl.w	8002de2 <Stspin220_SetDeviceParamsToGivenValues+0x26a>
    devicePrm.maxSpeed = newMaxSpeed;
 8002c24:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
  return cmdExecuted;
 8002c28:	e01b      	b.n	8002c62 <Stspin220_SetDeviceParamsToGivenValues+0xea>
    while(1)
 8002c2a:	e7fe      	b.n	8002c2a <Stspin220_SetDeviceParamsToGivenValues+0xb2>
 8002c2c:	e7fe      	b.n	8002c2c <Stspin220_SetDeviceParamsToGivenValues+0xb4>
       ((devicePrm.torqueBoostEnable != FALSE)&&\
 8002c2e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
      ((newMaxSpeed <= STSPIN220_MAX_STCK_FREQ)||\
 8002c32:	b173      	cbz	r3, 8002c52 <Stspin220_SetDeviceParamsToGivenValues+0xda>
  return devicePrm.stepMode;
 8002c34:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
        ((newMaxSpeed/(1<<Stspin220_GetStepMode(deviceId)))<= STSPIN220_MAX_STCK_FREQ)))&&\
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4093      	lsls	r3, r2
 8002c3c:	ee06 3a90 	vmov	s13, r3
 8002c40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002c44:	ee87 6aa6 	vdiv.f32	s12, s15, s13
       ((devicePrm.torqueBoostEnable != FALSE)&&\
 8002c48:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	d9dc      	bls.n	8002c0c <Stspin220_SetDeviceParamsToGivenValues+0x94>
  if (errorHandlerCallback != 0)
 8002c52:	4b6b      	ldr	r3, [pc, #428]	; (8002e00 <Stspin220_SetDeviceParamsToGivenValues+0x288>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 809c 	beq.w	8002d94 <Stspin220_SetDeviceParamsToGivenValues+0x21c>
    (void) errorHandlerCallback(error);
 8002c5c:	f24a 0001 	movw	r0, #40961	; 0xa001
 8002c60:	4798      	blx	r3
  if (Stspin220_SetMinSpeed(0,pInitDevicePrm->minSpeed)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_MIN_SPEED);
 8002c62:	edd5 7a03 	vldr	s15, [r5, #12]
  if ((newMinSpeed >= STSPIN220_MIN_STCK_FREQ)&&
 8002c66:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	db07      	blt.n	8002c84 <Stspin220_SetDeviceParamsToGivenValues+0x10c>
 8002c74:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002e04 <Stspin220_SetDeviceParamsToGivenValues+0x28c>
 8002c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	f240 80a0 	bls.w	8002dc4 <Stspin220_SetDeviceParamsToGivenValues+0x24c>
  if (errorHandlerCallback != 0)
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <Stspin220_SetDeviceParamsToGivenValues+0x288>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8084 	beq.w	8002d96 <Stspin220_SetDeviceParamsToGivenValues+0x21e>
    (void) errorHandlerCallback(error);
 8002c8e:	f24a 0002 	movw	r0, #40962	; 0xa002
 8002c92:	4798      	blx	r3
  Stspin220_VrefPwmSetFreq(0,pInitDevicePrm->vrefPwmFreq);
 8002c94:	6a28      	ldr	r0, [r5, #32]
  devicePrm.refPwmFreq = newFreq;
 8002c96:	62a0      	str	r0, [r4, #40]	; 0x28
  Stspin220_Board_PwmRefSetFreqAndDutyCycle(newFreq,devicePrm.currentTorque);
 8002c98:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8002c9c:	f000 fc34 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
  Stspin220_SetTorque(0,ACC_TORQUE,pInitDevicePrm->accelTorque);
 8002ca0:	7c2a      	ldrb	r2, [r5, #16]
  devicePrm.updateTorque = TRUE;
 8002ca2:	2a64      	cmp	r2, #100	; 0x64
 8002ca4:	f04f 0301 	mov.w	r3, #1
 8002ca8:	bf28      	it	cs
 8002caa:	2264      	movcs	r2, #100	; 0x64
 8002cac:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.accelTorque = torqueValue;
 8002cb0:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
  Stspin220_SetTorque(0,DEC_TORQUE,pInitDevicePrm->decelTorque);
 8002cb4:	7c6a      	ldrb	r2, [r5, #17]
  devicePrm.updateTorque = TRUE;
 8002cb6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if (torqueValue>100) torqueValue = 100;
 8002cba:	2a64      	cmp	r2, #100	; 0x64
 8002cbc:	bf28      	it	cs
 8002cbe:	2264      	movcs	r2, #100	; 0x64
      devicePrm.decelTorque = torqueValue;
 8002cc0:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  Stspin220_SetTorque(0,RUN_TORQUE,pInitDevicePrm->runTorque);
 8002cc4:	7caa      	ldrb	r2, [r5, #18]
  devicePrm.updateTorque = TRUE;
 8002cc6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if (torqueValue>100) torqueValue = 100;
 8002cca:	2a64      	cmp	r2, #100	; 0x64
 8002ccc:	bf28      	it	cs
 8002cce:	2264      	movcs	r2, #100	; 0x64
      devicePrm.runTorque = torqueValue;
 8002cd0:	f884 2020 	strb.w	r2, [r4, #32]
  Stspin220_SetTorque(0,HOLD_TORQUE,pInitDevicePrm->holdTorque);
 8002cd4:	7ce9      	ldrb	r1, [r5, #19]
  devicePrm.updateTorque = TRUE;
 8002cd6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if (torqueValue>100) torqueValue = 100;
 8002cda:	2964      	cmp	r1, #100	; 0x64
 8002cdc:	bf28      	it	cs
 8002cde:	2164      	movcs	r1, #100	; 0x64
      devicePrm.holdTorque = torqueValue;
 8002ce0:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
      if (devicePrm.motionState != INACTIVE)
 8002ce4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d107      	bne.n	8002cfc <Stspin220_SetDeviceParamsToGivenValues+0x184>
      devicePrm.currentTorque = torqueValue;
 8002cec:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 8002cf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002cf2:	f000 fc09 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
      devicePrm.updateTorque = FALSE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  devicePrm.torqueBoostEnable = pInitDevicePrm->torqueBoostEnable;
 8002cfc:	7d2b      	ldrb	r3, [r5, #20]
  devicePrm.torqueBoostSpeedThreshold = pInitDevicePrm->torqueBoostSpeedThreshold;
 8002cfe:	69aa      	ldr	r2, [r5, #24]
  devicePrm.torqueBoostEnable = pInitDevicePrm->torqueBoostEnable;
 8002d00:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  devicePrm.speed = 0;
 8002d04:	2100      	movs	r1, #0
  devicePrm.torqueBoostSpeedThreshold = pInitDevicePrm->torqueBoostSpeedThreshold;
 8002d06:	6322      	str	r2, [r4, #48]	; 0x30
  devicePrm.accu = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6023      	str	r3, [r4, #0]
  devicePrm.stopMode = stopMode;
 8002d0c:	7f6a      	ldrb	r2, [r5, #29]
  devicePrm.currentPosition = 0;
 8002d0e:	6063      	str	r3, [r4, #4]
  devicePrm.sequencerPosition = 0;
 8002d10:	8123      	strh	r3, [r4, #8]
  devicePrm.endAccPos = 0;
 8002d12:	6123      	str	r3, [r4, #16]
  devicePrm.relativePos = 0;
 8002d14:	6163      	str	r3, [r4, #20]
  devicePrm.startDecPos = 0;
 8002d16:	61a3      	str	r3, [r4, #24]
  devicePrm.updateTorque = FALSE;
 8002d18:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  devicePrm.speed = 0;
 8002d1c:	6461      	str	r1, [r4, #68]	; 0x44
  devicePrm.commandExecuted = NO_CMD;
 8002d1e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  devicePrm.direction = FORWARD;
 8002d22:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
  tmp = devicePrm.minSpeed;
 8002d26:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
  devicePrm.stopMode = stopMode;
 8002d2a:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
  tmp = devicePrm.minSpeed;
 8002d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  devicePrm.stepsToTake = 0;
 8002d32:	61e3      	str	r3, [r4, #28]
  if (((devicePrm.torqueBoostEnable != FALSE)&&\
 8002d34:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
  tmp = devicePrm.minSpeed;
 8002d38:	ee17 3a90 	vmov	r3, s15
 8002d3c:	b29b      	uxth	r3, r3
  if (((devicePrm.torqueBoostEnable != FALSE)&&\
 8002d3e:	b35a      	cbz	r2, 8002d98 <Stspin220_SetDeviceParamsToGivenValues+0x220>
       (devicePrm.torqueBoostSpeedThreshold>STSPIN220_MAX_STCK_FREQ))||\
 8002d40:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
  if (((devicePrm.torqueBoostEnable != FALSE)&&\
 8002d44:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8002e04 <Stspin220_SetDeviceParamsToGivenValues+0x28c>
 8002d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	dd22      	ble.n	8002d98 <Stspin220_SetDeviceParamsToGivenValues+0x220>
  if (errorHandlerCallback != 0)
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <Stspin220_SetDeviceParamsToGivenValues+0x288>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b373      	cbz	r3, 8002db6 <Stspin220_SetDeviceParamsToGivenValues+0x23e>
    (void) errorHandlerCallback(error);
 8002d58:	f24a 0009 	movw	r0, #40969	; 0xa009
 8002d5c:	4798      	blx	r3
  if ((devicePrm.motionState != INACTIVE)&&\
 8002d5e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  Stspin220_SetStepMode(0, pInitDevicePrm->stepMode);
 8002d62:	7f29      	ldrb	r1, [r5, #28]
  if ((devicePrm.motionState != INACTIVE)&&\
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d008      	beq.n	8002d7a <Stspin220_SetDeviceParamsToGivenValues+0x202>
      (devicePrm.motionState != STANDBY))
 8002d68:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((devicePrm.motionState != INACTIVE)&&\
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d004      	beq.n	8002d7a <Stspin220_SetDeviceParamsToGivenValues+0x202>
    Stspin220_HardHiZ(deviceId);
 8002d70:	2000      	movs	r0, #0
 8002d72:	9101      	str	r1, [sp, #4]
 8002d74:	f7ff f8d0 	bl	8001f18 <Stspin220_HardHiZ>
 8002d78:	9901      	ldr	r1, [sp, #4]
 8002d7a:	9101      	str	r1, [sp, #4]
  Stspin220_Board_Reset();
 8002d7c:	f000 fc6e 	bl	800365c <Stspin220_Board_Reset>
  return (Stspin220_SetStepModeWithoutReset(deviceId, stepMode));
 8002d80:	9901      	ldr	r1, [sp, #4]
  devicePrm.sequencerPosition = 0;
 8002d82:	2000      	movs	r0, #0
 8002d84:	8120      	strh	r0, [r4, #8]
  devicePrm.currentPosition = 0; 
 8002d86:	6060      	str	r0, [r4, #4]
  devicePrm.markPosition = 0;
 8002d88:	60e0      	str	r0, [r4, #12]
}
 8002d8a:	b003      	add	sp, #12
 8002d8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return (Stspin220_SetStepModeWithoutReset(deviceId, stepMode));
 8002d90:	f7ff be46 	b.w	8002a20 <Stspin220_SetStepModeWithoutReset>
    while(1)
 8002d94:	e7fe      	b.n	8002d94 <Stspin220_SetDeviceParamsToGivenValues+0x21c>
 8002d96:	e7fe      	b.n	8002d96 <Stspin220_SetDeviceParamsToGivenValues+0x21e>
      (tmp>devicePrm.maxSpeed))
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8002da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
       (devicePrm.torqueBoostSpeedThreshold>STSPIN220_MAX_STCK_FREQ))||\
 8002da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	ddd7      	ble.n	8002d5e <Stspin220_SetDeviceParamsToGivenValues+0x1e6>
  if (errorHandlerCallback != 0)
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <Stspin220_SetDeviceParamsToGivenValues+0x288>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1d0      	bne.n	8002d58 <Stspin220_SetDeviceParamsToGivenValues+0x1e0>
    while(1)
 8002db6:	e7fe      	b.n	8002db6 <Stspin220_SetDeviceParamsToGivenValues+0x23e>
       ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 8002db8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8002dbc:	07db      	lsls	r3, r3, #31
 8002dbe:	f57f af0f 	bpl.w	8002be0 <Stspin220_SetDeviceParamsToGivenValues+0x68>
 8002dc2:	e6f9      	b.n	8002bb8 <Stspin220_SetDeviceParamsToGivenValues+0x40>
      (newMinSpeed <= devicePrm.maxSpeed) && 
 8002dc4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
      (newMinSpeed <= STSPIN220_MAX_STCK_FREQ) &&
 8002dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd0:	f63f af58 	bhi.w	8002c84 <Stspin220_SetDeviceParamsToGivenValues+0x10c>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8002dd4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
      (newMinSpeed <= devicePrm.maxSpeed) && 
 8002dd8:	071a      	lsls	r2, r3, #28
 8002dda:	d508      	bpl.n	8002dee <Stspin220_SetDeviceParamsToGivenValues+0x276>
    devicePrm.minSpeed = newMinSpeed;
 8002ddc:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
  return cmdExecuted;
 8002de0:	e758      	b.n	8002c94 <Stspin220_SetDeviceParamsToGivenValues+0x11c>
      ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 8002de2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||\
 8002de6:	07d9      	lsls	r1, r3, #31
 8002de8:	f57f af33 	bpl.w	8002c52 <Stspin220_SetDeviceParamsToGivenValues+0xda>
 8002dec:	e71a      	b.n	8002c24 <Stspin220_SetDeviceParamsToGivenValues+0xac>
       ((devicePrm.commandExecuted&RUN_CMD) != 0)))
 8002dee:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8002df2:	07db      	lsls	r3, r3, #31
 8002df4:	f57f af46 	bpl.w	8002c84 <Stspin220_SetDeviceParamsToGivenValues+0x10c>
 8002df8:	e7f0      	b.n	8002ddc <Stspin220_SetDeviceParamsToGivenValues+0x264>
 8002dfa:	bf00      	nop
 8002dfc:	200015e8 	.word	0x200015e8
 8002e00:	20001638 	.word	0x20001638
 8002e04:	461c4000 	.word	0x461c4000

08002e08 <Stspin220_Init>:
  stspin220DriverInstance++;
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <Stspin220_Init+0x2c>)
 8002e0a:	8813      	ldrh	r3, [r2, #0]
{
 8002e0c:	b510      	push	{r4, lr}
  stspin220DriverInstance++;
 8002e0e:	3301      	adds	r3, #1
{
 8002e10:	4604      	mov	r4, r0
  stspin220DriverInstance++;
 8002e12:	8013      	strh	r3, [r2, #0]
  Stspin220_Board_GpioInit();
 8002e14:	f000 faa0 	bl	8003358 <Stspin220_Board_GpioInit>
  Stspin220_Board_TimStckInit();
 8002e18:	f000 fbbc 	bl	8003594 <Stspin220_Board_TimStckInit>
  Stspin220_Board_PwmRefInit();
 8002e1c:	f000 fb96 	bl	800354c <Stspin220_Board_PwmRefInit>
  if (pInit == 0)
 8002e20:	b124      	cbz	r4, 8002e2c <Stspin220_Init+0x24>
    Stspin220_SetDeviceParamsToGivenValues((Stspin220_Init_t*) pInit);
 8002e22:	4620      	mov	r0, r4
}
 8002e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Stspin220_SetDeviceParamsToGivenValues((Stspin220_Init_t*) pInit);
 8002e28:	f7ff bea6 	b.w	8002b78 <Stspin220_SetDeviceParamsToGivenValues>
}
 8002e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Stspin220_SetDeviceParamsToPredefinedValues();
 8002e30:	f7ff bcee 	b.w	8002810 <Stspin220_SetDeviceParamsToPredefinedValues>
 8002e34:	20001640 	.word	0x20001640

08002e38 <Stspin220_StartMovement>:
{
 8002e38:	b510      	push	{r4, lr}
  Stspin220_Board_Enable();
 8002e3a:	f000 fc47 	bl	80036cc <Stspin220_Board_Enable>
  devicePrm.accu = 0;
 8002e3e:	4c19      	ldr	r4, [pc, #100]	; (8002ea4 <Stspin220_StartMovement+0x6c>)
  toggleOdd = 0;
 8002e40:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <Stspin220_StartMovement+0x70>)
 8002e42:	2300      	movs	r3, #0
 8002e44:	7013      	strb	r3, [r2, #0]
  devicePrm.accu = 0;
 8002e46:	6023      	str	r3, [r4, #0]
  devicePrm.relativePos = 0;  
 8002e48:	6163      	str	r3, [r4, #20]
  if ((devicePrm.endAccPos == 0)&&\
 8002e4a:	6923      	ldr	r3, [r4, #16]
 8002e4c:	b91b      	cbnz	r3, 8002e56 <Stspin220_StartMovement+0x1e>
      (devicePrm.commandExecuted != RUN_CMD))
 8002e4e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  if ((devicePrm.endAccPos == 0)&&\
 8002e52:	2a01      	cmp	r2, #1
 8002e54:	d11d      	bne.n	8002e92 <Stspin220_StartMovement+0x5a>
    devicePrm.motionState = ACCELERATING;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
  devicePrm.updateTorque = FALSE;
 8002e5c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = devicePrm.accelTorque;
 8002e60:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  torqueValue = devicePrm.currentTorque;
 8002e6a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
  Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 8002e6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e70:	f000 fb4a 	bl	8003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
  Stspin220_Board_PwmRefStart();
 8002e74:	f000 fb3c 	bl	80034f0 <Stspin220_Board_PwmRefStart>
  Stspin220_Board_TimStckInit();
 8002e78:	f000 fb8c 	bl	8003594 <Stspin220_Board_TimStckInit>
  Stspin220_Board_TimStckCompareInit();
 8002e7c:	f000 fb00 	bl	8003480 <Stspin220_Board_TimStckCompareInit>
  Stspin220_ApplySpeed(deviceId, devicePrm.minSpeed);
 8002e80:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7ff f951 	bl	800212c <Stspin220_ApplySpeed>
}
 8002e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Stspin220_Board_TimStckStart();
 8002e8e:	f000 bae1 	b.w	8003454 <Stspin220_Board_TimStckStart>
    devicePrm.motionState = DECELERATING;
 8002e92:	2202      	movs	r2, #2
 8002e94:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
  devicePrm.updateTorque = FALSE;
 8002e98:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      devicePrm.currentTorque = devicePrm.decelTorque;
 8002e9c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002ea0:	e7e0      	b.n	8002e64 <Stspin220_StartMovement+0x2c>
 8002ea2:	bf00      	nop
 8002ea4:	200015e8 	.word	0x200015e8
 8002ea8:	20001643 	.word	0x20001643

08002eac <Stspin220_GoTo>:
{
 8002eac:	b538      	push	{r3, r4, r5, lr}
  if (devicePrm.motionState == STANDBY)
 8002eae:	4d28      	ldr	r5, [pc, #160]	; (8002f50 <Stspin220_GoTo+0xa4>)
 8002eb0:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8002eb4:	2b09      	cmp	r3, #9
{
 8002eb6:	460c      	mov	r4, r1
  if (devicePrm.motionState == STANDBY)
 8002eb8:	d040      	beq.n	8002f3c <Stspin220_GoTo+0x90>
  else if (devicePrm.motionState != INACTIVE)
 8002eba:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d130      	bne.n	8002f24 <Stspin220_GoTo+0x78>
  if (targetPosition > devicePrm.currentPosition)
 8002ec2:	686b      	ldr	r3, [r5, #4]
                                      devicePrm.currentPosition;
 8002ec4:	6869      	ldr	r1, [r5, #4]
  if (targetPosition > devicePrm.currentPosition)
 8002ec6:	42a3      	cmp	r3, r4
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 8002ec8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  if (targetPosition > devicePrm.currentPosition)
 8002ecc:	da06      	bge.n	8002edc <Stspin220_GoTo+0x30>
    devicePrm.stepsToTake = targetPosition -\
 8002ece:	1a61      	subs	r1, r4, r1
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	d22f      	bcs.n	8002f34 <Stspin220_GoTo+0x88>
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 8002ed4:	61e9      	str	r1, [r5, #28]
      direction = FORWARD; 
 8002ed6:	2000      	movs	r0, #0
  if (devicePrm.stepsToTake != 0) 
 8002ed8:	b939      	cbnz	r1, 8002eea <Stspin220_GoTo+0x3e>
}
 8002eda:	bd38      	pop	{r3, r4, r5, pc}
    devicePrm.stepsToTake = devicePrm.currentPosition -\
 8002edc:	1b09      	subs	r1, r1, r4
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 8002ede:	4299      	cmp	r1, r3
 8002ee0:	d224      	bcs.n	8002f2c <Stspin220_GoTo+0x80>
    devicePrm.stepsToTake = devicePrm.currentPosition -\
 8002ee2:	61e9      	str	r1, [r5, #28]
      direction = BACKWARD;
 8002ee4:	2001      	movs	r0, #1
  if (devicePrm.stepsToTake != 0) 
 8002ee6:	2900      	cmp	r1, #0
 8002ee8:	d0f7      	beq.n	8002eda <Stspin220_GoTo+0x2e>
    devicePrm.commandExecuted = MOVE_CMD;
 8002eea:	2302      	movs	r3, #2
 8002eec:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
  if ((devicePrm.motionState == INACTIVE)||\
 8002ef0:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d025      	beq.n	8002f44 <Stspin220_GoTo+0x98>
      (devicePrm.motionState == STANDBY))
 8002ef8:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
  if ((devicePrm.motionState == INACTIVE)||\
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	d021      	beq.n	8002f44 <Stspin220_GoTo+0x98>
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
 8002f00:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8002f04:	07db      	lsls	r3, r3, #31
 8002f06:	d505      	bpl.n	8002f14 <Stspin220_GoTo+0x68>
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
 8002f08:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7ff fc0b 	bl	8002730 <Stspin220_ComputeSpeedProfile>
}
 8002f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Stspin220_StartMovement(deviceId);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7ff bf8a 	b.w	8002e38 <Stspin220_StartMovement>
    Stspin220_HardHiZ(deviceId);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fe fff7 	bl	8001f18 <Stspin220_HardHiZ>
 8002f2a:	e7ca      	b.n	8002ec2 <Stspin220_GoTo+0x16>
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 8002f2c:	43c9      	mvns	r1, r1
 8002f2e:	61e9      	str	r1, [r5, #28]
      direction = FORWARD; 
 8002f30:	2000      	movs	r0, #0
 8002f32:	e7d1      	b.n	8002ed8 <Stspin220_GoTo+0x2c>
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 8002f34:	43c9      	mvns	r1, r1
 8002f36:	61e9      	str	r1, [r5, #28]
      direction = BACKWARD;
 8002f38:	2001      	movs	r0, #1
 8002f3a:	e7cd      	b.n	8002ed8 <Stspin220_GoTo+0x2c>
    Stspin220_ExitDeviceFromStandby(deviceId);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff fdd1 	bl	8002ae4 <Stspin220_ExitDeviceFromStandby>
 8002f42:	e7be      	b.n	8002ec2 <Stspin220_GoTo+0x16>
    devicePrm.direction = dir;
 8002f44:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
    Stspin220_Board_SetDirectionGpio(dir);
 8002f48:	f000 fb90 	bl	800366c <Stspin220_Board_SetDirectionGpio>
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 8002f4c:	69e9      	ldr	r1, [r5, #28]
    Stspin220_Board_SetDirectionGpio(dir);
 8002f4e:	e7e1      	b.n	8002f14 <Stspin220_GoTo+0x68>
 8002f50:	200015e8 	.word	0x200015e8

08002f54 <Stspin220_GoToDir>:
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
  if (devicePrm.motionState == STANDBY)
 8002f56:	4d2a      	ldr	r5, [pc, #168]	; (8003000 <Stspin220_GoToDir+0xac>)
 8002f58:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8002f5c:	2b09      	cmp	r3, #9
{
 8002f5e:	460e      	mov	r6, r1
 8002f60:	4614      	mov	r4, r2
  if (devicePrm.motionState == STANDBY)
 8002f62:	d03d      	beq.n	8002fe0 <Stspin220_GoToDir+0x8c>
  else if (devicePrm.motionState != INACTIVE)
 8002f64:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d109      	bne.n	8002f80 <Stspin220_GoToDir+0x2c>
  if (direction != BACKWARD)
 8002f6c:	2e01      	cmp	r6, #1
    if (targetPosition > devicePrm.currentPosition)
 8002f6e:	686b      	ldr	r3, [r5, #4]
  if (direction != BACKWARD)
 8002f70:	d00c      	beq.n	8002f8c <Stspin220_GoToDir+0x38>
    if (targetPosition > devicePrm.currentPosition)
 8002f72:	42a3      	cmp	r3, r4
 8002f74:	da2f      	bge.n	8002fd6 <Stspin220_GoToDir+0x82>
                                        devicePrm.currentPosition;
 8002f76:	6869      	ldr	r1, [r5, #4]
      devicePrm.stepsToTake = targetPosition -\
 8002f78:	1a61      	subs	r1, r4, r1
 8002f7a:	61e9      	str	r1, [r5, #28]
  if (devicePrm.stepsToTake != 0) 
 8002f7c:	b971      	cbnz	r1, 8002f9c <Stspin220_GoToDir+0x48>
}
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
    Stspin220_HardHiZ(deviceId);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe ffc9 	bl	8001f18 <Stspin220_HardHiZ>
  if (direction != BACKWARD)
 8002f86:	2e01      	cmp	r6, #1
    if (targetPosition > devicePrm.currentPosition)
 8002f88:	686b      	ldr	r3, [r5, #4]
  if (direction != BACKWARD)
 8002f8a:	d1f2      	bne.n	8002f72 <Stspin220_GoToDir+0x1e>
    if (targetPosition > devicePrm.currentPosition)
 8002f8c:	42a3      	cmp	r3, r4
 8002f8e:	da2b      	bge.n	8002fe8 <Stspin220_GoToDir+0x94>
                                        (devicePrm.currentPosition -\
 8002f90:	686a      	ldr	r2, [r5, #4]
 8002f92:	1b12      	subs	r2, r2, r4
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE +\
 8002f94:	1e51      	subs	r1, r2, #1
 8002f96:	61e9      	str	r1, [r5, #28]
  if (devicePrm.stepsToTake != 0) 
 8002f98:	2900      	cmp	r1, #0
 8002f9a:	d0f0      	beq.n	8002f7e <Stspin220_GoToDir+0x2a>
    devicePrm.commandExecuted = MOVE_CMD;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
  if ((devicePrm.motionState == INACTIVE)||\
 8002fa2:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d022      	beq.n	8002ff0 <Stspin220_GoToDir+0x9c>
      (devicePrm.motionState == STANDBY))
 8002faa:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
  if ((devicePrm.motionState == INACTIVE)||\
 8002fae:	2b09      	cmp	r3, #9
 8002fb0:	d01e      	beq.n	8002ff0 <Stspin220_GoToDir+0x9c>
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
 8002fb2:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8002fb6:	07db      	lsls	r3, r3, #31
 8002fb8:	d505      	bpl.n	8002fc6 <Stspin220_GoToDir+0x72>
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
 8002fba:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8002fbe:	f043 0308 	orr.w	r3, r3, #8
 8002fc2:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7ff fbb2 	bl	8002730 <Stspin220_ComputeSpeedProfile>
}
 8002fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Stspin220_StartMovement(deviceId);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7ff bf31 	b.w	8002e38 <Stspin220_StartMovement>
                                        devicePrm.currentPosition);
 8002fd6:	686a      	ldr	r2, [r5, #4]
                                       (targetPosition -\
 8002fd8:	1aa2      	subs	r2, r4, r2
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE +\
 8002fda:	1e51      	subs	r1, r2, #1
 8002fdc:	61e9      	str	r1, [r5, #28]
 8002fde:	e7cd      	b.n	8002f7c <Stspin220_GoToDir+0x28>
    Stspin220_ExitDeviceFromStandby(deviceId);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7ff fd7f 	bl	8002ae4 <Stspin220_ExitDeviceFromStandby>
 8002fe6:	e7c1      	b.n	8002f6c <Stspin220_GoToDir+0x18>
      devicePrm.stepsToTake = devicePrm.currentPosition -\
 8002fe8:	6869      	ldr	r1, [r5, #4]
 8002fea:	1b09      	subs	r1, r1, r4
 8002fec:	61e9      	str	r1, [r5, #28]
 8002fee:	e7c5      	b.n	8002f7c <Stspin220_GoToDir+0x28>
    Stspin220_Board_SetDirectionGpio(dir);
 8002ff0:	4630      	mov	r0, r6
    devicePrm.direction = dir;
 8002ff2:	f885 6049 	strb.w	r6, [r5, #73]	; 0x49
    Stspin220_Board_SetDirectionGpio(dir);
 8002ff6:	f000 fb39 	bl	800366c <Stspin220_Board_SetDirectionGpio>
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 8002ffa:	69e9      	ldr	r1, [r5, #28]
    Stspin220_Board_SetDirectionGpio(dir);
 8002ffc:	e7e3      	b.n	8002fc6 <Stspin220_GoToDir+0x72>
 8002ffe:	bf00      	nop
 8003000:	200015e8 	.word	0x200015e8

08003004 <Stspin220_Move>:
{
 8003004:	b570      	push	{r4, r5, r6, lr}
  if (devicePrm.motionState == STANDBY)
 8003006:	4d1d      	ldr	r5, [pc, #116]	; (800307c <Stspin220_Move+0x78>)
 8003008:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 800300c:	2b09      	cmp	r3, #9
{
 800300e:	460e      	mov	r6, r1
 8003010:	4614      	mov	r4, r2
  if (devicePrm.motionState == STANDBY)
 8003012:	d029      	beq.n	8003068 <Stspin220_Move+0x64>
  else if (devicePrm.motionState != INACTIVE)
 8003014:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8003018:	2b08      	cmp	r3, #8
 800301a:	d101      	bne.n	8003020 <Stspin220_Move+0x1c>
  if (stepCount != 0) 
 800301c:	b92c      	cbnz	r4, 800302a <Stspin220_Move+0x26>
}
 800301e:	bd70      	pop	{r4, r5, r6, pc}
    Stspin220_HardHiZ(deviceId);
 8003020:	2000      	movs	r0, #0
 8003022:	f7fe ff79 	bl	8001f18 <Stspin220_HardHiZ>
  if (stepCount != 0) 
 8003026:	2c00      	cmp	r4, #0
 8003028:	d0f9      	beq.n	800301e <Stspin220_Move+0x1a>
    devicePrm.commandExecuted = MOVE_CMD;
 800302a:	2302      	movs	r3, #2
 800302c:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
  if ((devicePrm.motionState == INACTIVE)||\
 8003030:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
    devicePrm.stepsToTake = stepCount;    
 8003034:	61ec      	str	r4, [r5, #28]
  if ((devicePrm.motionState == INACTIVE)||\
 8003036:	2b08      	cmp	r3, #8
 8003038:	d01a      	beq.n	8003070 <Stspin220_Move+0x6c>
      (devicePrm.motionState == STANDBY))
 800303a:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
  if ((devicePrm.motionState == INACTIVE)||\
 800303e:	2b09      	cmp	r3, #9
 8003040:	d016      	beq.n	8003070 <Stspin220_Move+0x6c>
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
 8003042:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8003046:	07db      	lsls	r3, r3, #31
 8003048:	d505      	bpl.n	8003056 <Stspin220_Move+0x52>
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
 800304a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 800304e:	f043 0308 	orr.w	r3, r3, #8
 8003052:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
    Stspin220_ComputeSpeedProfile(deviceId, stepCount);
 8003056:	2000      	movs	r0, #0
 8003058:	4621      	mov	r1, r4
 800305a:	f7ff fb69 	bl	8002730 <Stspin220_ComputeSpeedProfile>
}
 800305e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Stspin220_StartMovement(deviceId);
 8003062:	2000      	movs	r0, #0
 8003064:	f7ff bee8 	b.w	8002e38 <Stspin220_StartMovement>
    Stspin220_ExitDeviceFromStandby(deviceId);
 8003068:	2000      	movs	r0, #0
 800306a:	f7ff fd3b 	bl	8002ae4 <Stspin220_ExitDeviceFromStandby>
 800306e:	e7d5      	b.n	800301c <Stspin220_Move+0x18>
    Stspin220_Board_SetDirectionGpio(dir);
 8003070:	4630      	mov	r0, r6
    devicePrm.direction = dir;
 8003072:	f885 6049 	strb.w	r6, [r5, #73]	; 0x49
    Stspin220_Board_SetDirectionGpio(dir);
 8003076:	f000 faf9 	bl	800366c <Stspin220_Board_SetDirectionGpio>
 800307a:	e7ec      	b.n	8003056 <Stspin220_Move+0x52>
 800307c:	200015e8 	.word	0x200015e8

08003080 <Stspin220_Run>:
{
 8003080:	b570      	push	{r4, r5, r6, lr}
  if (devicePrm.motionState == STANDBY)
 8003082:	4c1a      	ldr	r4, [pc, #104]	; (80030ec <Stspin220_Run+0x6c>)
 8003084:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8003088:	2b09      	cmp	r3, #9
{
 800308a:	4605      	mov	r5, r0
 800308c:	460e      	mov	r6, r1
  if (devicePrm.motionState == STANDBY)
 800308e:	d029      	beq.n	80030e4 <Stspin220_Run+0x64>
  else if (devicePrm.motionState != INACTIVE)
 8003090:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8003094:	2b08      	cmp	r3, #8
 8003096:	d119      	bne.n	80030cc <Stspin220_Run+0x4c>
  if ((devicePrm.motionState == INACTIVE)||\
 8003098:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800309c:	2b08      	cmp	r3, #8
 800309e:	d01b      	beq.n	80030d8 <Stspin220_Run+0x58>
      (devicePrm.motionState == STANDBY))
 80030a0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((devicePrm.motionState == INACTIVE)||\
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	d017      	beq.n	80030d8 <Stspin220_Run+0x58>
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
 80030a8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80030ac:	07db      	lsls	r3, r3, #31
 80030ae:	d505      	bpl.n	80030bc <Stspin220_Run+0x3c>
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
 80030b0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	devicePrm.commandExecuted = RUN_CMD;
 80030bc:	2301      	movs	r3, #1
	Stspin220_StartMovement(deviceId); 
 80030be:	4628      	mov	r0, r5
	devicePrm.commandExecuted = RUN_CMD;
 80030c0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 80030c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Stspin220_StartMovement(deviceId); 
 80030c8:	f7ff beb6 	b.w	8002e38 <Stspin220_StartMovement>
    Stspin220_HardHiZ(deviceId);
 80030cc:	f7fe ff24 	bl	8001f18 <Stspin220_HardHiZ>
  if ((devicePrm.motionState == INACTIVE)||\
 80030d0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d1e3      	bne.n	80030a0 <Stspin220_Run+0x20>
    Stspin220_Board_SetDirectionGpio(dir);
 80030d8:	4630      	mov	r0, r6
    devicePrm.direction = dir;
 80030da:	f884 6049 	strb.w	r6, [r4, #73]	; 0x49
    Stspin220_Board_SetDirectionGpio(dir);
 80030de:	f000 fac5 	bl	800366c <Stspin220_Board_SetDirectionGpio>
 80030e2:	e7eb      	b.n	80030bc <Stspin220_Run+0x3c>
    Stspin220_ExitDeviceFromStandby(deviceId);
 80030e4:	f7ff fcfe 	bl	8002ae4 <Stspin220_ExitDeviceFromStandby>
 80030e8:	e7d6      	b.n	8003098 <Stspin220_Run+0x18>
 80030ea:	bf00      	nop
 80030ec:	200015e8 	.word	0x200015e8

080030f0 <Stspin220_GoHome>:
{
 80030f0:	b510      	push	{r4, lr}
  if (devicePrm.motionState == STANDBY)
 80030f2:	4c29      	ldr	r4, [pc, #164]	; (8003198 <Stspin220_GoHome+0xa8>)
 80030f4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80030f8:	2b09      	cmp	r3, #9
 80030fa:	d042      	beq.n	8003182 <Stspin220_GoHome+0x92>
  else if (devicePrm.motionState != INACTIVE)
 80030fc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8003100:	2b08      	cmp	r3, #8
 8003102:	d132      	bne.n	800316a <Stspin220_GoHome+0x7a>
  if (targetPosition > devicePrm.currentPosition)
 8003104:	6863      	ldr	r3, [r4, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	da09      	bge.n	800311e <Stspin220_GoHome+0x2e>
                                      devicePrm.currentPosition;
 800310a:	6863      	ldr	r3, [r4, #4]
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 800310c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    devicePrm.stepsToTake = targetPosition -\
 8003110:	4259      	negs	r1, r3
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 8003112:	4291      	cmp	r1, r2
 8003114:	d231      	bcs.n	800317a <Stspin220_GoHome+0x8a>
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 8003116:	61e1      	str	r1, [r4, #28]
      direction = FORWARD; 
 8003118:	2000      	movs	r0, #0
  if (devicePrm.stepsToTake != 0) 
 800311a:	b949      	cbnz	r1, 8003130 <Stspin220_GoHome+0x40>
} 
 800311c:	bd10      	pop	{r4, pc}
    devicePrm.stepsToTake = devicePrm.currentPosition -\
 800311e:	6861      	ldr	r1, [r4, #4]
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 8003120:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003124:	4299      	cmp	r1, r3
 8003126:	d224      	bcs.n	8003172 <Stspin220_GoHome+0x82>
    devicePrm.stepsToTake = devicePrm.currentPosition -\
 8003128:	61e1      	str	r1, [r4, #28]
      direction = BACKWARD;
 800312a:	2001      	movs	r0, #1
  if (devicePrm.stepsToTake != 0) 
 800312c:	2900      	cmp	r1, #0
 800312e:	d0f5      	beq.n	800311c <Stspin220_GoHome+0x2c>
    devicePrm.commandExecuted = MOVE_CMD;
 8003130:	2302      	movs	r3, #2
 8003132:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  if ((devicePrm.motionState == INACTIVE)||\
 8003136:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800313a:	2b08      	cmp	r3, #8
 800313c:	d025      	beq.n	800318a <Stspin220_GoHome+0x9a>
      (devicePrm.motionState == STANDBY))
 800313e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
  if ((devicePrm.motionState == INACTIVE)||\
 8003142:	2b09      	cmp	r3, #9
 8003144:	d021      	beq.n	800318a <Stspin220_GoHome+0x9a>
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
 8003146:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800314a:	07db      	lsls	r3, r3, #31
 800314c:	d505      	bpl.n	800315a <Stspin220_GoHome+0x6a>
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
 800314e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8003152:	f043 0308 	orr.w	r3, r3, #8
 8003156:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 800315a:	2000      	movs	r0, #0
 800315c:	f7ff fae8 	bl	8002730 <Stspin220_ComputeSpeedProfile>
} 
 8003160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Stspin220_StartMovement(deviceId);
 8003164:	2000      	movs	r0, #0
 8003166:	f7ff be67 	b.w	8002e38 <Stspin220_StartMovement>
    Stspin220_HardHiZ(deviceId);
 800316a:	2000      	movs	r0, #0
 800316c:	f7fe fed4 	bl	8001f18 <Stspin220_HardHiZ>
 8003170:	e7c8      	b.n	8003104 <Stspin220_GoHome+0x14>
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 8003172:	43c9      	mvns	r1, r1
 8003174:	61e1      	str	r1, [r4, #28]
      direction = FORWARD; 
 8003176:	2000      	movs	r0, #0
 8003178:	e7cf      	b.n	800311a <Stspin220_GoHome+0x2a>
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 800317a:	1e59      	subs	r1, r3, #1
 800317c:	61e1      	str	r1, [r4, #28]
      direction = BACKWARD;
 800317e:	2001      	movs	r0, #1
 8003180:	e7cb      	b.n	800311a <Stspin220_GoHome+0x2a>
    Stspin220_ExitDeviceFromStandby(deviceId);
 8003182:	2000      	movs	r0, #0
 8003184:	f7ff fcae 	bl	8002ae4 <Stspin220_ExitDeviceFromStandby>
 8003188:	e7bc      	b.n	8003104 <Stspin220_GoHome+0x14>
    devicePrm.direction = dir;
 800318a:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
    Stspin220_Board_SetDirectionGpio(dir);
 800318e:	f000 fa6d 	bl	800366c <Stspin220_Board_SetDirectionGpio>
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 8003192:	69e1      	ldr	r1, [r4, #28]
    Stspin220_Board_SetDirectionGpio(dir);
 8003194:	e7e1      	b.n	800315a <Stspin220_GoHome+0x6a>
 8003196:	bf00      	nop
 8003198:	200015e8 	.word	0x200015e8

0800319c <Stspin220_GoMark>:
{
 800319c:	b538      	push	{r3, r4, r5, lr}
	Stspin220_GoTo(deviceId, devicePrm.markPosition);
 800319e:	4d28      	ldr	r5, [pc, #160]	; (8003240 <Stspin220_GoMark+0xa4>)
 80031a0:	68ec      	ldr	r4, [r5, #12]
  if (devicePrm.motionState == STANDBY)
 80031a2:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 80031a6:	2b09      	cmp	r3, #9
 80031a8:	d040      	beq.n	800322c <Stspin220_GoMark+0x90>
  else if (devicePrm.motionState != INACTIVE)
 80031aa:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d130      	bne.n	8003214 <Stspin220_GoMark+0x78>
  if (targetPosition > devicePrm.currentPosition)
 80031b2:	686b      	ldr	r3, [r5, #4]
                                      devicePrm.currentPosition;
 80031b4:	6869      	ldr	r1, [r5, #4]
  if (targetPosition > devicePrm.currentPosition)
 80031b6:	429c      	cmp	r4, r3
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 80031b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  if (targetPosition > devicePrm.currentPosition)
 80031bc:	dd06      	ble.n	80031cc <Stspin220_GoMark+0x30>
    devicePrm.stepsToTake = targetPosition -\
 80031be:	1a61      	subs	r1, r4, r1
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 80031c0:	4299      	cmp	r1, r3
 80031c2:	d22f      	bcs.n	8003224 <Stspin220_GoMark+0x88>
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 80031c4:	61e9      	str	r1, [r5, #28]
      direction = FORWARD; 
 80031c6:	2000      	movs	r0, #0
  if (devicePrm.stepsToTake != 0) 
 80031c8:	b939      	cbnz	r1, 80031da <Stspin220_GoMark+0x3e>
}
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
    devicePrm.stepsToTake = devicePrm.currentPosition -\
 80031cc:	1b09      	subs	r1, r1, r4
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 80031ce:	4299      	cmp	r1, r3
 80031d0:	d224      	bcs.n	800321c <Stspin220_GoMark+0x80>
    devicePrm.stepsToTake = devicePrm.currentPosition -\
 80031d2:	61e9      	str	r1, [r5, #28]
      direction = BACKWARD;
 80031d4:	2001      	movs	r0, #1
  if (devicePrm.stepsToTake != 0) 
 80031d6:	2900      	cmp	r1, #0
 80031d8:	d0f7      	beq.n	80031ca <Stspin220_GoMark+0x2e>
    devicePrm.commandExecuted = MOVE_CMD;
 80031da:	2302      	movs	r3, #2
 80031dc:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
  if ((devicePrm.motionState == INACTIVE)||\
 80031e0:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d025      	beq.n	8003234 <Stspin220_GoMark+0x98>
      (devicePrm.motionState == STANDBY))
 80031e8:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
  if ((devicePrm.motionState == INACTIVE)||\
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	d021      	beq.n	8003234 <Stspin220_GoMark+0x98>
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
 80031f0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80031f4:	07db      	lsls	r3, r3, #31
 80031f6:	d505      	bpl.n	8003204 <Stspin220_GoMark+0x68>
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
 80031f8:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80031fc:	f043 0308 	orr.w	r3, r3, #8
 8003200:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 8003204:	2000      	movs	r0, #0
 8003206:	f7ff fa93 	bl	8002730 <Stspin220_ComputeSpeedProfile>
}
 800320a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Stspin220_StartMovement(deviceId);
 800320e:	2000      	movs	r0, #0
 8003210:	f7ff be12 	b.w	8002e38 <Stspin220_StartMovement>
    Stspin220_HardHiZ(deviceId);
 8003214:	2000      	movs	r0, #0
 8003216:	f7fe fe7f 	bl	8001f18 <Stspin220_HardHiZ>
 800321a:	e7ca      	b.n	80031b2 <Stspin220_GoMark+0x16>
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 800321c:	43c9      	mvns	r1, r1
 800321e:	61e9      	str	r1, [r5, #28]
      direction = FORWARD; 
 8003220:	2000      	movs	r0, #0
 8003222:	e7d1      	b.n	80031c8 <Stspin220_GoMark+0x2c>
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 8003224:	43c9      	mvns	r1, r1
 8003226:	61e9      	str	r1, [r5, #28]
      direction = BACKWARD;
 8003228:	2001      	movs	r0, #1
 800322a:	e7cd      	b.n	80031c8 <Stspin220_GoMark+0x2c>
    Stspin220_ExitDeviceFromStandby(deviceId);
 800322c:	2000      	movs	r0, #0
 800322e:	f7ff fc59 	bl	8002ae4 <Stspin220_ExitDeviceFromStandby>
 8003232:	e7be      	b.n	80031b2 <Stspin220_GoMark+0x16>
    devicePrm.direction = dir;
 8003234:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
    Stspin220_Board_SetDirectionGpio(dir);
 8003238:	f000 fa18 	bl	800366c <Stspin220_Board_SetDirectionGpio>
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 800323c:	69e9      	ldr	r1, [r5, #28]
    Stspin220_Board_SetDirectionGpio(dir);
 800323e:	e7e1      	b.n	8003204 <Stspin220_GoMark+0x68>
 8003240:	200015e8 	.word	0x200015e8

08003244 <BSP_LED_Init>:
  *         This parameter can be one of the following values:
  *            @arg  LED2 or LED4 on Nucleo-64 with external SMPS
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003244:	b500      	push	{lr}
 8003246:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8003248:	2300      	movs	r3, #0
 800324a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800324e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003252:	9306      	str	r3, [sp, #24]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003254:	b960      	cbnz	r0, 8003270 <BSP_LED_Init+0x2c>
 8003256:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800325a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800325e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	64da      	str	r2, [r3, #76]	; 0x4c
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	9b01      	ldr	r3, [sp, #4]
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = GPIO_PIN[Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003270:	4907      	ldr	r1, [pc, #28]	; (8003290 <BSP_LED_Init+0x4c>)
  GPIO_InitStruct.Pin   = GPIO_PIN[Led];
 8003272:	2220      	movs	r2, #32
 8003274:	2301      	movs	r3, #1
 8003276:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800327a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800327e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003280:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003282:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003284:	f001 fd46 	bl	8004d14 <HAL_GPIO_Init>
}
 8003288:	b009      	add	sp, #36	; 0x24
 800328a:	f85d fb04 	ldr.w	pc, [sp], #4
 800328e:	bf00      	nop
 8003290:	2000019c 	.word	0x2000019c

08003294 <BSP_LED_Toggle>:
  *            @arg  LED2 or LED4 on Nucleo-64 with external SMPS
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003294:	4b02      	ldr	r3, [pc, #8]	; (80032a0 <BSP_LED_Toggle+0xc>)
 8003296:	2120      	movs	r1, #32
 8003298:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800329c:	f001 beee 	b.w	800507c <HAL_GPIO_TogglePin>
 80032a0:	2000019c 	.word	0x2000019c
 80032a4:	00000000 	.word	0x00000000

080032a8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80032a8:	b500      	push	{lr}
 80032aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	2300      	movs	r3, #0
 80032ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80032b2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80032b6:	9306      	str	r3, [sp, #24]

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80032b8:	b960      	cbnz	r0, 80032d4 <BSP_PB_Init+0x2c>
 80032ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032be:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80032c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032c4:	f042 0204 	orr.w	r2, r2, #4
 80032c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80032ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	9b01      	ldr	r3, [sp, #4]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80032d4:	b121      	cbz	r1, 80032e0 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pull   = GPIO_NOPULL;
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;

    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  else if (ButtonMode == BUTTON_MODE_EXTI)
 80032d6:	2901      	cmp	r1, #1
 80032d8:	d010      	beq.n	80032fc <BSP_PB_Init+0x54>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80032da:	b009      	add	sp, #36	; 0x24
 80032dc:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80032e0:	4915      	ldr	r1, [pc, #84]	; (8003338 <BSP_PB_Init+0x90>)
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 80032e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80032e6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 80032ea:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 80032ec:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80032ee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 80032f0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80032f2:	f001 fd0f 	bl	8004d14 <HAL_GPIO_Init>
}
 80032f6:	b009      	add	sp, #36	; 0x24
 80032f8:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 80032fc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8003330 <BSP_PB_Init+0x88>
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <BSP_PB_Init+0x90>)
 8003302:	a902      	add	r1, sp, #8
 8003304:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 8003308:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 800330a:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 800330e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8003310:	f001 fd00 	bl	8004d14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8003314:	2200      	movs	r2, #0
 8003316:	210f      	movs	r1, #15
 8003318:	2028      	movs	r0, #40	; 0x28
 800331a:	f001 fb1d 	bl	8004958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800331e:	2028      	movs	r0, #40	; 0x28
 8003320:	f001 fb58 	bl	80049d4 <HAL_NVIC_EnableIRQ>
}
 8003324:	b009      	add	sp, #36	; 0x24
 8003326:	f85d fb04 	ldr.w	pc, [sp], #4
 800332a:	bf00      	nop
 800332c:	f3af 8000 	nop.w
 8003330:	00002000 	.word	0x00002000
 8003334:	00210000 	.word	0x00210000
 8003338:	20000198 	.word	0x20000198

0800333c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER
  * @retval Button state.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800333c:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800333e:	4b04      	ldr	r3, [pc, #16]	; (8003350 <BSP_PB_GetState+0x14>)
 8003340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003344:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003348:	f001 fe8c 	bl	8005064 <HAL_GPIO_ReadPin>
}
 800334c:	bd08      	pop	{r3, pc}
 800334e:	bf00      	nop
 8003350:	20000198 	.word	0x20000198

08003354 <Stspin220_Board_Delay>:
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Stspin220_Board_Delay(uint32_t delay)
{
  HAL_Delay(delay);
 8003354:	f000 bc56 	b.w	8003c04 <HAL_Delay>

08003358 <Stspin220_Board_GpioInit>:
void Stspin220_Board_GpioInit(void)
{
   GPIO_InitTypeDef GPIO_InitStruct;
   
  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 8003358:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <Stspin220_Board_GpioInit+0xf0>)
{
 800335a:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800335c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	64da      	str	r2, [r3, #76]	; 0x4c
 8003364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8003366:	b08a      	sub	sp, #40	; 0x28
  __GPIOA_CLK_ENABLE();
 8003368:	f002 0201 	and.w	r2, r2, #1
 800336c:	9201      	str	r2, [sp, #4]
 800336e:	9a01      	ldr	r2, [sp, #4]
  __GPIOB_CLK_ENABLE();
 8003370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003372:	f042 0202 	orr.w	r2, r2, #2
 8003376:	64da      	str	r2, [r3, #76]	; 0x4c
 8003378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800337a:	f002 0202 	and.w	r2, r2, #2
 800337e:	9202      	str	r2, [sp, #8]
 8003380:	9a02      	ldr	r2, [sp, #8]
  __GPIOC_CLK_ENABLE();  
 8003382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003384:	f042 0204 	orr.w	r2, r2, #4
 8003388:	64da      	str	r2, [r3, #76]	; 0x4c
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
void Stspin220_Board_Disable(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Configure the GPIO connected to EN pin as an output */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 800338c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003390:	2101      	movs	r1, #1
  __GPIOC_CLK_ENABLE();  
 8003392:	f003 0304 	and.w	r3, r3, #4
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 8003396:	e9cd 0104 	strd	r0, r1, [sp, #16]
  __GPIOC_CLK_ENABLE();  
 800339a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 800339c:	2400      	movs	r4, #0
 800339e:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
 80033a0:	a904      	add	r1, sp, #16
 80033a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 80033a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
  __GPIOC_CLK_ENABLE();  
 80033aa:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
 80033ac:	f001 fcb2 	bl	8004d14 <HAL_GPIO_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 80033b0:	b672      	cpsid	i
  __disable_irq();
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT,\
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033bc:	f001 fe58 	bl	8005070 <HAL_GPIO_WritePin>
    BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT,\
    GPIO_PIN_RESET);
  __HAL_GPIO_EXTI_CLEAR_IT(BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
 80033c0:	4b22      	ldr	r3, [pc, #136]	; (800344c <Stspin220_Board_GpioInit+0xf4>)
 80033c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 80033c8:	b662      	cpsie	i
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1, &GPIO_InitStruct);
 80033ca:	4e21      	ldr	r6, [pc, #132]	; (8003450 <Stspin220_Board_GpioInit+0xf8>)
  HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT,\
 80033cc:	2200      	movs	r2, #0
 80033ce:	2105      	movs	r1, #5
 80033d0:	2028      	movs	r0, #40	; 0x28
 80033d2:	f001 fac1 	bl	8004958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT);  
 80033d6:	2028      	movs	r0, #40	; 0x28
 80033d8:	f001 fafc 	bl	80049d4 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1, &GPIO_InitStruct);
 80033dc:	a904      	add	r1, sp, #16
 80033de:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_MODE1;
 80033e0:	2210      	movs	r2, #16
 80033e2:	2301      	movs	r3, #1
 80033e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80033e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1, &GPIO_InitStruct);
 80033ec:	f001 fc92 	bl	8004d14 <HAL_GPIO_Init>
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2, &GPIO_InitStruct);
 80033f0:	4630      	mov	r0, r6
 80033f2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_MODE2;
 80033f4:	2240      	movs	r2, #64	; 0x40
 80033f6:	2301      	movs	r3, #1
 80033f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80033fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2, &GPIO_InitStruct);
 8003400:	f001 fc88 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_DIR_MODE4;
 8003404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003408:	2301      	movs	r3, #1
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_DIR_MODE4, &GPIO_InitStruct);
 800340a:	a904      	add	r1, sp, #16
 800340c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_DIR_MODE4;
 8003410:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003414:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_DIR_MODE4, &GPIO_InitStruct);
 8003418:	f001 fc7c 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_STBY_RESET;
 800341c:	2301      	movs	r3, #1
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_STBY_RESET, &GPIO_InitStruct);
 800341e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_STBY_RESET;
 8003420:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_STBY_RESET, &GPIO_InitStruct);
 8003424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_STBY_RESET;
 8003428:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800342c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_STBY_RESET, &GPIO_InitStruct);
 8003430:	f001 fc70 	bl	8004d14 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_STBY_RESET,\
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800343a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343e:	f001 fe17 	bl	8005070 <HAL_GPIO_WritePin>
}
 8003442:	b00a      	add	sp, #40	; 0x28
 8003444:	bd70      	pop	{r4, r5, r6, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	40010400 	.word	0x40010400
 8003450:	48000400 	.word	0x48000400

08003454 <Stspin220_Board_TimStckStart>:
    __HAL_TIM_CLEAR_IT(&hTimerStepClock, TIM_IT_CC2);
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <Stspin220_Board_TimStckStart+0x28>)
  HAL_TIM_OC_Start_IT(&hTimerStepClock,\
 8003456:	4809      	ldr	r0, [pc, #36]	; (800347c <Stspin220_Board_TimStckStart+0x28>)
    __HAL_TIM_CLEAR_IT(&hTimerStepClock, TIM_IT_CC2);
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f06f 0204 	mvn.w	r2, #4
 800345e:	611a      	str	r2, [r3, #16]
  if ((hTimerStepClock.Instance->CCER &\
 8003460:	6a1a      	ldr	r2, [r3, #32]
 8003462:	f012 0f20 	tst.w	r2, #32
    hTimerStepClock.Instance->CCER |=\
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	bf0c      	ite	eq
 800346a:	f042 0220 	orreq.w	r2, r2, #32
    hTimerStepClock.Instance->CCER &=\
 800346e:	f022 0220 	bicne.w	r2, r2, #32
 8003472:	621a      	str	r2, [r3, #32]
  HAL_TIM_OC_Start_IT(&hTimerStepClock,\
 8003474:	2104      	movs	r1, #4
 8003476:	f002 bf31 	b.w	80062dc <HAL_TIM_OC_Start_IT>
 800347a:	bf00      	nop
 800347c:	20001694 	.word	0x20001694

08003480 <Stspin220_Board_TimStckCompareInit>:
  ccrValue = hTimerStepClock.Instance->CNT;
 8003480:	4a02      	ldr	r2, [pc, #8]	; (800348c <Stspin220_Board_TimStckCompareInit+0xc>)
 8003482:	4b03      	ldr	r3, [pc, #12]	; (8003490 <Stspin220_Board_TimStckCompareInit+0x10>)
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003488:	601a      	str	r2, [r3, #0]
}
 800348a:	4770      	bx	lr
 800348c:	20001694 	.word	0x20001694
 8003490:	20001644 	.word	0x20001644

08003494 <Stspin220_Board_TimStckSetFreq>:
{
 8003494:	b5d0      	push	{r4, r6, r7, lr}
 8003496:	ed2d 8b02 	vpush	{d8}
 800349a:	eeb0 8a40 	vmov.f32	s16, s0
  ccrValue += round(HAL_RCC_GetSysClockFreq()/(TIMER_PRESCALER * 2 * newFreq));
 800349e:	f001 fe93 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 80034a2:	ee07 0a90 	vmov	s15, r0
 80034a6:	eefb 7acf 	vcvt.f32.u32	s15, s15, #2
 80034aa:	4c0f      	ldr	r4, [pc, #60]	; (80034e8 <Stspin220_Board_TimStckSetFreq+0x54>)
 80034ac:	eec7 7a88 	vdiv.f32	s15, s15, s16
 80034b0:	ee17 0a90 	vmov	r0, s15
 80034b4:	f7fd f848 	bl	8000548 <__aeabi_f2d>
 80034b8:	ec41 0b10 	vmov	d0, r0, r1
 80034bc:	f007 fa58 	bl	800a970 <round>
 80034c0:	ec57 6b10 	vmov	r6, r7, d0
 80034c4:	6820      	ldr	r0, [r4, #0]
 80034c6:	f7fd f81d 	bl	8000504 <__aeabi_ui2d>
 80034ca:	4632      	mov	r2, r6
 80034cc:	463b      	mov	r3, r7
 80034ce:	f7fc fedd 	bl	800028c <__adddf3>
 80034d2:	f7fd fb2b 	bl	8000b2c <__aeabi_d2uiz>
}
 80034d6:	ecbd 8b02 	vpop	{d8}
  __HAL_TIM_SetCompare(&hTimerStepClock,\
 80034da:	4b04      	ldr	r3, [pc, #16]	; (80034ec <Stspin220_Board_TimStckSetFreq+0x58>)
  ccrValue += round(HAL_RCC_GetSysClockFreq()/(TIMER_PRESCALER * 2 * newFreq));
 80034dc:	6020      	str	r0, [r4, #0]
  __HAL_TIM_SetCompare(&hTimerStepClock,\
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6822      	ldr	r2, [r4, #0]
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80034e4:	bdd0      	pop	{r4, r6, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20001644 	.word	0x20001644
 80034ec:	20001694 	.word	0x20001694

080034f0 <Stspin220_Board_PwmRefStart>:
{
 80034f0:	b508      	push	{r3, lr}
  HAL_TIM_PWM_Start_IT(&hTimerPwm, BSP_MOTOR_CONTROL_BOARD_CHAN_PWM_REF);
 80034f2:	4804      	ldr	r0, [pc, #16]	; (8003504 <Stspin220_Board_PwmRefStart+0x14>)
 80034f4:	2104      	movs	r1, #4
 80034f6:	f003 f8cb 	bl	8006690 <HAL_TIM_PWM_Start_IT>
}
 80034fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(5*PWM_FILTER_TIME_CONSTANT);
 80034fe:	2019      	movs	r0, #25
 8003500:	f000 bb80 	b.w	8003c04 <HAL_Delay>
 8003504:	20001648 	.word	0x20001648

08003508 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>:
{
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	460c      	mov	r4, r1
 800350c:	4605      	mov	r5, r0
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800350e:	f001 fe5b 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
  pulseLength = (uint16_t)((period * (100-(uint32_t)dutyCycle)) / 100);
 8003512:	2c64      	cmp	r4, #100	; 0x64
 8003514:	bf28      	it	cs
 8003516:	2464      	movcs	r4, #100	; 0x64
 8003518:	4909      	ldr	r1, [pc, #36]	; (8003540 <Stspin220_Board_PwmRefSetFreqAndDutyCycle+0x38>)
  uint32_t period = (sysFreq/newFreq) - 1;
 800351a:	fbb0 f0f5 	udiv	r0, r0, r5
  pulseLength = (uint16_t)((period * (100-(uint32_t)dutyCycle)) / 100);
 800351e:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
  uint32_t period = (sysFreq/newFreq) - 1;
 8003522:	3801      	subs	r0, #1
  pulseLength = (uint16_t)((period * (100-(uint32_t)dutyCycle)) / 100);
 8003524:	fb00 f404 	mul.w	r4, r0, r4
  pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_PWM_REF;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <Stspin220_Board_PwmRefSetFreqAndDutyCycle+0x3c>)
 800352a:	4a07      	ldr	r2, [pc, #28]	; (8003548 <Stspin220_Board_PwmRefSetFreqAndDutyCycle+0x40>)
  pulseLength = (uint16_t)((period * (100-(uint32_t)dutyCycle)) / 100);
 800352c:	fba1 1404 	umull	r1, r4, r1, r4
 8003530:	f3c4 144f 	ubfx	r4, r4, #5, #16
  pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_PWM_REF;
 8003534:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SetAutoreload(pHTim, period);
 8003536:	60d0      	str	r0, [r2, #12]
 8003538:	62d8      	str	r0, [r3, #44]	; 0x2c
  __HAL_TIM_SetCompare(pHTim, BSP_MOTOR_CONTROL_BOARD_CHAN_PWM_REF, pulseLength);
 800353a:	639c      	str	r4, [r3, #56]	; 0x38
}
 800353c:	bd38      	pop	{r3, r4, r5, pc}
 800353e:	bf00      	nop
 8003540:	51eb851f 	.word	0x51eb851f
 8003544:	40000400 	.word	0x40000400
 8003548:	20001648 	.word	0x20001648

0800354c <Stspin220_Board_PwmRefInit>:
{
 800354c:	b530      	push	{r4, r5, lr}
  pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_PWM_REF;
 800354e:	4c0f      	ldr	r4, [pc, #60]	; (800358c <Stspin220_Board_PwmRefInit+0x40>)
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <Stspin220_Board_PwmRefInit+0x44>)
 8003552:	6023      	str	r3, [r4, #0]
{
 8003554:	b08d      	sub	sp, #52	; 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003556:	2100      	movs	r1, #0
 8003558:	2060      	movs	r0, #96	; 0x60
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 800355a:	2500      	movs	r5, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800355c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  HAL_TIM_PWM_Init(pHTim);
 8003560:	4620      	mov	r0, r4
  pHTim->Init.Prescaler = 0;
 8003562:	e9c4 5501 	strd	r5, r5, [r4, #4]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003566:	e9c4 5503 	strd	r5, r5, [r4, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800356a:	9508      	str	r5, [sp, #32]
  HAL_TIM_PWM_Init(pHTim);
 800356c:	f003 f804 	bl	8006578 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_PWM_REF);
 8003570:	a904      	add	r1, sp, #16
 8003572:	2204      	movs	r2, #4
 8003574:	4620      	mov	r0, r4
 8003576:	f003 fb2b 	bl	8006bd0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 800357a:	a901      	add	r1, sp, #4
 800357c:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800357e:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003580:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8003582:	f003 fc59 	bl	8006e38 <HAL_TIMEx_MasterConfigSynchronization>
}
 8003586:	b00d      	add	sp, #52	; 0x34
 8003588:	bd30      	pop	{r4, r5, pc}
 800358a:	bf00      	nop
 800358c:	20001648 	.word	0x20001648
 8003590:	40000400 	.word	0x40000400

08003594 <Stspin220_Board_TimStckInit>:
{
 8003594:	b530      	push	{r4, r5, lr}
  pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIM_STCK;
 8003596:	4c1a      	ldr	r4, [pc, #104]	; (8003600 <Stspin220_Board_TimStckInit+0x6c>)
{
 8003598:	b08f      	sub	sp, #60	; 0x3c
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 800359a:	2500      	movs	r5, #0
  pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIM_STCK;
 800359c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 80035a0:	2201      	movs	r2, #1
    pHTim->Init.Period = 0xFFFFFFFF;
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
  HAL_TIM_OC_Init(pHTim);
 80035a6:	4620      	mov	r0, r4
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 80035a8:	e884 0026 	stmia.w	r4, {r1, r2, r5}
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
  HAL_TIM_OC_Init(pHTim);
 80035b0:	f002 fdd4 	bl	800615c <HAL_TIM_OC_Init>
  if (pHTim->Instance != TIM4)
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <Stspin220_Board_TimStckInit+0x70>)
 80035b6:	6822      	ldr	r2, [r4, #0]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b8:	2000      	movs	r0, #0
 80035ba:	2100      	movs	r1, #0
  if (pHTim->Instance != TIM4)
 80035bc:	429a      	cmp	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 80035c2:	e9cd 5507 	strd	r5, r5, [sp, #28]
  if (pHTim->Instance != TIM4)
 80035c6:	d017      	beq.n	80035f8 <Stspin220_Board_TimStckInit+0x64>
    HAL_TIM_OC_ConfigChannel(pHTim, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
 80035c8:	a906      	add	r1, sp, #24
    sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80035ca:	2350      	movs	r3, #80	; 0x50
    HAL_TIM_OC_ConfigChannel(pHTim, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
 80035cc:	2204      	movs	r2, #4
 80035ce:	4620      	mov	r0, r4
 80035d0:	9101      	str	r1, [sp, #4]
    sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80035d2:	9306      	str	r3, [sp, #24]
    HAL_TIM_OC_ConfigChannel(pHTim, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
 80035d4:	f003 fa20 	bl	8006a18 <HAL_TIM_OC_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80035d8:	2330      	movs	r3, #48	; 0x30
 80035da:	9901      	ldr	r1, [sp, #4]
 80035dc:	9306      	str	r3, [sp, #24]
  HAL_TIM_OC_ConfigChannel(pHTim, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
 80035de:	2204      	movs	r2, #4
 80035e0:	4807      	ldr	r0, [pc, #28]	; (8003600 <Stspin220_Board_TimStckInit+0x6c>)
 80035e2:	f003 fa19 	bl	8006a18 <HAL_TIM_OC_ConfigChannel>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e6:	2300      	movs	r3, #0
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 80035e8:	a903      	add	r1, sp, #12
 80035ea:	4805      	ldr	r0, [pc, #20]	; (8003600 <Stspin220_Board_TimStckInit+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ec:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ee:	9305      	str	r3, [sp, #20]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 80035f0:	f003 fc22 	bl	8006e38 <HAL_TIMEx_MasterConfigSynchronization>
}
 80035f4:	b00f      	add	sp, #60	; 0x3c
 80035f6:	bd30      	pop	{r4, r5, pc}
    sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80035f8:	9506      	str	r5, [sp, #24]
 80035fa:	a906      	add	r1, sp, #24
 80035fc:	e7ef      	b.n	80035de <Stspin220_Board_TimStckInit+0x4a>
 80035fe:	bf00      	nop
 8003600:	20001694 	.word	0x20001694
 8003604:	40000800 	.word	0x40000800

08003608 <Stspin220_Board_TimStckStop>:
{
 8003608:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800360a:	b672      	cpsid	i
  if (*pToggleOdd == 1)
 800360c:	7803      	ldrb	r3, [r0, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d014      	beq.n	800363c <Stspin220_Board_TimStckStop+0x34>
  if (HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 8003612:	480c      	ldr	r0, [pc, #48]	; (8003644 <Stspin220_Board_TimStckStop+0x3c>)
 8003614:	2108      	movs	r1, #8
 8003616:	f001 fd25 	bl	8005064 <HAL_GPIO_ReadPin>
 800361a:	b948      	cbnz	r0, 8003630 <Stspin220_Board_TimStckStop+0x28>
  HAL_TIM_OC_Stop_IT(&hTimerStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
 800361c:	2104      	movs	r1, #4
 800361e:	480a      	ldr	r0, [pc, #40]	; (8003648 <Stspin220_Board_TimStckStop+0x40>)
 8003620:	f002 ff20 	bl	8006464 <HAL_TIM_OC_Stop_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8003624:	b662      	cpsie	i
  HAL_TIM_OC_DeInit(&hTimerStepClock);
 8003626:	4808      	ldr	r0, [pc, #32]	; (8003648 <Stspin220_Board_TimStckStop+0x40>)
 8003628:	f002 fe24 	bl	8006274 <HAL_TIM_OC_DeInit>
}
 800362c:	2001      	movs	r0, #1
 800362e:	bd08      	pop	{r3, pc}
	  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 8003630:	4804      	ldr	r0, [pc, #16]	; (8003644 <Stspin220_Board_TimStckStop+0x3c>)
 8003632:	2200      	movs	r2, #0
 8003634:	2108      	movs	r1, #8
 8003636:	f001 fd1b 	bl	8005070 <HAL_GPIO_WritePin>
 800363a:	e7ef      	b.n	800361c <Stspin220_Board_TimStckStop+0x14>
 800363c:	b662      	cpsie	i
}
 800363e:	2001      	movs	r0, #1
 8003640:	bd08      	pop	{r3, pc}
 8003642:	bf00      	nop
 8003644:	48000400 	.word	0x48000400
 8003648:	20001694 	.word	0x20001694

0800364c <Stspin220_Board_ReleaseReset>:
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_STBY_RESET,\
 800364c:	2201      	movs	r2, #1
 800364e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003656:	f001 bd0b 	b.w	8005070 <HAL_GPIO_WritePin>
 800365a:	bf00      	nop

0800365c <Stspin220_Board_Reset>:
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_STBY_RESET,\
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003666:	f001 bd03 	b.w	8005070 <HAL_GPIO_WritePin>
 800366a:	bf00      	nop

0800366c <Stspin220_Board_SetDirectionGpio>:
{
 800366c:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_DIR_MODE4,\
 800366e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003676:	f001 bcfb 	b.w	8005070 <HAL_GPIO_WritePin>
 800367a:	bf00      	nop
 800367c:	0000      	movs	r0, r0
	...

08003680 <Stspin220_Board_Disable>:
{
 8003680:	b500      	push	{lr}
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 8003682:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80036c0 <Stspin220_Board_Disable+0x40>
{
 8003686:	b087      	sub	sp, #28
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 8003688:	2200      	movs	r2, #0
 800368a:	2301      	movs	r3, #1
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
 800368c:	4669      	mov	r1, sp
 800368e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 8003692:	ed8d 7b00 	vstr	d7, [sp]
 8003696:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
 800369a:	f001 fb3b 	bl	8004d14 <HAL_GPIO_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 800369e:	b672      	cpsid	i
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT,\
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036aa:	f001 fce1 	bl	8005070 <HAL_GPIO_WritePin>
  __HAL_GPIO_EXTI_CLEAR_IT(BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <Stspin220_Board_Disable+0x48>)
 80036b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 80036b6:	b662      	cpsie	i
  __enable_irq();
}
 80036b8:	b007      	add	sp, #28
 80036ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80036be:	bf00      	nop
 80036c0:	00000400 	.word	0x00000400
 80036c4:	00000001 	.word	0x00000001
 80036c8:	40010400 	.word	0x40010400

080036cc <Stspin220_Board_Enable>:
/******************************************************//**
 * @brief Enable the power bridges (leave the output bridges HiZ)
 * @retval None
 **********************************************************/
void Stspin220_Board_Enable(void)
{
 80036cc:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if (HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT,\
 80036ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
{
 80036d2:	b087      	sub	sp, #28
  if (HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT,\
 80036d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d8:	f001 fcc4 	bl	8005064 <HAL_GPIO_ReadPin>
 80036dc:	b110      	cbz	r0, 80036e4 <Stspin220_Board_Enable+0x18>
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
    __HAL_GPIO_EXTI_CLEAR_IT(BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
    HAL_NVIC_ClearPendingIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT);
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT);
  }
}
 80036de:	b007      	add	sp, #28
 80036e0:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT,\
 80036e4:	2201      	movs	r2, #1
 80036e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ee:	f001 fcbf 	bl	8005070 <HAL_GPIO_WritePin>
    HAL_Delay(BRIDGE_TURN_ON_DELAY);
 80036f2:	200a      	movs	r0, #10
 80036f4:	f000 fa86 	bl	8003c04 <HAL_Delay>
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 80036f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003700:	e9cd 2300 	strd	r2, r3, [sp]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
 8003704:	4669      	mov	r1, sp
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 8003706:	2201      	movs	r2, #1
 8003708:	2301      	movs	r3, #1
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
 800370a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 800370e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
 8003712:	f001 faff 	bl	8004d14 <HAL_GPIO_Init>
    __HAL_GPIO_EXTI_CLEAR_IT(BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <Stspin220_Board_Enable+0x64>)
 8003718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800371c:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT);
 800371e:	2028      	movs	r0, #40	; 0x28
 8003720:	f001 f994 	bl	8004a4c <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT);
 8003724:	2028      	movs	r0, #40	; 0x28
 8003726:	f001 f955 	bl	80049d4 <HAL_NVIC_EnableIRQ>
}
 800372a:	b007      	add	sp, #28
 800372c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003730:	40010400 	.word	0x40010400

08003734 <Stspin220_Board_EN_AND_FAULT_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the EN FAULT pin state.
 * @retval The EN FAULT pin value.
 **********************************************************/
uint32_t Stspin220_Board_EN_AND_FAULT_PIN_GetState(void)
{
 8003734:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
 8003736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800373a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800373e:	f001 fc91 	bl	8005064 <HAL_GPIO_ReadPin>
}
 8003742:	bd08      	pop	{r3, pc}

08003744 <Stspin220_Board_SetModePins>:
 **********************************************************/
uint8_t Stspin220_Board_SetModePins(uint8_t modePin1Level,\
  uint8_t modePin2Level,\
  uint8_t modePin3Level,\
  uint8_t modePin4Level)
{
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	460e      	mov	r6, r1
 8003748:	b086      	sub	sp, #24
 800374a:	4615      	mov	r5, r2
 800374c:	461c      	mov	r4, r3
  GPIO_InitTypeDef GPIO_InitStruct;  
  
  if (modePin1Level != 0)
 800374e:	2800      	cmp	r0, #0
 8003750:	d03f      	beq.n	80037d2 <Stspin220_Board_SetModePins+0x8e>
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1,\
 8003752:	4823      	ldr	r0, [pc, #140]	; (80037e0 <Stspin220_Board_SetModePins+0x9c>)
 8003754:	2201      	movs	r2, #1
 8003756:	2110      	movs	r1, #16
 8003758:	f001 fc8a 	bl	8005070 <HAL_GPIO_WritePin>
      GPIO_PIN_RESET);
  }

  if (modePin2Level != 0)
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2,\
 800375c:	4820      	ldr	r0, [pc, #128]	; (80037e0 <Stspin220_Board_SetModePins+0x9c>)
  if (modePin2Level != 0)
 800375e:	b39e      	cbz	r6, 80037c8 <Stspin220_Board_SetModePins+0x84>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2,\
 8003760:	2201      	movs	r2, #1
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	f001 fc84 	bl	8005070 <HAL_GPIO_WritePin>
  HAL_TIM_OC_DeInit(&hTimerStepClock);
 8003768:	481e      	ldr	r0, [pc, #120]	; (80037e4 <Stspin220_Board_SetModePins+0xa0>)
 800376a:	f002 fd83 	bl	8006274 <HAL_TIM_OC_DeInit>
      BSP_MOTOR_CONTROL_BOARD_PIN_MODE2,\
      GPIO_PIN_RESET);
  }
  
  Stspin220_Board_TimStckDeInit();
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3;
 800376e:	2208      	movs	r2, #8
 8003770:	2301      	movs	r3, #1
 8003772:	e9cd 2300 	strd	r2, r3, [sp]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3, &GPIO_InitStruct);
 8003776:	481a      	ldr	r0, [pc, #104]	; (80037e0 <Stspin220_Board_SetModePins+0x9c>)
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3;
 8003778:	2200      	movs	r2, #0
 800377a:	2301      	movs	r3, #1
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3, &GPIO_InitStruct);
 800377c:	4669      	mov	r1, sp
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3;
 800377e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3, &GPIO_InitStruct);
 8003782:	f001 fac7 	bl	8004d14 <HAL_GPIO_Init>
  
  if (modePin3Level != 0)
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 8003786:	4816      	ldr	r0, [pc, #88]	; (80037e0 <Stspin220_Board_SetModePins+0x9c>)
  if (modePin3Level != 0)
 8003788:	b175      	cbz	r5, 80037a8 <Stspin220_Board_SetModePins+0x64>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 800378a:	2201      	movs	r2, #1
 800378c:	2108      	movs	r1, #8
 800378e:	f001 fc6f 	bl	8005070 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
      BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3,\
      GPIO_PIN_RESET);
  }
  
  if (modePin4Level != 0)
 8003792:	b17c      	cbz	r4, 80037b4 <Stspin220_Board_SetModePins+0x70>
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_DIR_MODE4,\
 8003794:	2201      	movs	r2, #1
 8003796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800379a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800379e:	f001 fc67 	bl	8005070 <HAL_GPIO_WritePin>
      BSP_MOTOR_CONTROL_BOARD_PIN_DIR_MODE4,\
      GPIO_PIN_RESET);
  }
  
  return 1;
}
 80037a2:	2001      	movs	r0, #1
 80037a4:	b006      	add	sp, #24
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 80037a8:	462a      	mov	r2, r5
 80037aa:	2108      	movs	r1, #8
 80037ac:	f001 fc60 	bl	8005070 <HAL_GPIO_WritePin>
  if (modePin4Level != 0)
 80037b0:	2c00      	cmp	r4, #0
 80037b2:	d1ef      	bne.n	8003794 <Stspin220_Board_SetModePins+0x50>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_DIR_MODE4,\
 80037b4:	4622      	mov	r2, r4
 80037b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037be:	f001 fc57 	bl	8005070 <HAL_GPIO_WritePin>
}
 80037c2:	2001      	movs	r0, #1
 80037c4:	b006      	add	sp, #24
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2,\
 80037c8:	4632      	mov	r2, r6
 80037ca:	2140      	movs	r1, #64	; 0x40
 80037cc:	f001 fc50 	bl	8005070 <HAL_GPIO_WritePin>
 80037d0:	e7ca      	b.n	8003768 <Stspin220_Board_SetModePins+0x24>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1,\
 80037d2:	4602      	mov	r2, r0
 80037d4:	2110      	movs	r1, #16
 80037d6:	4802      	ldr	r0, [pc, #8]	; (80037e0 <Stspin220_Board_SetModePins+0x9c>)
 80037d8:	f001 fc4a 	bl	8005070 <HAL_GPIO_WritePin>
 80037dc:	e7be      	b.n	800375c <Stspin220_Board_SetModePins+0x18>
 80037de:	bf00      	nop
 80037e0:	48000400 	.word	0x48000400
 80037e4:	20001694 	.word	0x20001694

080037e8 <Stspin220_Board_SetFullStep>:
/******************************************************//**
 * @brief Select Full Step mode
 * @retval None
 **********************************************************/
void Stspin220_Board_SetFullStep(void)
{
 80037e8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1,\
 80037ea:	4806      	ldr	r0, [pc, #24]	; (8003804 <Stspin220_Board_SetFullStep+0x1c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	2110      	movs	r1, #16
 80037f0:	f001 fc3e 	bl	8005070 <HAL_GPIO_WritePin>
    BSP_MOTOR_CONTROL_BOARD_PIN_MODE1,\
    GPIO_PIN_RESET);
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2,\
    BSP_MOTOR_CONTROL_BOARD_PIN_MODE2,\
    GPIO_PIN_RESET);
}
 80037f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2,\
 80037f8:	4802      	ldr	r0, [pc, #8]	; (8003804 <Stspin220_Board_SetFullStep+0x1c>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	2140      	movs	r1, #64	; 0x40
 80037fe:	f001 bc37 	b.w	8005070 <HAL_GPIO_WritePin>
 8003802:	bf00      	nop
 8003804:	48000400 	.word	0x48000400

08003808 <Stspin220_Board_UnsetFullStep>:
 * @brief Unselect Full Step mode
 * @retval None
 **********************************************************/
void Stspin220_Board_UnsetFullStep(void)
{
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1,\
 8003808:	4802      	ldr	r0, [pc, #8]	; (8003814 <Stspin220_Board_UnsetFullStep+0xc>)
 800380a:	2201      	movs	r2, #1
 800380c:	2110      	movs	r1, #16
 800380e:	f001 bc2f 	b.w	8005070 <HAL_GPIO_WritePin>
 8003812:	bf00      	nop
 8003814:	48000400 	.word	0x48000400

08003818 <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003818:	2000      	movs	r0, #0
 800381a:	4770      	bx	lr

0800381c <l647x_GetMotorHandle>:
 800381c:	2000      	movs	r0, #0
 800381e:	4770      	bx	lr

08003820 <l648x_GetMotorHandle>:
 8003820:	2000      	movs	r0, #0
 8003822:	4770      	bx	lr

08003824 <Powerstep01_GetMotorHandle>:
 8003824:	2000      	movs	r0, #0
 8003826:	4770      	bx	lr

08003828 <L6206_GetMotorHandle>:
 8003828:	2000      	movs	r0, #0
 800382a:	4770      	bx	lr

0800382c <L6208_GetMotorHandle>:
 800382c:	2000      	movs	r0, #0
 800382e:	4770      	bx	lr

08003830 <Stspin240_250_GetMotorHandle>:
 8003830:	2000      	movs	r0, #0
 8003832:	4770      	bx	lr

08003834 <BSP_MotorControl_AttachErrorHandler>:
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <BSP_MotorControl_AttachErrorHandler+0x1c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	b143      	cbz	r3, 800384c <BSP_MotorControl_AttachErrorHandler+0x18>
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	b102      	cbz	r2, 8003840 <BSP_MotorControl_AttachErrorHandler+0xc>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 800383e:	4710      	bx	r2
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003844:	b113      	cbz	r3, 800384c <BSP_MotorControl_AttachErrorHandler+0x18>
  {
    motorDrvHandle->ErrorHandler(error);
 8003846:	f640 0002 	movw	r0, #2050	; 0x802
 800384a:	4718      	bx	r3
  }  
  else
  {
    while(1)
 800384c:	e7fe      	b.n	800384c <BSP_MotorControl_AttachErrorHandler+0x18>
 800384e:	bf00      	nop
 8003850:	200016e4 	.word	0x200016e4

08003854 <BSP_MotorControl_AttachFlagInterrupt>:
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <BSP_MotorControl_AttachFlagInterrupt+0x1c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	b143      	cbz	r3, 800386c <BSP_MotorControl_AttachFlagInterrupt+0x18>
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	b102      	cbz	r2, 8003860 <BSP_MotorControl_AttachFlagInterrupt+0xc>
    motorDrvHandle->AttachFlagInterrupt(callback);
 800385e:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003864:	b113      	cbz	r3, 800386c <BSP_MotorControl_AttachFlagInterrupt+0x18>
    motorDrvHandle->ErrorHandler(error);
 8003866:	f640 0003 	movw	r0, #2051	; 0x803
 800386a:	4718      	bx	r3
    while(1)
 800386c:	e7fe      	b.n	800386c <BSP_MotorControl_AttachFlagInterrupt+0x18>
 800386e:	bf00      	nop
 8003870:	200016e4 	.word	0x200016e4

08003874 <BSP_MotorControl_Init>:
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <BSP_MotorControl_Init+0x1c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b14b      	cbz	r3, 800388e <BSP_MotorControl_Init+0x1a>
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	b10a      	cbz	r2, 8003882 <BSP_MotorControl_Init+0xe>
  {
    motorDrvHandle->Init(initDeviceParameters);
 800387e:	4608      	mov	r0, r1
 8003880:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003886:	b113      	cbz	r3, 800388e <BSP_MotorControl_Init+0x1a>
    motorDrvHandle->ErrorHandler(error);
 8003888:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800388c:	4718      	bx	r3
    while(1)
 800388e:	e7fe      	b.n	800388e <BSP_MotorControl_Init+0x1a>
 8003890:	200016e4 	.word	0x200016e4

08003894 <BSP_MotorControl_FlagInterruptHandler>:
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <BSP_MotorControl_FlagInterruptHandler+0x1c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b143      	cbz	r3, 80038ac <BSP_MotorControl_FlagInterruptHandler+0x18>
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	b102      	cbz	r2, 80038a0 <BSP_MotorControl_FlagInterruptHandler+0xc>
  {
    motorDrvHandle->FlagInterruptHandler();
 800389e:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80038a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038a4:	b113      	cbz	r3, 80038ac <BSP_MotorControl_FlagInterruptHandler+0x18>
    motorDrvHandle->ErrorHandler(error);
 80038a6:	f640 0005 	movw	r0, #2053	; 0x805
 80038aa:	4718      	bx	r3
    while(1)
 80038ac:	e7fe      	b.n	80038ac <BSP_MotorControl_FlagInterruptHandler+0x18>
 80038ae:	bf00      	nop
 80038b0:	200016e4 	.word	0x200016e4

080038b4 <BSP_MotorControl_GetDeviceState>:
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
  motorState_t state = INACTIVE;

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <BSP_MotorControl_GetDeviceState+0x20>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b15b      	cbz	r3, 80038d2 <BSP_MotorControl_GetDeviceState+0x1e>
 80038ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038bc:	b102      	cbz	r2, 80038c0 <BSP_MotorControl_GetDeviceState+0xc>
  {
    state = motorDrvHandle->GetDeviceState(deviceId);
 80038be:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80038c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038c4:	b12b      	cbz	r3, 80038d2 <BSP_MotorControl_GetDeviceState+0x1e>
{
 80038c6:	b510      	push	{r4, lr}
    motorDrvHandle->ErrorHandler(error);
 80038c8:	f640 0009 	movw	r0, #2057	; 0x809
 80038cc:	4798      	blx	r3
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
  }  
  return(state);   
}
 80038ce:	2008      	movs	r0, #8
 80038d0:	bd10      	pop	{r4, pc}
    while(1)
 80038d2:	e7fe      	b.n	80038d2 <BSP_MotorControl_GetDeviceState+0x1e>
 80038d4:	200016e4 	.word	0x200016e4

080038d8 <BSP_MotorControl_GetPosition>:
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
  int32_t pos = 0;
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <BSP_MotorControl_GetPosition+0x28>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	b17b      	cbz	r3, 80038fe <BSP_MotorControl_GetPosition+0x26>
{
 80038de:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 80038e0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80038e2:	b11c      	cbz	r4, 80038ec <BSP_MotorControl_GetPosition+0x14>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 80038e4:	4623      	mov	r3, r4
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
  }      
  return(pos);
}
 80038e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pos = motorDrvHandle->GetPosition(deviceId);
 80038ea:	4718      	bx	r3
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80038ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038f0:	b123      	cbz	r3, 80038fc <BSP_MotorControl_GetPosition+0x24>
    motorDrvHandle->ErrorHandler(error);
 80038f2:	f640 000e 	movw	r0, #2062	; 0x80e
 80038f6:	4798      	blx	r3
}
 80038f8:	4620      	mov	r0, r4
 80038fa:	bd10      	pop	{r4, pc}
    while(1)
 80038fc:	e7fe      	b.n	80038fc <BSP_MotorControl_GetPosition+0x24>
 80038fe:	e7fe      	b.n	80038fe <BSP_MotorControl_GetPosition+0x26>
 8003900:	200016e4 	.word	0x200016e4

08003904 <BSP_MotorControl_GoHome>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoHome(uint8_t deviceId)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoHome != 0))
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <BSP_MotorControl_GoHome+0x1c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b143      	cbz	r3, 800391c <BSP_MotorControl_GoHome+0x18>
 800390a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800390c:	b102      	cbz	r2, 8003910 <BSP_MotorControl_GoHome+0xc>
  {
    motorDrvHandle->GoHome(deviceId);
 800390e:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003914:	b113      	cbz	r3, 800391c <BSP_MotorControl_GoHome+0x18>
    motorDrvHandle->ErrorHandler(error);
 8003916:	f640 000f 	movw	r0, #2063	; 0x80f
 800391a:	4718      	bx	r3
    while(1)
 800391c:	e7fe      	b.n	800391c <BSP_MotorControl_GoHome+0x18>
 800391e:	bf00      	nop
 8003920:	200016e4 	.word	0x200016e4

08003924 <BSP_MotorControl_HardStop>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval None
 **********************************************************/
void BSP_MotorControl_HardStop(uint8_t deviceId) 
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->HardStop != 0))
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <BSP_MotorControl_HardStop+0x1c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	b143      	cbz	r3, 800393c <BSP_MotorControl_HardStop+0x18>
 800392a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800392c:	b102      	cbz	r2, 8003930 <BSP_MotorControl_HardStop+0xc>
  {
    motorDrvHandle->HardStop(deviceId);
 800392e:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003934:	b113      	cbz	r3, 800393c <BSP_MotorControl_HardStop+0x18>
    motorDrvHandle->ErrorHandler(error);
 8003936:	f640 0012 	movw	r0, #2066	; 0x812
 800393a:	4718      	bx	r3
    while(1)
 800393c:	e7fe      	b.n	800393c <BSP_MotorControl_HardStop+0x18>
 800393e:	bf00      	nop
 8003940:	200016e4 	.word	0x200016e4

08003944 <BSP_MotorControl_Run>:
 * @note For unidirectionnal brush DC motor, direction parameter 
 * has no effect
 **********************************************************/
void BSP_MotorControl_Run(uint8_t deviceId, motorDir_t direction)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Run != 0))
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <BSP_MotorControl_Run+0x1c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	b143      	cbz	r3, 800395c <BSP_MotorControl_Run+0x18>
 800394a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800394c:	b102      	cbz	r2, 8003950 <BSP_MotorControl_Run+0xc>
  {
    motorDrvHandle->Run(deviceId, direction); 
 800394e:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003954:	b113      	cbz	r3, 800395c <BSP_MotorControl_Run+0x18>
    motorDrvHandle->ErrorHandler(error);
 8003956:	f640 0015 	movw	r0, #2069	; 0x815
 800395a:	4718      	bx	r3
    while(1)
 800395c:	e7fe      	b.n	800395c <BSP_MotorControl_Run+0x18>
 800395e:	bf00      	nop
 8003960:	200016e4 	.word	0x200016e4

08003964 <BSP_MotorControl_SetAcceleration>:
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetAcceleration(uint8_t deviceId,float newAcc)
{                                                  
  bool status = FALSE;
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetAcceleration != 0))
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <BSP_MotorControl_SetAcceleration+0x28>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b17b      	cbz	r3, 800398a <BSP_MotorControl_SetAcceleration+0x26>
{                                                  
 800396a:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetAcceleration != 0))
 800396c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800396e:	b11c      	cbz	r4, 8003978 <BSP_MotorControl_SetAcceleration+0x14>
  {
    status = motorDrvHandle->SetAcceleration(deviceId, newAcc);
 8003970:	4623      	mov	r3, r4
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(22);
  }      
  return (status);
}            
 8003972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->SetAcceleration(deviceId, newAcc);
 8003976:	4718      	bx	r3
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800397c:	b123      	cbz	r3, 8003988 <BSP_MotorControl_SetAcceleration+0x24>
    motorDrvHandle->ErrorHandler(error);
 800397e:	f640 0016 	movw	r0, #2070	; 0x816
 8003982:	4798      	blx	r3
}            
 8003984:	4620      	mov	r0, r4
 8003986:	bd10      	pop	{r4, pc}
    while(1)
 8003988:	e7fe      	b.n	8003988 <BSP_MotorControl_SetAcceleration+0x24>
 800398a:	e7fe      	b.n	800398a <BSP_MotorControl_SetAcceleration+0x26>
 800398c:	200016e4 	.word	0x200016e4

08003990 <BSP_MotorControl_SetDeceleration>:
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetDeceleration(uint8_t deviceId, float newDec)
{                                                  
  bool status = FALSE;
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDeceleration != 0))
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <BSP_MotorControl_SetDeceleration+0x28>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b17b      	cbz	r3, 80039b6 <BSP_MotorControl_SetDeceleration+0x26>
{                                                  
 8003996:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDeceleration != 0))
 8003998:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800399a:	b11c      	cbz	r4, 80039a4 <BSP_MotorControl_SetDeceleration+0x14>
  {
    status = motorDrvHandle->SetDeceleration(deviceId, newDec);
 800399c:	4623      	mov	r3, r4
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(23);
  }        
  return (status);
}        
 800399e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->SetDeceleration(deviceId, newDec);
 80039a2:	4718      	bx	r3
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80039a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039a8:	b123      	cbz	r3, 80039b4 <BSP_MotorControl_SetDeceleration+0x24>
    motorDrvHandle->ErrorHandler(error);
 80039aa:	f640 0017 	movw	r0, #2071	; 0x817
 80039ae:	4798      	blx	r3
}        
 80039b0:	4620      	mov	r0, r4
 80039b2:	bd10      	pop	{r4, pc}
    while(1)
 80039b4:	e7fe      	b.n	80039b4 <BSP_MotorControl_SetDeceleration+0x24>
 80039b6:	e7fe      	b.n	80039b6 <BSP_MotorControl_SetDeceleration+0x26>
 80039b8:	200016e4 	.word	0x200016e4

080039bc <BSP_MotorControl_SetMaxSpeed>:
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, float newMaxSpeed)
{                                                  
  bool status = FALSE;
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <BSP_MotorControl_SetMaxSpeed+0x28>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	b17b      	cbz	r3, 80039e2 <BSP_MotorControl_SetMaxSpeed+0x26>
{                                                  
 80039c2:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 80039c4:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80039c6:	b11c      	cbz	r4, 80039d0 <BSP_MotorControl_SetMaxSpeed+0x14>
  {
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 80039c8:	4623      	mov	r3, r4
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
  }     
  return (status);  
}                                                     
 80039ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 80039ce:	4718      	bx	r3
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80039d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039d4:	b123      	cbz	r3, 80039e0 <BSP_MotorControl_SetMaxSpeed+0x24>
    motorDrvHandle->ErrorHandler(error);
 80039d6:	f640 001a 	movw	r0, #2074	; 0x81a
 80039da:	4798      	blx	r3
}                                                     
 80039dc:	4620      	mov	r0, r4
 80039de:	bd10      	pop	{r4, pc}
    while(1)
 80039e0:	e7fe      	b.n	80039e0 <BSP_MotorControl_SetMaxSpeed+0x24>
 80039e2:	e7fe      	b.n	80039e2 <BSP_MotorControl_SetMaxSpeed+0x26>
 80039e4:	200016e4 	.word	0x200016e4

080039e8 <BSP_MotorControl_StepClockHandler>:
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void BSP_MotorControl_StepClockHandler(uint8_t deviceId)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->StepClockHandler != 0))
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <BSP_MotorControl_StepClockHandler+0x1c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b143      	cbz	r3, 8003a00 <BSP_MotorControl_StepClockHandler+0x18>
 80039ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80039f0:	b102      	cbz	r2, 80039f4 <BSP_MotorControl_StepClockHandler+0xc>
  {
    motorDrvHandle->StepClockHandler(deviceId);
 80039f2:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80039f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039f8:	b113      	cbz	r3, 8003a00 <BSP_MotorControl_StepClockHandler+0x18>
    motorDrvHandle->ErrorHandler(error);
 80039fa:	f640 001d 	movw	r0, #2077	; 0x81d
 80039fe:	4718      	bx	r3
    while(1)
 8003a00:	e7fe      	b.n	8003a00 <BSP_MotorControl_StepClockHandler+0x18>
 8003a02:	bf00      	nop
 8003a04:	200016e4 	.word	0x200016e4

08003a08 <BSP_MotorControl_WaitWhileActive>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_WaitWhileActive(uint8_t deviceId)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->WaitWhileActive != 0))
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <BSP_MotorControl_WaitWhileActive+0x1c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	b143      	cbz	r3, 8003a20 <BSP_MotorControl_WaitWhileActive+0x18>
 8003a0e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a10:	b102      	cbz	r2, 8003a14 <BSP_MotorControl_WaitWhileActive+0xc>
  {
    motorDrvHandle->WaitWhileActive(deviceId);
 8003a12:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a18:	b113      	cbz	r3, 8003a20 <BSP_MotorControl_WaitWhileActive+0x18>
    motorDrvHandle->ErrorHandler(error);
 8003a1a:	f640 001e 	movw	r0, #2078	; 0x81e
 8003a1e:	4718      	bx	r3
    while(1)
 8003a20:	e7fe      	b.n	8003a20 <BSP_MotorControl_WaitWhileActive+0x18>
 8003a22:	bf00      	nop
 8003a24:	200016e4 	.word	0x200016e4

08003a28 <BSP_MotorControl_CmdDisable>:
 * together, the disabling of one bridge leads to the disabling
 * of the second one
 **********************************************************/
void BSP_MotorControl_CmdDisable(uint8_t deviceId)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdDisable != 0))
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <BSP_MotorControl_CmdDisable+0x1c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	b143      	cbz	r3, 8003a40 <BSP_MotorControl_CmdDisable+0x18>
 8003a2e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a30:	b102      	cbz	r2, 8003a34 <BSP_MotorControl_CmdDisable+0xc>
  {
    motorDrvHandle->CmdDisable(deviceId);
 8003a32:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a38:	b113      	cbz	r3, 8003a40 <BSP_MotorControl_CmdDisable+0x18>
    motorDrvHandle->ErrorHandler(error);
 8003a3a:	f640 001f 	movw	r0, #2079	; 0x81f
 8003a3e:	4718      	bx	r3
    while(1)
 8003a40:	e7fe      	b.n	8003a40 <BSP_MotorControl_CmdDisable+0x18>
 8003a42:	bf00      	nop
 8003a44:	200016e4 	.word	0x200016e4

08003a48 <BSP_MotorControl_HardSetDirection>:
 * @param[in] dir FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void BSP_MotorControl_HardSetDirection(uint8_t deviceId, motorDir_t dir)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->HardSetDirection != 0))
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <BSP_MotorControl_HardSetDirection+0x1c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	b14b      	cbz	r3, 8003a62 <BSP_MotorControl_HardSetDirection+0x1a>
 8003a4e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003a52:	b102      	cbz	r2, 8003a56 <BSP_MotorControl_HardSetDirection+0xe>
  {
    motorDrvHandle->HardSetDirection(deviceId, dir);
 8003a54:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003a56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a5a:	b113      	cbz	r3, 8003a62 <BSP_MotorControl_HardSetDirection+0x1a>
    motorDrvHandle->ErrorHandler(error);
 8003a5c:	f640 0029 	movw	r0, #2089	; 0x829
 8003a60:	4718      	bx	r3
    while(1)
 8003a62:	e7fe      	b.n	8003a62 <BSP_MotorControl_HardSetDirection+0x1a>
 8003a64:	200016e4 	.word	0x200016e4

08003a68 <BSP_MotorControl_SetStopMode>:
 * @param[in] stopMode selected stop mode
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetStopMode != 0))
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <BSP_MotorControl_SetStopMode+0x1c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	b14b      	cbz	r3, 8003a82 <BSP_MotorControl_SetStopMode+0x1a>
 8003a6e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003a72:	b102      	cbz	r2, 8003a76 <BSP_MotorControl_SetStopMode+0xe>
  {
    motorDrvHandle->SetStopMode(deviceId, stopMode);
 8003a74:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a7a:	b113      	cbz	r3, 8003a82 <BSP_MotorControl_SetStopMode+0x1a>
    motorDrvHandle->ErrorHandler(error);
 8003a7c:	f640 0044 	movw	r0, #2116	; 0x844
 8003a80:	4718      	bx	r3
    while(1)
 8003a82:	e7fe      	b.n	8003a82 <BSP_MotorControl_SetStopMode+0x1a>
 8003a84:	200016e4 	.word	0x200016e4

08003a88 <BSP_MotorControl_GetDirection>:
 **********************************************************/
motorDir_t BSP_MotorControl_GetDirection(uint8_t deviceId)
{	
  motorDir_t dir = UNKNOW_DIR;
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDirection != 0))
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <BSP_MotorControl_GetDirection+0x24>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	b163      	cbz	r3, 8003aa8 <BSP_MotorControl_GetDirection+0x20>
 8003a8e:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8003a92:	b102      	cbz	r2, 8003a96 <BSP_MotorControl_GetDirection+0xe>
  {
    dir = motorDrvHandle->GetDirection(deviceId);
 8003a94:	4710      	bx	r2
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a9a:	b12b      	cbz	r3, 8003aa8 <BSP_MotorControl_GetDirection+0x20>
{	
 8003a9c:	b510      	push	{r4, lr}
    motorDrvHandle->ErrorHandler(error);
 8003a9e:	f640 0049 	movw	r0, #2121	; 0x849
 8003aa2:	4798      	blx	r3
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(73);
  }    
  return (dir);
}
 8003aa4:	20ff      	movs	r0, #255	; 0xff
 8003aa6:	bd10      	pop	{r4, pc}
    while(1)
 8003aa8:	e7fe      	b.n	8003aa8 <BSP_MotorControl_GetDirection+0x20>
 8003aaa:	bf00      	nop
 8003aac:	200016e4 	.word	0x200016e4

08003ab0 <BSP_MotorControl_SetNbDevices>:
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
  MotorControlBoardId = id;
 8003ab0:	4a2e      	ldr	r2, [pc, #184]	; (8003b6c <BSP_MotorControl_SetNbDevices+0xbc>)
  bool status = FALSE;
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8003ab2:	f641 134a 	movw	r3, #6474	; 0x194a
 8003ab6:	4298      	cmp	r0, r3
{
 8003ab8:	b510      	push	{r4, lr}
  MotorControlBoardId = id;
 8003aba:	8010      	strh	r0, [r2, #0]
{
 8003abc:	460c      	mov	r4, r1
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8003abe:	d021      	beq.n	8003b04 <BSP_MotorControl_SetNbDevices+0x54>
  {
    motorDrvHandle = L6474_GetMotorHandle();
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003ac0:	2801      	cmp	r0, #1
 8003ac2:	d039      	beq.n	8003b38 <BSP_MotorControl_SetNbDevices+0x88>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8003ac4:	f641 033e 	movw	r3, #6206	; 0x183e
 8003ac8:	4298      	cmp	r0, r3
 8003aca:	d03a      	beq.n	8003b42 <BSP_MotorControl_SetNbDevices+0x92>
  {
    motorDrvHandle = L6206_GetMotorHandle();
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8003acc:	f5b0 5fc2 	cmp.w	r0, #6208	; 0x1840
 8003ad0:	d028      	beq.n	8003b24 <BSP_MotorControl_SetNbDevices+0x74>
  {
    motorDrvHandle = L6208_GetMotorHandle();
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 8003ad2:	28dc      	cmp	r0, #220	; 0xdc
 8003ad4:	d03a      	beq.n	8003b4c <BSP_MotorControl_SetNbDevices+0x9c>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8003ad6:	f641 1346 	movw	r3, #6470	; 0x1946
 8003ada:	4298      	cmp	r0, r3
 8003adc:	d027      	beq.n	8003b2e <BSP_MotorControl_SetNbDevices+0x7e>
 8003ade:	f641 1348 	movw	r3, #6472	; 0x1948
 8003ae2:	4298      	cmp	r0, r3
 8003ae4:	d023      	beq.n	8003b2e <BSP_MotorControl_SetNbDevices+0x7e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8003ae6:	f020 0302 	bic.w	r3, r0, #2
 8003aea:	f641 1250 	movw	r2, #6480	; 0x1950
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d031      	beq.n	8003b56 <BSP_MotorControl_SetNbDevices+0xa6>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8003af2:	28f0      	cmp	r0, #240	; 0xf0
 8003af4:	d034      	beq.n	8003b60 <BSP_MotorControl_SetNbDevices+0xb0>
 8003af6:	28fa      	cmp	r0, #250	; 0xfa
 8003af8:	d032      	beq.n	8003b60 <BSP_MotorControl_SetNbDevices+0xb0>
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
  }  
  else
  {
    motorDrvHandle = 0;
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <BSP_MotorControl_SetNbDevices+0xc0>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
  }
  return (status);
}
 8003b00:	2000      	movs	r0, #0
 8003b02:	bd10      	pop	{r4, pc}
    motorDrvHandle = L6474_GetMotorHandle();
 8003b04:	f7ff fe88 	bl	8003818 <L6474_GetMotorHandle>
 8003b08:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <BSP_MotorControl_SetNbDevices+0xc0>)
 8003b0a:	6018      	str	r0, [r3, #0]
  if ((motorDrvHandle != 0)&&
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d0f7      	beq.n	8003b00 <BSP_MotorControl_SetNbDevices+0x50>
      (motorDrvHandle->SetNbDevices != 0)&&
 8003b10:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
  if ((motorDrvHandle != 0)&&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f3      	beq.n	8003b00 <BSP_MotorControl_SetNbDevices+0x50>
      (motorDrvHandle->SetNbDevices != 0)&&
 8003b18:	2c00      	cmp	r4, #0
 8003b1a:	d0f1      	beq.n	8003b00 <BSP_MotorControl_SetNbDevices+0x50>
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8003b1c:	4620      	mov	r0, r4
}
 8003b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8003b22:	4718      	bx	r3
    motorDrvHandle = L6208_GetMotorHandle();
 8003b24:	f7ff fe82 	bl	800382c <L6208_GetMotorHandle>
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <BSP_MotorControl_SetNbDevices+0xc0>)
 8003b2a:	6018      	str	r0, [r3, #0]
 8003b2c:	e7ee      	b.n	8003b0c <BSP_MotorControl_SetNbDevices+0x5c>
    motorDrvHandle = l647x_GetMotorHandle();
 8003b2e:	f7ff fe75 	bl	800381c <l647x_GetMotorHandle>
 8003b32:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <BSP_MotorControl_SetNbDevices+0xc0>)
 8003b34:	6018      	str	r0, [r3, #0]
 8003b36:	e7e9      	b.n	8003b0c <BSP_MotorControl_SetNbDevices+0x5c>
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8003b38:	f7ff fe74 	bl	8003824 <Powerstep01_GetMotorHandle>
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <BSP_MotorControl_SetNbDevices+0xc0>)
 8003b3e:	6018      	str	r0, [r3, #0]
 8003b40:	e7e4      	b.n	8003b0c <BSP_MotorControl_SetNbDevices+0x5c>
    motorDrvHandle = L6206_GetMotorHandle();
 8003b42:	f7ff fe71 	bl	8003828 <L6206_GetMotorHandle>
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <BSP_MotorControl_SetNbDevices+0xc0>)
 8003b48:	6018      	str	r0, [r3, #0]
 8003b4a:	e7df      	b.n	8003b0c <BSP_MotorControl_SetNbDevices+0x5c>
    motorDrvHandle = Stspin220_GetMotorHandle();
 8003b4c:	f7fe f9e0 	bl	8001f10 <Stspin220_GetMotorHandle>
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <BSP_MotorControl_SetNbDevices+0xc0>)
 8003b52:	6018      	str	r0, [r3, #0]
 8003b54:	e7da      	b.n	8003b0c <BSP_MotorControl_SetNbDevices+0x5c>
    motorDrvHandle = l648x_GetMotorHandle();
 8003b56:	f7ff fe63 	bl	8003820 <l648x_GetMotorHandle>
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <BSP_MotorControl_SetNbDevices+0xc0>)
 8003b5c:	6018      	str	r0, [r3, #0]
 8003b5e:	e7d5      	b.n	8003b0c <BSP_MotorControl_SetNbDevices+0x5c>
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8003b60:	f7ff fe66 	bl	8003830 <Stspin240_250_GetMotorHandle>
 8003b64:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <BSP_MotorControl_SetNbDevices+0xc0>)
 8003b66:	6018      	str	r0, [r3, #0]
 8003b68:	e7d0      	b.n	8003b0c <BSP_MotorControl_SetNbDevices+0x5c>
 8003b6a:	bf00      	nop
 8003b6c:	200016e0 	.word	0x200016e0
 8003b70:	200016e4 	.word	0x200016e4

08003b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b74:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <HAL_InitTick+0x40>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	b90b      	cbnz	r3, 8003b80 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b7c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b80:	490d      	ldr	r1, [pc, #52]	; (8003bb8 <HAL_InitTick+0x44>)
 8003b82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b86:	4605      	mov	r5, r0
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	6808      	ldr	r0, [r1, #0]
 8003b8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b92:	f000 ff41 	bl	8004a18 <HAL_SYSTICK_Config>
 8003b96:	4604      	mov	r4, r0
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d1ef      	bne.n	8003b7c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b9c:	2d0f      	cmp	r5, #15
 8003b9e:	d8ed      	bhi.n	8003b7c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	f000 fed6 	bl	8004958 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <HAL_InitTick+0x48>)
 8003bae:	4620      	mov	r0, r4
 8003bb0:	601d      	str	r5, [r3, #0]
}
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	200001a0 	.word	0x200001a0
 8003bb8:	2000002c 	.word	0x2000002c
 8003bbc:	200001a4 	.word	0x200001a4

08003bc0 <HAL_Init>:
{
 8003bc0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc2:	2003      	movs	r0, #3
 8003bc4:	f000 feb6 	bl	8004934 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f7ff ffd3 	bl	8003b74 <HAL_InitTick>
 8003bce:	b110      	cbz	r0, 8003bd6 <HAL_Init+0x16>
    status = HAL_ERROR;
 8003bd0:	2401      	movs	r4, #1
}
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	4604      	mov	r4, r0
    HAL_MspInit();
 8003bd8:	f7fd fd22 	bl	8001620 <HAL_MspInit>
}
 8003bdc:	4620      	mov	r0, r4
 8003bde:	bd10      	pop	{r4, pc}

08003be0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003be0:	4a03      	ldr	r2, [pc, #12]	; (8003bf0 <HAL_IncTick+0x10>)
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <HAL_IncTick+0x14>)
 8003be4:	6811      	ldr	r1, [r2, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	440b      	add	r3, r1
 8003bea:	6013      	str	r3, [r2, #0]
}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	200016e8 	.word	0x200016e8
 8003bf4:	200001a0 	.word	0x200001a0

08003bf8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003bf8:	4b01      	ldr	r3, [pc, #4]	; (8003c00 <HAL_GetTick+0x8>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	200016e8 	.word	0x200016e8

08003c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7ff fff6 	bl	8003bf8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003c0e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003c10:	d002      	beq.n	8003c18 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8003c12:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <HAL_Delay+0x20>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c18:	f7ff ffee 	bl	8003bf8 <HAL_GetTick>
 8003c1c:	1b43      	subs	r3, r0, r5
 8003c1e:	42a3      	cmp	r3, r4
 8003c20:	d3fa      	bcc.n	8003c18 <HAL_Delay+0x14>
  {
  }
}
 8003c22:	bd38      	pop	{r3, r4, r5, pc}
 8003c24:	200001a0 	.word	0x200001a0

08003c28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c28:	b530      	push	{r4, r5, lr}
 8003c2a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c30:	2800      	cmp	r0, #0
 8003c32:	f000 80b7 	beq.w	8003da4 <HAL_ADC_Init+0x17c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c36:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8003c38:	4604      	mov	r4, r0
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	f000 808e 	beq.w	8003d5c <HAL_ADC_Init+0x134>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c40:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c42:	6893      	ldr	r3, [r2, #8]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	d505      	bpl.n	8003c54 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c48:	6893      	ldr	r3, [r2, #8]
 8003c4a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c52:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c54:	6893      	ldr	r3, [r2, #8]
 8003c56:	00dd      	lsls	r5, r3, #3
 8003c58:	d419      	bmi.n	8003c8e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c5a:	4b60      	ldr	r3, [pc, #384]	; (8003ddc <HAL_ADC_Init+0x1b4>)
 8003c5c:	4860      	ldr	r0, [pc, #384]	; (8003de0 <HAL_ADC_Init+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003c60:	6891      	ldr	r1, [r2, #8]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	fba0 0303 	umull	r0, r3, r0, r3
 8003c68:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003c72:	3301      	adds	r3, #1
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003c7a:	6091      	str	r1, [r2, #8]
 8003c7c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003c7e:	9b01      	ldr	r3, [sp, #4]
 8003c80:	b12b      	cbz	r3, 8003c8e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003c82:	9b01      	ldr	r3, [sp, #4]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003c88:	9b01      	ldr	r3, [sp, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f9      	bne.n	8003c82 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c8e:	6893      	ldr	r3, [r2, #8]
 8003c90:	00d8      	lsls	r0, r3, #3
 8003c92:	d455      	bmi.n	8003d40 <HAL_ADC_Init+0x118>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c9e:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca0:	4303      	orrs	r3, r0
 8003ca2:	65a3      	str	r3, [r4, #88]	; 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca4:	6893      	ldr	r3, [r2, #8]
 8003ca6:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003caa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cac:	d14f      	bne.n	8003d4e <HAL_ADC_Init+0x126>
 8003cae:	06d9      	lsls	r1, r3, #27
 8003cb0:	d44d      	bmi.n	8003d4e <HAL_ADC_Init+0x126>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cb4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cbe:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc0:	07db      	lsls	r3, r3, #31
 8003cc2:	d410      	bmi.n	8003ce6 <HAL_ADC_Init+0xbe>
 8003cc4:	4947      	ldr	r1, [pc, #284]	; (8003de4 <HAL_ADC_Init+0x1bc>)
 8003cc6:	4b48      	ldr	r3, [pc, #288]	; (8003de8 <HAL_ADC_Init+0x1c0>)
 8003cc8:	6889      	ldr	r1, [r1, #8]
 8003cca:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	4947      	ldr	r1, [pc, #284]	; (8003dec <HAL_ADC_Init+0x1c4>)
 8003cd0:	6889      	ldr	r1, [r1, #8]
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	07dd      	lsls	r5, r3, #31
 8003cd6:	d406      	bmi.n	8003ce6 <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003cd8:	4945      	ldr	r1, [pc, #276]	; (8003df0 <HAL_ADC_Init+0x1c8>)
 8003cda:	6865      	ldr	r5, [r4, #4]
 8003cdc:	688b      	ldr	r3, [r1, #8]
 8003cde:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003ce2:	432b      	orrs	r3, r5
 8003ce4:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8003ce6:	68e5      	ldr	r5, [r4, #12]
 8003ce8:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cea:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8003cee:	432b      	orrs	r3, r5
 8003cf0:	68a5      	ldr	r5, [r4, #8]
 8003cf2:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cf4:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cf6:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8003cf8:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d00:	d04b      	beq.n	8003d9a <HAL_ADC_Init+0x172>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003d04:	b121      	cbz	r1, 8003d10 <HAL_ADC_Init+0xe8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003d06:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d08:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003d0c:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d0e:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d10:	68d5      	ldr	r5, [r2, #12]
 8003d12:	4938      	ldr	r1, [pc, #224]	; (8003df4 <HAL_ADC_Init+0x1cc>)
 8003d14:	4029      	ands	r1, r5
 8003d16:	430b      	orrs	r3, r1
 8003d18:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d1a:	6893      	ldr	r3, [r2, #8]
 8003d1c:	0759      	lsls	r1, r3, #29
 8003d1e:	d523      	bpl.n	8003d68 <HAL_ADC_Init+0x140>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d20:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d040      	beq.n	8003daa <HAL_ADC_Init+0x182>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d28:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003d2a:	f023 030f 	bic.w	r3, r3, #15
 8003d2e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003d3c:	b003      	add	sp, #12
 8003d3e:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d40:	6893      	ldr	r3, [r2, #8]
 8003d42:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d46:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d4c:	d0af      	beq.n	8003cae <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003d50:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d52:	f043 0310 	orr.w	r3, r3, #16
 8003d56:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003d58:	b003      	add	sp, #12
 8003d5a:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003d5c:	f7fd fc78 	bl	8001650 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003d60:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003d62:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8003d66:	e76b      	b.n	8003c40 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d68:	6893      	ldr	r3, [r2, #8]
 8003d6a:	071b      	lsls	r3, r3, #28
 8003d6c:	d4d9      	bmi.n	8003d22 <HAL_ADC_Init+0xfa>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d6e:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d70:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d74:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d76:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d7a:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d7c:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d80:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d84:	430b      	orrs	r3, r1
 8003d86:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003d88:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d014      	beq.n	8003dba <HAL_ADC_Init+0x192>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d90:	6913      	ldr	r3, [r2, #16]
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	6113      	str	r3, [r2, #16]
 8003d98:	e7c3      	b.n	8003d22 <HAL_ADC_Init+0xfa>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d9c:	3901      	subs	r1, #1
 8003d9e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003da2:	e7ae      	b.n	8003d02 <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 8003da4:	2001      	movs	r0, #1
}
 8003da6:	b003      	add	sp, #12
 8003da8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003daa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003dac:	69e3      	ldr	r3, [r4, #28]
 8003dae:	f021 010f 	bic.w	r1, r1, #15
 8003db2:	3b01      	subs	r3, #1
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6313      	str	r3, [r2, #48]	; 0x30
 8003db8:	e7ba      	b.n	8003d30 <HAL_ADC_Init+0x108>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003dba:	6911      	ldr	r1, [r2, #16]
 8003dbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003dbe:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003dc0:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003dc4:	f021 0104 	bic.w	r1, r1, #4
 8003dc8:	432b      	orrs	r3, r5
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6113      	str	r3, [r2, #16]
 8003dda:	e7a2      	b.n	8003d22 <HAL_ADC_Init+0xfa>
 8003ddc:	2000002c 	.word	0x2000002c
 8003de0:	053e2d63 	.word	0x053e2d63
 8003de4:	50040000 	.word	0x50040000
 8003de8:	50040100 	.word	0x50040100
 8003dec:	50040200 	.word	0x50040200
 8003df0:	50040300 	.word	0x50040300
 8003df4:	fff0c007 	.word	0xfff0c007

08003df8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003df8:	6803      	ldr	r3, [r0, #0]
 8003dfa:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop

08003e00 <HAL_ADC_LevelOutOfWindowCallback>:
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop

08003e04 <HAL_ADC_ErrorCallback>:
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop

08003e08 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e0a:	6803      	ldr	r3, [r0, #0]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e0c:	4a8e      	ldr	r2, [pc, #568]	; (8004048 <HAL_ADC_IRQHandler+0x240>)
 8003e0e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e10:	685e      	ldr	r6, [r3, #4]
 8003e12:	6897      	ldr	r7, [r2, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003e14:	07a9      	lsls	r1, r5, #30
{
 8003e16:	4604      	mov	r4, r0
 8003e18:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003e1c:	d502      	bpl.n	8003e24 <HAL_ADC_IRQHandler+0x1c>
 8003e1e:	07b2      	lsls	r2, r6, #30
 8003e20:	f100 809f 	bmi.w	8003f62 <HAL_ADC_IRQHandler+0x15a>
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e24:	0769      	lsls	r1, r5, #29
 8003e26:	d579      	bpl.n	8003f1c <HAL_ADC_IRQHandler+0x114>
 8003e28:	0772      	lsls	r2, r6, #29
 8003e2a:	d577      	bpl.n	8003f1c <HAL_ADC_IRQHandler+0x114>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e2c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003e2e:	06d2      	lsls	r2, r2, #27
 8003e30:	d403      	bmi.n	8003e3a <HAL_ADC_IRQHandler+0x32>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e32:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003e40:	d11c      	bne.n	8003e7c <HAL_ADC_IRQHandler+0x74>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e42:	4a82      	ldr	r2, [pc, #520]	; (800404c <HAL_ADC_IRQHandler+0x244>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	f000 80dd 	beq.w	8004004 <HAL_ADC_IRQHandler+0x1fc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e4a:	68da      	ldr	r2, [r3, #12]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003e4c:	0490      	lsls	r0, r2, #18
 8003e4e:	d415      	bmi.n	8003e7c <HAL_ADC_IRQHandler+0x74>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	0711      	lsls	r1, r2, #28
 8003e54:	d512      	bpl.n	8003e7c <HAL_ADC_IRQHandler+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	0752      	lsls	r2, r2, #29
 8003e5a:	f100 80e3 	bmi.w	8004024 <HAL_ADC_IRQHandler+0x21c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	f022 020c 	bic.w	r2, r2, #12
 8003e64:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6c:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e70:	04db      	lsls	r3, r3, #19
 8003e72:	d403      	bmi.n	8003e7c <HAL_ADC_IRQHandler+0x74>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6563      	str	r3, [r4, #84]	; 0x54
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f7fd f8df 	bl	8001040 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	220c      	movs	r2, #12
 8003e86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e88:	06a8      	lsls	r0, r5, #26
 8003e8a:	d54d      	bpl.n	8003f28 <HAL_ADC_IRQHandler+0x120>
 8003e8c:	06b1      	lsls	r1, r6, #26
 8003e8e:	d54b      	bpl.n	8003f28 <HAL_ADC_IRQHandler+0x120>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e90:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003e92:	06d1      	lsls	r1, r2, #27
 8003e94:	d403      	bmi.n	8003e9e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e96:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e9c:	6562      	str	r2, [r4, #84]	; 0x54
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e9e:	496b      	ldr	r1, [pc, #428]	; (800404c <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ea2:	68d8      	ldr	r0, [r3, #12]
 8003ea4:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003ea6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003eaa:	d068      	beq.n	8003f7e <HAL_ADC_IRQHandler+0x176>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003eac:	68d9      	ldr	r1, [r3, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003eae:	b9d2      	cbnz	r2, 8003ee6 <HAL_ADC_IRQHandler+0xde>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003eb0:	018a      	lsls	r2, r1, #6
 8003eb2:	f100 809f 	bmi.w	8003ff4 <HAL_ADC_IRQHandler+0x1ec>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	0650      	lsls	r0, r2, #25
 8003eba:	d514      	bpl.n	8003ee6 <HAL_ADC_IRQHandler+0xde>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ebc:	0289      	lsls	r1, r1, #10
 8003ebe:	d412      	bmi.n	8003ee6 <HAL_ADC_IRQHandler+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	0712      	lsls	r2, r2, #28
 8003ec4:	f100 80b7 	bmi.w	8004036 <HAL_ADC_IRQHandler+0x22e>
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ece:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003ed0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed6:	6563      	str	r3, [r4, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ed8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003eda:	05d8      	lsls	r0, r3, #23
 8003edc:	d403      	bmi.n	8003ee6 <HAL_ADC_IRQHandler+0xde>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ede:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6563      	str	r3, [r4, #84]	; 0x54
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f000 fcaa 	bl	8004840 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	2260      	movs	r2, #96	; 0x60
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ef2:	0629      	lsls	r1, r5, #24
 8003ef4:	d501      	bpl.n	8003efa <HAL_ADC_IRQHandler+0xf2>
 8003ef6:	0632      	lsls	r2, r6, #24
 8003ef8:	d455      	bmi.n	8003fa6 <HAL_ADC_IRQHandler+0x19e>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003efa:	05e8      	lsls	r0, r5, #23
 8003efc:	d501      	bpl.n	8003f02 <HAL_ADC_IRQHandler+0xfa>
 8003efe:	05f1      	lsls	r1, r6, #23
 8003f00:	d45c      	bmi.n	8003fbc <HAL_ADC_IRQHandler+0x1b4>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f02:	05aa      	lsls	r2, r5, #22
 8003f04:	d501      	bpl.n	8003f0a <HAL_ADC_IRQHandler+0x102>
 8003f06:	05b0      	lsls	r0, r6, #22
 8003f08:	d441      	bmi.n	8003f8e <HAL_ADC_IRQHandler+0x186>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f0a:	06e9      	lsls	r1, r5, #27
 8003f0c:	d501      	bpl.n	8003f12 <HAL_ADC_IRQHandler+0x10a>
 8003f0e:	06f2      	lsls	r2, r6, #27
 8003f10:	d40f      	bmi.n	8003f32 <HAL_ADC_IRQHandler+0x12a>
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003f12:	0568      	lsls	r0, r5, #21
 8003f14:	d501      	bpl.n	8003f1a <HAL_ADC_IRQHandler+0x112>
 8003f16:	0571      	lsls	r1, r6, #21
 8003f18:	d45c      	bmi.n	8003fd4 <HAL_ADC_IRQHandler+0x1cc>
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f1c:	0728      	lsls	r0, r5, #28
 8003f1e:	d5b3      	bpl.n	8003e88 <HAL_ADC_IRQHandler+0x80>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f20:	0731      	lsls	r1, r6, #28
 8003f22:	d483      	bmi.n	8003e2c <HAL_ADC_IRQHandler+0x24>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f24:	06a8      	lsls	r0, r5, #26
 8003f26:	d4b1      	bmi.n	8003e8c <HAL_ADC_IRQHandler+0x84>
 8003f28:	066a      	lsls	r2, r5, #25
 8003f2a:	d5e2      	bpl.n	8003ef2 <HAL_ADC_IRQHandler+0xea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f2c:	0670      	lsls	r0, r6, #25
 8003f2e:	d5e0      	bpl.n	8003ef2 <HAL_ADC_IRQHandler+0xea>
 8003f30:	e7ae      	b.n	8003e90 <HAL_ADC_IRQHandler+0x88>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f32:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003f34:	b132      	cbz	r2, 8003f44 <HAL_ADC_IRQHandler+0x13c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f36:	2f00      	cmp	r7, #0
 8003f38:	d069      	beq.n	800400e <HAL_ADC_IRQHandler+0x206>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003f3a:	4a43      	ldr	r2, [pc, #268]	; (8004048 <HAL_ADC_IRQHandler+0x240>)
 8003f3c:	6892      	ldr	r2, [r2, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f3e:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8003f42:	d00b      	beq.n	8003f5c <HAL_ADC_IRQHandler+0x154>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f4a:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f4e:	f043 0302 	orr.w	r3, r3, #2
 8003f52:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8003f54:	4620      	mov	r0, r4
 8003f56:	f7ff ff55 	bl	8003e04 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e7d7      	b.n	8003f12 <HAL_ADC_IRQHandler+0x10a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f62:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003f64:	06d8      	lsls	r0, r3, #27
 8003f66:	d403      	bmi.n	8003f70 <HAL_ADC_IRQHandler+0x168>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003f68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f6e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003f70:	4620      	mov	r0, r4
 8003f72:	f000 fc6d 	bl	8004850 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e752      	b.n	8003e24 <HAL_ADC_IRQHandler+0x1c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f7e:	2f00      	cmp	r7, #0
 8003f80:	d094      	beq.n	8003eac <HAL_ADC_IRQHandler+0xa4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f82:	1fb9      	subs	r1, r7, #6
 8003f84:	2901      	cmp	r1, #1
 8003f86:	d991      	bls.n	8003eac <HAL_ADC_IRQHandler+0xa4>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f88:	4931      	ldr	r1, [pc, #196]	; (8004050 <HAL_ADC_IRQHandler+0x248>)
 8003f8a:	68c9      	ldr	r1, [r1, #12]
 8003f8c:	e78f      	b.n	8003eae <HAL_ADC_IRQHandler+0xa6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f96:	4620      	mov	r0, r4
 8003f98:	f000 fc58 	bl	800484c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e7b1      	b.n	8003f0a <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fa6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f7ff ff26 	bl	8003e00 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e79e      	b.n	8003efa <HAL_ADC_IRQHandler+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003fbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc2:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 fc3f 	bl	8004848 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e796      	b.n	8003f02 <HAL_ADC_IRQHandler+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003fd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fda:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fdc:	6da2      	ldr	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fde:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fe2:	f042 0208 	orr.w	r2, r2, #8
 8003fe6:	65a2      	str	r2, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003fe8:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fea:	6019      	str	r1, [r3, #0]
}
 8003fec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003ff0:	f000 bc28 	b.w	8004844 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ff4:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003ff8:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003ffc:	4302      	orrs	r2, r0
 8003ffe:	f47f af72 	bne.w	8003ee6 <HAL_ADC_IRQHandler+0xde>
 8004002:	e758      	b.n	8003eb6 <HAL_ADC_IRQHandler+0xae>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004004:	2f09      	cmp	r7, #9
 8004006:	d906      	bls.n	8004016 <HAL_ADC_IRQHandler+0x20e>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004008:	4a11      	ldr	r2, [pc, #68]	; (8004050 <HAL_ADC_IRQHandler+0x248>)
 800400a:	68d2      	ldr	r2, [r2, #12]
 800400c:	e71e      	b.n	8003e4c <HAL_ADC_IRQHandler+0x44>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	07d7      	lsls	r7, r2, #31
 8004012:	d5a3      	bpl.n	8003f5c <HAL_ADC_IRQHandler+0x154>
 8004014:	e796      	b.n	8003f44 <HAL_ADC_IRQHandler+0x13c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004016:	f240 2221 	movw	r2, #545	; 0x221
 800401a:	40fa      	lsrs	r2, r7
 800401c:	07d2      	lsls	r2, r2, #31
 800401e:	f53f af14 	bmi.w	8003e4a <HAL_ADC_IRQHandler+0x42>
 8004022:	e7f1      	b.n	8004008 <HAL_ADC_IRQHandler+0x200>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004024:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004026:	f043 0310 	orr.w	r3, r3, #16
 800402a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	65a3      	str	r3, [r4, #88]	; 0x58
 8004034:	e722      	b.n	8003e7c <HAL_ADC_IRQHandler+0x74>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004036:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004038:	f043 0310 	orr.w	r3, r3, #16
 800403c:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	65a3      	str	r3, [r4, #88]	; 0x58
 8004046:	e74e      	b.n	8003ee6 <HAL_ADC_IRQHandler+0xde>
 8004048:	50040300 	.word	0x50040300
 800404c:	50040100 	.word	0x50040100
 8004050:	50040000 	.word	0x50040000

08004054 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004054:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004056:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 800405a:	b083      	sub	sp, #12
 800405c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800405e:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004060:	f04f 0000 	mov.w	r0, #0
 8004064:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004066:	f000 812e 	beq.w	80042c6 <HAL_ADC_ConfigChannel+0x272>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800406a:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 800406c:	2001      	movs	r0, #1
 800406e:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004072:	68a2      	ldr	r2, [r4, #8]
 8004074:	f012 0204 	ands.w	r2, r2, #4
 8004078:	d15a      	bne.n	8004130 <HAL_ADC_ConfigChannel+0xdc>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800407a:	6848      	ldr	r0, [r1, #4]
 800407c:	2805      	cmp	r0, #5
 800407e:	f240 8097 	bls.w	80041b0 <HAL_ADC_ConfigChannel+0x15c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004082:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8004084:	f04f 0e1f 	mov.w	lr, #31
 8004088:	f000 001f 	and.w	r0, r0, #31
 800408c:	fa0e fe00 	lsl.w	lr, lr, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004090:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8004094:	ea6f 060e 	mvn.w	r6, lr
 8004098:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800409a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  MODIFY_REG(*preg,
 800409e:	f3c5 6c84 	ubfx	ip, r5, #26, #5
 80040a2:	f85e 5002 	ldr.w	r5, [lr, r2]
 80040a6:	fa0c f000 	lsl.w	r0, ip, r0
 80040aa:	46f4      	mov	ip, lr
 80040ac:	ea05 0e06 	and.w	lr, r5, r6
 80040b0:	ea40 000e 	orr.w	r0, r0, lr
 80040b4:	f84c 0002 	str.w	r0, [ip, r2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040b8:	68a2      	ldr	r2, [r4, #8]
 80040ba:	0756      	lsls	r6, r2, #29
 80040bc:	d546      	bpl.n	800414c <HAL_ADC_ConfigChannel+0xf8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040be:	68a2      	ldr	r2, [r4, #8]
 80040c0:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040c2:	68a0      	ldr	r0, [r4, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c4:	07c5      	lsls	r5, r0, #31
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040c6:	4616      	mov	r6, r2
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c8:	d413      	bmi.n	80040f2 <HAL_ADC_ConfigChannel+0x9e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040ca:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80040cc:	48b9      	ldr	r0, [pc, #740]	; (80043b4 <HAL_ADC_ConfigChannel+0x360>)
 80040ce:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 80040d2:	f007 0c18 	and.w	ip, r7, #24
 80040d6:	fa20 f00c 	lsr.w	r0, r0, ip
 80040da:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80040de:	4010      	ands	r0, r2
 80040e0:	ea25 050c 	bic.w	r5, r5, ip
 80040e4:	4328      	orrs	r0, r5
 80040e6:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040ea:	48b3      	ldr	r0, [pc, #716]	; (80043b8 <HAL_ADC_ConfigChannel+0x364>)
 80040ec:	4287      	cmp	r7, r0
 80040ee:	f000 8099 	beq.w	8004224 <HAL_ADC_ConfigChannel+0x1d0>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040f2:	4ab2      	ldr	r2, [pc, #712]	; (80043bc <HAL_ADC_ConfigChannel+0x368>)
 80040f4:	4216      	tst	r6, r2
 80040f6:	d027      	beq.n	8004148 <HAL_ADC_ConfigChannel+0xf4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040f8:	4ab1      	ldr	r2, [pc, #708]	; (80043c0 <HAL_ADC_ConfigChannel+0x36c>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040fa:	49b2      	ldr	r1, [pc, #712]	; (80043c4 <HAL_ADC_ConfigChannel+0x370>)
 80040fc:	6890      	ldr	r0, [r2, #8]
 80040fe:	428e      	cmp	r6, r1
 8004100:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8004104:	d01d      	beq.n	8004142 <HAL_ADC_ConfigChannel+0xee>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004106:	49b0      	ldr	r1, [pc, #704]	; (80043c8 <HAL_ADC_ConfigChannel+0x374>)
 8004108:	428e      	cmp	r6, r1
 800410a:	f000 80df 	beq.w	80042cc <HAL_ADC_ConfigChannel+0x278>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800410e:	49af      	ldr	r1, [pc, #700]	; (80043cc <HAL_ADC_ConfigChannel+0x378>)
 8004110:	428e      	cmp	r6, r1
 8004112:	d119      	bne.n	8004148 <HAL_ADC_ConfigChannel+0xf4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004114:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004118:	d116      	bne.n	8004148 <HAL_ADC_ConfigChannel+0xf4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800411a:	49ad      	ldr	r1, [pc, #692]	; (80043d0 <HAL_ADC_ConfigChannel+0x37c>)
 800411c:	428c      	cmp	r4, r1
 800411e:	d113      	bne.n	8004148 <HAL_ADC_ConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004120:	6891      	ldr	r1, [r2, #8]
 8004122:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004126:	4329      	orrs	r1, r5
 8004128:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800412c:	6091      	str	r1, [r2, #8]
}
 800412e:	e003      	b.n	8004138 <HAL_ADC_ConfigChannel+0xe4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004132:	f042 0220 	orr.w	r2, r2, #32
 8004136:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800413e:	b003      	add	sp, #12
 8004140:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004142:	0200      	lsls	r0, r0, #8
 8004144:	f140 80ff 	bpl.w	8004346 <HAL_ADC_ConfigChannel+0x2f2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004148:	2000      	movs	r0, #0
 800414a:	e7f5      	b.n	8004138 <HAL_ADC_ConfigChannel+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800414c:	68a2      	ldr	r2, [r4, #8]
 800414e:	0712      	lsls	r2, r2, #28
 8004150:	d466      	bmi.n	8004220 <HAL_ADC_ConfigChannel+0x1cc>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004152:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(*preg,
 8004154:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004156:	0dc6      	lsrs	r6, r0, #23
 8004158:	f006 0604 	and.w	r6, r6, #4
 800415c:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8004160:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004164:	fa02 f700 	lsl.w	r7, r2, r0
 8004168:	f04f 0c07 	mov.w	ip, #7
 800416c:	5972      	ldr	r2, [r6, r5]
 800416e:	fa0c f000 	lsl.w	r0, ip, r0
 8004172:	ea22 0200 	bic.w	r2, r2, r0
 8004176:	433a      	orrs	r2, r7
 8004178:	5172      	str	r2, [r6, r5]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800417a:	690e      	ldr	r6, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800417c:	68e2      	ldr	r2, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800417e:	2e04      	cmp	r6, #4
 8004180:	d01e      	beq.n	80041c0 <HAL_ADC_ConfigChannel+0x16c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004182:	f104 0760 	add.w	r7, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004186:	f3c2 02c1 	ubfx	r2, r2, #3, #2
  MODIFY_REG(*preg,
 800418a:	f857 c026 	ldr.w	ip, [r7, r6, lsl #2]
 800418e:	4d91      	ldr	r5, [pc, #580]	; (80043d4 <HAL_ADC_ConfigChannel+0x380>)
 8004190:	0050      	lsls	r0, r2, #1
 8004192:	680a      	ldr	r2, [r1, #0]
 8004194:	ea0c 0505 	and.w	r5, ip, r5
 8004198:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800419c:	4315      	orrs	r5, r2
 800419e:	694a      	ldr	r2, [r1, #20]
 80041a0:	4082      	lsls	r2, r0
 80041a2:	432a      	orrs	r2, r5
 80041a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041a8:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
 80041ac:	680a      	ldr	r2, [r1, #0]
}
 80041ae:	e788      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x6e>
      switch (sConfig->Rank)
 80041b0:	3802      	subs	r0, #2
 80041b2:	2803      	cmp	r0, #3
 80041b4:	f200 81b0 	bhi.w	8004518 <HAL_ADC_ConfigChannel+0x4c4>
 80041b8:	e8df f000 	tbb	[pc, r0]
 80041bc:	aca7a29d 	.word	0xaca7a29d
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041c0:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041c2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80041c4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80041c6:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041ca:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	f040 8106 	bne.w	80043e0 <HAL_ADC_ConfigChannel+0x38c>
 80041d4:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041d8:	42a8      	cmp	r0, r5
 80041da:	f000 8156 	beq.w	800448a <HAL_ADC_ConfigChannel+0x436>
 80041de:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80041e0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041e2:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041e6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80041ea:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80041ee:	42ae      	cmp	r6, r5
 80041f0:	f000 8171 	beq.w	80044d6 <HAL_ADC_ConfigChannel+0x482>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041f4:	6886      	ldr	r6, [r0, #8]
 80041f6:	6886      	ldr	r6, [r0, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041f8:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041fc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004200:	42ae      	cmp	r6, r5
 8004202:	f000 8156 	beq.w	80044b2 <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004206:	68c6      	ldr	r6, [r0, #12]
 8004208:	68c6      	ldr	r6, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800420a:	f100 070c 	add.w	r7, r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800420e:	f3c6 6084 	ubfx	r0, r6, #26, #5
 8004212:	4285      	cmp	r5, r0
 8004214:	f47f af55 	bne.w	80040c2 <HAL_ADC_ConfigChannel+0x6e>
  MODIFY_REG(*preg,
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800421e:	603a      	str	r2, [r7, #0]
 8004220:	680a      	ldr	r2, [r1, #0]
}
 8004222:	e74e      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x6e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004224:	f1bc 0f00 	cmp.w	ip, #0
 8004228:	d07c      	beq.n	8004324 <HAL_ADC_ConfigChannel+0x2d0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800422e:	2800      	cmp	r0, #0
 8004230:	f000 8107 	beq.w	8004442 <HAL_ADC_ConfigChannel+0x3ee>
  return __builtin_clz(value);
 8004234:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004238:	3001      	adds	r0, #1
 800423a:	f000 001f 	and.w	r0, r0, #31
 800423e:	2809      	cmp	r0, #9
 8004240:	f240 80ff 	bls.w	8004442 <HAL_ADC_ConfigChannel+0x3ee>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8004248:	2800      	cmp	r0, #0
 800424a:	f000 8156 	beq.w	80044fa <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800424e:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004252:	3001      	adds	r0, #1
 8004254:	0680      	lsls	r0, r0, #26
 8004256:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800425e:	2d00      	cmp	r5, #0
 8004260:	f000 8150 	beq.w	8004504 <HAL_ADC_ConfigChannel+0x4b0>
  return __builtin_clz(value);
 8004264:	fab5 f585 	clz	r5, r5
 8004268:	3501      	adds	r5, #1
 800426a:	f005 051f 	and.w	r5, r5, #31
 800426e:	2601      	movs	r6, #1
 8004270:	fa06 f505 	lsl.w	r5, r6, r5
 8004274:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800427a:	2a00      	cmp	r2, #0
 800427c:	f000 8140 	beq.w	8004500 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004280:	fab2 f282 	clz	r2, r2
 8004284:	3201      	adds	r2, #1
 8004286:	f002 051f 	and.w	r5, r2, #31
 800428a:	f06f 061d 	mvn.w	r6, #29
 800428e:	2203      	movs	r2, #3
 8004290:	fb12 6205 	smlabb	r2, r2, r5, r6
 8004294:	0512      	lsls	r2, r2, #20
 8004296:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800429a:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800429c:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 800429e:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042a0:	f006 0604 	and.w	r6, r6, #4
 80042a4:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 80042a8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80042ac:	fa00 f702 	lsl.w	r7, r0, r2
 80042b0:	f04f 0c07 	mov.w	ip, #7
 80042b4:	5970      	ldr	r0, [r6, r5]
 80042b6:	fa0c f202 	lsl.w	r2, ip, r2
 80042ba:	ea20 0202 	bic.w	r2, r0, r2
 80042be:	433a      	orrs	r2, r7
 80042c0:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042c2:	680e      	ldr	r6, [r1, #0]
}
 80042c4:	e715      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 80042c6:	2002      	movs	r0, #2
}
 80042c8:	b003      	add	sp, #12
 80042ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042cc:	01c1      	lsls	r1, r0, #7
 80042ce:	f53f af3b 	bmi.w	8004148 <HAL_ADC_ConfigChannel+0xf4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042d2:	4a3f      	ldr	r2, [pc, #252]	; (80043d0 <HAL_ADC_ConfigChannel+0x37c>)
 80042d4:	4294      	cmp	r4, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_ADC_ConfigChannel+0x28e>
 80042d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80042dc:	4294      	cmp	r4, r2
 80042de:	f47f af33 	bne.w	8004148 <HAL_ADC_ConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042e2:	4937      	ldr	r1, [pc, #220]	; (80043c0 <HAL_ADC_ConfigChannel+0x36c>)
 80042e4:	688a      	ldr	r2, [r1, #8]
 80042e6:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80042ea:	432a      	orrs	r2, r5
 80042ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042f0:	2000      	movs	r0, #0
 80042f2:	608a      	str	r2, [r1, #8]
}
 80042f4:	e720      	b.n	8004138 <HAL_ADC_ConfigChannel+0xe4>
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80042f6:	200c      	movs	r0, #12
 80042f8:	6048      	str	r0, [r1, #4]
          break;
 80042fa:	f46f 36f8 	mvn.w	r6, #126976	; 0x1f000
 80042fe:	e6cb      	b.n	8004098 <HAL_ADC_ConfigChannel+0x44>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004300:	2012      	movs	r0, #18
 8004302:	6048      	str	r0, [r1, #4]
          break;
 8004304:	f46f 06f8 	mvn.w	r6, #8126464	; 0x7c0000
 8004308:	e6c6      	b.n	8004098 <HAL_ADC_ConfigChannel+0x44>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800430a:	2018      	movs	r0, #24
 800430c:	6048      	str	r0, [r1, #4]
          break;
 800430e:	f06f 56f8 	mvn.w	r6, #520093696	; 0x1f000000
 8004312:	e6c1      	b.n	8004098 <HAL_ADC_ConfigChannel+0x44>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004318:	604a      	str	r2, [r1, #4]
          break;
 800431a:	2000      	movs	r0, #0
 800431c:	f06f 061f 	mvn.w	r6, #31
 8004320:	2204      	movs	r2, #4
 8004322:	e6b9      	b.n	8004098 <HAL_ADC_ConfigChannel+0x44>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004324:	0e92      	lsrs	r2, r2, #26
 8004326:	1c50      	adds	r0, r2, #1
 8004328:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800432c:	2e09      	cmp	r6, #9
 800432e:	d832      	bhi.n	8004396 <HAL_ADC_ConfigChannel+0x342>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004330:	0685      	lsls	r5, r0, #26
 8004332:	2201      	movs	r2, #1
 8004334:	40b2      	lsls	r2, r6
 8004336:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800433a:	4315      	orrs	r5, r2
 800433c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004340:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004342:	432a      	orrs	r2, r5
 8004344:	e7aa      	b.n	800429c <HAL_ADC_ConfigChannel+0x248>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004346:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 800434a:	4294      	cmp	r4, r2
 800434c:	d004      	beq.n	8004358 <HAL_ADC_ConfigChannel+0x304>
 800434e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8004352:	4294      	cmp	r4, r2
 8004354:	f47f aef8 	bne.w	8004148 <HAL_ADC_ConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004358:	4919      	ldr	r1, [pc, #100]	; (80043c0 <HAL_ADC_ConfigChannel+0x36c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800435a:	481f      	ldr	r0, [pc, #124]	; (80043d8 <HAL_ADC_ConfigChannel+0x384>)
 800435c:	688a      	ldr	r2, [r1, #8]
 800435e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004362:	4315      	orrs	r5, r2
 8004364:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 8004368:	608d      	str	r5, [r1, #8]
 800436a:	6802      	ldr	r2, [r0, #0]
 800436c:	491b      	ldr	r1, [pc, #108]	; (80043dc <HAL_ADC_ConfigChannel+0x388>)
 800436e:	0992      	lsrs	r2, r2, #6
 8004370:	fba1 1202 	umull	r1, r2, r1, r2
 8004374:	0992      	lsrs	r2, r2, #6
 8004376:	3201      	adds	r2, #1
 8004378:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800437c:	0092      	lsls	r2, r2, #2
 800437e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004380:	9a01      	ldr	r2, [sp, #4]
 8004382:	2a00      	cmp	r2, #0
 8004384:	f43f aee0 	beq.w	8004148 <HAL_ADC_ConfigChannel+0xf4>
            wait_loop_index--;
 8004388:	9a01      	ldr	r2, [sp, #4]
 800438a:	3a01      	subs	r2, #1
 800438c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800438e:	9a01      	ldr	r2, [sp, #4]
 8004390:	2a00      	cmp	r2, #0
 8004392:	d1f9      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x334>
 8004394:	e6d8      	b.n	8004148 <HAL_ADC_ConfigChannel+0xf4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004396:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800439a:	0680      	lsls	r0, r0, #26
 800439c:	3a1e      	subs	r2, #30
 800439e:	2501      	movs	r5, #1
 80043a0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80043a4:	0512      	lsls	r2, r2, #20
 80043a6:	fa05 f606 	lsl.w	r6, r5, r6
 80043aa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80043ae:	4330      	orrs	r0, r6
 80043b0:	e773      	b.n	800429a <HAL_ADC_ConfigChannel+0x246>
 80043b2:	bf00      	nop
 80043b4:	0007ffff 	.word	0x0007ffff
 80043b8:	407f0000 	.word	0x407f0000
 80043bc:	80080000 	.word	0x80080000
 80043c0:	50040300 	.word	0x50040300
 80043c4:	c7520000 	.word	0xc7520000
 80043c8:	cb840000 	.word	0xcb840000
 80043cc:	80000001 	.word	0x80000001
 80043d0:	50040000 	.word	0x50040000
 80043d4:	03fff000 	.word	0x03fff000
 80043d8:	2000002c 	.word	0x2000002c
 80043dc:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80043e4:	b11d      	cbz	r5, 80043ee <HAL_ADC_ConfigChannel+0x39a>
  return __builtin_clz(value);
 80043e6:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043ea:	42a8      	cmp	r0, r5
 80043ec:	d04d      	beq.n	800448a <HAL_ADC_ConfigChannel+0x436>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043ee:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80043f0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f2:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043f6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80043fa:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004402:	b11d      	cbz	r5, 800440c <HAL_ADC_ConfigChannel+0x3b8>
  return __builtin_clz(value);
 8004404:	fab5 f585 	clz	r5, r5
 8004408:	42ae      	cmp	r6, r5
 800440a:	d064      	beq.n	80044d6 <HAL_ADC_ConfigChannel+0x482>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800440c:	6885      	ldr	r5, [r0, #8]
 800440e:	6886      	ldr	r6, [r0, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004410:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004414:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800441c:	b11d      	cbz	r5, 8004426 <HAL_ADC_ConfigChannel+0x3d2>
  return __builtin_clz(value);
 800441e:	fab5 f585 	clz	r5, r5
 8004422:	42ae      	cmp	r6, r5
 8004424:	d045      	beq.n	80044b2 <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004426:	68c5      	ldr	r5, [r0, #12]
 8004428:	68c5      	ldr	r5, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800442a:	f100 070c 	add.w	r7, r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800442e:	f3c5 6084 	ubfx	r0, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004436:	2d00      	cmp	r5, #0
 8004438:	f43f ae43 	beq.w	80040c2 <HAL_ADC_ConfigChannel+0x6e>
  return __builtin_clz(value);
 800443c:	fab5 f585 	clz	r5, r5
 8004440:	e6e7      	b.n	8004212 <HAL_ADC_ConfigChannel+0x1be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004446:	2d00      	cmp	r5, #0
 8004448:	d063      	beq.n	8004512 <HAL_ADC_ConfigChannel+0x4be>
  return __builtin_clz(value);
 800444a:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800444e:	3501      	adds	r5, #1
 8004450:	06ad      	lsls	r5, r5, #26
 8004452:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800445a:	2800      	cmp	r0, #0
 800445c:	d057      	beq.n	800450e <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 800445e:	fab0 f080 	clz	r0, r0
 8004462:	3001      	adds	r0, #1
 8004464:	f000 001f 	and.w	r0, r0, #31
 8004468:	2601      	movs	r6, #1
 800446a:	fa06 f000 	lsl.w	r0, r6, r0
 800446e:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004470:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004474:	2a00      	cmp	r2, #0
 8004476:	d047      	beq.n	8004508 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004478:	fab2 f082 	clz	r0, r2
 800447c:	3001      	adds	r0, #1
 800447e:	f000 001f 	and.w	r0, r0, #31
 8004482:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004486:	0502      	lsls	r2, r0, #20
 8004488:	e75b      	b.n	8004342 <HAL_ADC_ConfigChannel+0x2ee>
  MODIFY_REG(*preg,
 800448a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800448c:	4620      	mov	r0, r4
 800448e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004492:	f840 2f60 	str.w	r2, [r0, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004496:	6e62      	ldr	r2, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004498:	680a      	ldr	r2, [r1, #0]
 800449a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800449c:	f3c2 0512 	ubfx	r5, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044a0:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044a4:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044a8:	2d00      	cmp	r5, #0
 80044aa:	d1a8      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x3aa>
 80044ac:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80044b0:	e69d      	b.n	80041ee <HAL_ADC_ConfigChannel+0x19a>
  MODIFY_REG(*preg,
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044b8:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044ba:	68c2      	ldr	r2, [r0, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044bc:	680a      	ldr	r2, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044be:	f100 070c 	add.w	r7, r0, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044c2:	68c0      	ldr	r0, [r0, #12]
 80044c4:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044c8:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044cc:	2d00      	cmp	r5, #0
 80044ce:	d1b0      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x3de>
 80044d0:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80044d4:	e69d      	b.n	8004212 <HAL_ADC_ConfigChannel+0x1be>
  MODIFY_REG(*preg,
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044dc:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044de:	6882      	ldr	r2, [r0, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044e0:	680a      	ldr	r2, [r1, #0]
 80044e2:	6886      	ldr	r6, [r0, #8]
 80044e4:	f3c2 0512 	ubfx	r5, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044e8:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044ec:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044f0:	2d00      	cmp	r5, #0
 80044f2:	d191      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x3c4>
 80044f4:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80044f8:	e682      	b.n	8004200 <HAL_ADC_ConfigChannel+0x1ac>
 80044fa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80044fe:	e6ac      	b.n	800425a <HAL_ADC_ConfigChannel+0x206>
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <HAL_ADC_ConfigChannel+0x4d0>)
 8004502:	e6ca      	b.n	800429a <HAL_ADC_ConfigChannel+0x246>
 8004504:	2502      	movs	r5, #2
 8004506:	e6b5      	b.n	8004274 <HAL_ADC_ConfigChannel+0x220>
 8004508:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800450c:	e719      	b.n	8004342 <HAL_ADC_ConfigChannel+0x2ee>
 800450e:	2002      	movs	r0, #2
 8004510:	e7ad      	b.n	800446e <HAL_ADC_ConfigChannel+0x41a>
 8004512:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004516:	e79e      	b.n	8004456 <HAL_ADC_ConfigChannel+0x402>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004518:	2006      	movs	r0, #6
 800451a:	6048      	str	r0, [r1, #4]
          break;
 800451c:	f46f 66f8 	mvn.w	r6, #1984	; 0x7c0
 8004520:	e5ba      	b.n	8004098 <HAL_ADC_ConfigChannel+0x44>
 8004522:	bf00      	nop
 8004524:	fe500000 	.word	0xfe500000

08004528 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	b082      	sub	sp, #8
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800452c:	2200      	movs	r2, #0

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800452e:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8004530:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004532:	689a      	ldr	r2, [r3, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004534:	07d2      	lsls	r2, r2, #31
 8004536:	d42c      	bmi.n	8004592 <ADC_Enable+0x6a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004538:	6899      	ldr	r1, [r3, #8]
 800453a:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <ADC_Enable+0xb0>)
 800453c:	4211      	tst	r1, r2
 800453e:	4604      	mov	r4, r0
 8004540:	d12a      	bne.n	8004598 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8004542:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004544:	4925      	ldr	r1, [pc, #148]	; (80045dc <ADC_Enable+0xb4>)
  MODIFY_REG(ADCx->CR,
 8004546:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800454a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004554:	688b      	ldr	r3, [r1, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	d428      	bmi.n	80045ac <ADC_Enable+0x84>
        wait_loop_index--;
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800455a:	f7ff fb4d 	bl	8003bf8 <HAL_GetTick>

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8004564:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004566:	d414      	bmi.n	8004592 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8004568:	4e1d      	ldr	r6, [pc, #116]	; (80045e0 <ADC_Enable+0xb8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800456a:	689a      	ldr	r2, [r3, #8]
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800456c:	07d0      	lsls	r0, r2, #31
 800456e:	d404      	bmi.n	800457a <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	4032      	ands	r2, r6
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	609a      	str	r2, [r3, #8]
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800457a:	f7ff fb3d 	bl	8003bf8 <HAL_GetTick>
 800457e:	1b43      	subs	r3, r0, r5
 8004580:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004582:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004584:	d902      	bls.n	800458c <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	07d1      	lsls	r1, r2, #31
 800458a:	d505      	bpl.n	8004598 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	07d2      	lsls	r2, r2, #31
 8004590:	d5eb      	bpl.n	800456a <ADC_Enable+0x42>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004592:	2000      	movs	r0, #0
}
 8004594:	b002      	add	sp, #8
 8004596:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004598:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800459a:	f043 0310 	orr.w	r3, r3, #16
 800459e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80045a2:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a4:	4303      	orrs	r3, r0
 80045a6:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80045a8:	b002      	add	sp, #8
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ac:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <ADC_Enable+0xbc>)
 80045ae:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <ADC_Enable+0xc0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	099b      	lsrs	r3, r3, #6
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	3301      	adds	r3, #1
 80045bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80045c4:	9b01      	ldr	r3, [sp, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0c7      	beq.n	800455a <ADC_Enable+0x32>
        wait_loop_index--;
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80045d0:	9b01      	ldr	r3, [sp, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f9      	bne.n	80045ca <ADC_Enable+0xa2>
 80045d6:	e7c0      	b.n	800455a <ADC_Enable+0x32>
 80045d8:	8000003f 	.word	0x8000003f
 80045dc:	50040300 	.word	0x50040300
 80045e0:	7fffffc0 	.word	0x7fffffc0
 80045e4:	2000002c 	.word	0x2000002c
 80045e8:	053e2d63 	.word	0x053e2d63

080045ec <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80045ec:	4a4e      	ldr	r2, [pc, #312]	; (8004728 <HAL_ADC_Start_IT+0x13c>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045ee:	6803      	ldr	r3, [r0, #0]
{
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045f4:	689d      	ldr	r5, [r3, #8]
 80045f6:	f015 0504 	ands.w	r5, r5, #4
 80045fa:	d15a      	bne.n	80046b2 <HAL_ADC_Start_IT+0xc6>
    __HAL_LOCK(hadc);
 80045fc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004600:	2b01      	cmp	r3, #1
 8004602:	4604      	mov	r4, r0
 8004604:	d055      	beq.n	80046b2 <HAL_ADC_Start_IT+0xc6>
 8004606:	2301      	movs	r3, #1
 8004608:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800460c:	f7ff ff8c 	bl	8004528 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004610:	2800      	cmp	r0, #0
 8004612:	d150      	bne.n	80046b6 <HAL_ADC_Start_IT+0xca>
      ADC_STATE_CLR_SET(hadc->State,
 8004614:	6d62      	ldr	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004616:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8004618:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004624:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004626:	4a41      	ldr	r2, [pc, #260]	; (800472c <HAL_ADC_Start_IT+0x140>)
 8004628:	4293      	cmp	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800462a:	f006 061f 	and.w	r6, r6, #31
 800462e:	d067      	beq.n	8004700 <HAL_ADC_Start_IT+0x114>
 8004630:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004632:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004634:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004638:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800463a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      switch (hadc->Init.EOCSelection)
 800463c:	6965      	ldr	r5, [r4, #20]
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800463e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004642:	bf1c      	itt	ne
 8004644:	6da2      	ldrne	r2, [r4, #88]	; 0x58
 8004646:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800464a:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800464c:	221c      	movs	r2, #28
 800464e:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8004650:	2200      	movs	r2, #0
 8004652:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	f022 021c 	bic.w	r2, r2, #28
 800465c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800465e:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8004660:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004662:	bf0c      	ite	eq
 8004664:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004668:	f042 0204 	orrne.w	r2, r2, #4
 800466c:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800466e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004670:	b91a      	cbnz	r2, 800467a <HAL_ADC_Start_IT+0x8e>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	f042 0210 	orr.w	r2, r2, #16
 8004678:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800467a:	428b      	cmp	r3, r1
 800467c:	d024      	beq.n	80046c8 <HAL_ADC_Start_IT+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800467e:	2e09      	cmp	r6, #9
 8004680:	d91c      	bls.n	80046bc <HAL_ADC_Start_IT+0xd0>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004682:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004684:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004688:	6562      	str	r2, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800468a:	68ca      	ldr	r2, [r1, #12]
 800468c:	0192      	lsls	r2, r2, #6
 800468e:	d50f      	bpl.n	80046b0 <HAL_ADC_Start_IT+0xc4>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004690:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004692:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004696:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800469a:	6562      	str	r2, [r4, #84]	; 0x54
          switch (hadc->Init.EOCSelection)
 800469c:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800469e:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 80046a0:	d03a      	beq.n	8004718 <HAL_ADC_Start_IT+0x12c>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80046a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	f042 0220 	orr.w	r2, r2, #32
 80046ae:	605a      	str	r2, [r3, #4]
}
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 80046b2:	2002      	movs	r0, #2
}
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 80046b6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046bc:	f240 2221 	movw	r2, #545	; 0x221
 80046c0:	fa22 f606 	lsr.w	r6, r2, r6
 80046c4:	07f6      	lsls	r6, r6, #31
 80046c6:	d5dc      	bpl.n	8004682 <HAL_ADC_Start_IT+0x96>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	0191      	lsls	r1, r2, #6
 80046cc:	d50f      	bpl.n	80046ee <HAL_ADC_Start_IT+0x102>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80046d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80046d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046d8:	6562      	str	r2, [r4, #84]	; 0x54
          switch (hadc->Init.EOCSelection)
 80046da:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80046dc:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 80046de:	d013      	beq.n	8004708 <HAL_ADC_Start_IT+0x11c>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80046e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	f042 0220 	orr.w	r2, r2, #32
 80046ec:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046f4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80046f8:	f042 0204 	orr.w	r2, r2, #4
 80046fc:	609a      	str	r2, [r3, #8]
}
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004700:	490b      	ldr	r1, [pc, #44]	; (8004730 <HAL_ADC_Start_IT+0x144>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004702:	2e00      	cmp	r6, #0
 8004704:	d095      	beq.n	8004632 <HAL_ADC_Start_IT+0x46>
 8004706:	e798      	b.n	800463a <HAL_ADC_Start_IT+0x4e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004708:	f022 0220 	bic.w	r2, r2, #32
 800470c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004714:	605a      	str	r2, [r3, #4]
              break;
 8004716:	e7ea      	b.n	80046ee <HAL_ADC_Start_IT+0x102>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004718:	f022 0220 	bic.w	r2, r2, #32
 800471c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004724:	605a      	str	r2, [r3, #4]
}
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	50040300 	.word	0x50040300
 800472c:	50040100 	.word	0x50040100
 8004730:	50040000 	.word	0x50040000

08004734 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004734:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004736:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	0795      	lsls	r5, r2, #30
 800473c:	d502      	bpl.n	8004744 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800473e:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004740:	2000      	movs	r0, #0
}
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004746:	07d4      	lsls	r4, r2, #31
 8004748:	d52b      	bpl.n	80047a2 <ADC_Disable+0x6e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	f002 020d 	and.w	r2, r2, #13
 8004750:	2a01      	cmp	r2, #1
 8004752:	4604      	mov	r4, r0
 8004754:	d008      	beq.n	8004768 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004756:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004758:	f043 0310 	orr.w	r3, r3, #16
 800475c:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475e:	6da3      	ldr	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8004760:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004762:	4303      	orrs	r3, r0
 8004764:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004766:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800476e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004772:	2103      	movs	r1, #3
 8004774:	f042 0202 	orr.w	r2, r2, #2
 8004778:	609a      	str	r2, [r3, #8]
 800477a:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800477c:	f7ff fa3c 	bl	8003bf8 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8004786:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004788:	d50b      	bpl.n	80047a2 <ADC_Disable+0x6e>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800478a:	f7ff fa35 	bl	8003bf8 <HAL_GetTick>
 800478e:	1b40      	subs	r0, r0, r5
 8004790:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004792:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004794:	d902      	bls.n	800479c <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	07d2      	lsls	r2, r2, #31
 800479a:	d4dc      	bmi.n	8004756 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	07db      	lsls	r3, r3, #31
 80047a0:	d4f3      	bmi.n	800478a <ADC_Disable+0x56>
  return HAL_OK;
 80047a2:	2000      	movs	r0, #0
}
 80047a4:	bd38      	pop	{r3, r4, r5, pc}
 80047a6:	bf00      	nop

080047a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80047a8:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047aa:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80047ae:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80047b0:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80047b2:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80047b4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80047b6:	d040      	beq.n	800483a <HAL_ADCEx_Calibration_Start+0x92>
 80047b8:	2301      	movs	r3, #1
 80047ba:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047be:	4604      	mov	r4, r0
 80047c0:	460d      	mov	r5, r1
 80047c2:	f7ff ffb7 	bl	8004734 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047c6:	b9e8      	cbnz	r0, 8004804 <HAL_ADCEx_Calibration_Start+0x5c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80047ca:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80047cc:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80047d0:	f022 0202 	bic.w	r2, r2, #2
 80047d4:	f042 0202 	orr.w	r2, r2, #2
 80047d8:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80047da:	68b3      	ldr	r3, [r6, #8]
 80047dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80047e0:	f005 4180 	and.w	r1, r5, #1073741824	; 0x40000000
 80047e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047e8:	430b      	orrs	r3, r1
 80047ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ee:	60b3      	str	r3, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80047f0:	68b3      	ldr	r3, [r6, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	db0f      	blt.n	8004816 <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047f8:	f023 0303 	bic.w	r3, r3, #3
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	6563      	str	r3, [r4, #84]	; 0x54
 8004802:	e003      	b.n	800480c <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004804:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004806:	f043 0310 	orr.w	r3, r3, #16
 800480a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800480c:	2300      	movs	r3, #0
 800480e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8004812:	b002      	add	sp, #8
 8004814:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index++;
 8004816:	9b01      	ldr	r3, [sp, #4]
 8004818:	3301      	adds	r3, #1
 800481a:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800481c:	9b01      	ldr	r3, [sp, #4]
 800481e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004822:	d3e5      	bcc.n	80047f0 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8004824:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004826:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800482a:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 800482c:	f043 0310 	orr.w	r3, r3, #16
 8004830:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8004832:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        return HAL_ERROR;
 8004836:	2001      	movs	r0, #1
 8004838:	e7eb      	b.n	8004812 <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 800483a:	2002      	movs	r0, #2
}
 800483c:	b002      	add	sp, #8
 800483e:	bd70      	pop	{r4, r5, r6, pc}

08004840 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop

0800484c <HAL_ADCEx_LevelOutOfWindow3Callback>:
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop

08004850 <HAL_ADCEx_EndOfSamplingCallback>:
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop

08004854 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004854:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004856:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800485a:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800485c:	2a01      	cmp	r2, #1
{
 800485e:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8004860:	d054      	beq.n	800490c <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8004862:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004864:	4d2f      	ldr	r5, [pc, #188]	; (8004924 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8004866:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004868:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800486a:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800486c:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800486e:	9216      	str	r2, [sp, #88]	; 0x58
  __HAL_LOCK(hadc);
 8004870:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004874:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004876:	d008      	beq.n	800488a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004878:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800487a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487e:	f041 0120 	orr.w	r1, r1, #32
 8004882:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004884:	b01a      	add	sp, #104	; 0x68
 8004886:	bcf0      	pop	{r4, r5, r6, r7}
 8004888:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800488a:	4a27      	ldr	r2, [pc, #156]	; (8004928 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 800488c:	6890      	ldr	r0, [r2, #8]
 800488e:	0740      	lsls	r0, r0, #29
 8004890:	d50b      	bpl.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004892:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004896:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 800489a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800489c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80048a4:	b01a      	add	sp, #104	; 0x68
 80048a6:	bcf0      	pop	{r4, r5, r6, r7}
 80048a8:	4770      	bx	lr
 80048aa:	68a0      	ldr	r0, [r4, #8]
 80048ac:	0745      	lsls	r5, r0, #29
 80048ae:	d4f1      	bmi.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x40>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048b0:	4d1e      	ldr	r5, [pc, #120]	; (800492c <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048b2:	b1e6      	cbz	r6, 80048ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048b4:	68a8      	ldr	r0, [r5, #8]
 80048b6:	684f      	ldr	r7, [r1, #4]
 80048b8:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 80048bc:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80048c0:	4338      	orrs	r0, r7
 80048c2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80048c6:	60a8      	str	r0, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048c8:	68a4      	ldr	r4, [r4, #8]
 80048ca:	6890      	ldr	r0, [r2, #8]
 80048cc:	4a18      	ldr	r2, [pc, #96]	; (8004930 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 80048ce:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048d0:	4320      	orrs	r0, r4
 80048d2:	4310      	orrs	r0, r2
 80048d4:	f010 0001 	ands.w	r0, r0, #1
 80048d8:	d116      	bne.n	8004908 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 80048da:	688a      	ldr	r2, [r1, #8]
 80048dc:	4316      	orrs	r6, r2
 80048de:	68aa      	ldr	r2, [r5, #8]
 80048e0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80048e4:	f022 020f 	bic.w	r2, r2, #15
 80048e8:	4316      	orrs	r6, r2
 80048ea:	60ae      	str	r6, [r5, #8]
 80048ec:	e7d7      	b.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80048ee:	68a9      	ldr	r1, [r5, #8]
 80048f0:	4e0f      	ldr	r6, [pc, #60]	; (8004930 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 80048f2:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80048f6:	60a9      	str	r1, [r5, #8]
 80048f8:	68a1      	ldr	r1, [r4, #8]
 80048fa:	6890      	ldr	r0, [r2, #8]
 80048fc:	68b2      	ldr	r2, [r6, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048fe:	4308      	orrs	r0, r1
 8004900:	4310      	orrs	r0, r2
 8004902:	f010 0001 	ands.w	r0, r0, #1
 8004906:	d005      	beq.n	8004914 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004908:	2000      	movs	r0, #0
 800490a:	e7c8      	b.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800490c:	2002      	movs	r0, #2
}
 800490e:	b01a      	add	sp, #104	; 0x68
 8004910:	bcf0      	pop	{r4, r5, r6, r7}
 8004912:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004914:	68aa      	ldr	r2, [r5, #8]
 8004916:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800491a:	f022 020f 	bic.w	r2, r2, #15
 800491e:	60aa      	str	r2, [r5, #8]
 8004920:	e7bd      	b.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8004922:	bf00      	nop
 8004924:	50040000 	.word	0x50040000
 8004928:	50040100 	.word	0x50040100
 800492c:	50040300 	.word	0x50040300
 8004930:	50040200 	.word	0x50040200

08004934 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004934:	4907      	ldr	r1, [pc, #28]	; (8004954 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004936:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004938:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800493a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800493e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004942:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004944:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004946:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800494a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800494e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <HAL_NVIC_SetPriority+0x74>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004960:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004962:	f1c3 0e07 	rsb	lr, r3, #7
 8004966:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800496a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800496e:	bf28      	it	cs
 8004970:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004974:	f1bc 0f06 	cmp.w	ip, #6
 8004978:	d91b      	bls.n	80049b2 <HAL_NVIC_SetPriority+0x5a>
 800497a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800497c:	f04f 3cff 	mov.w	ip, #4294967295
 8004980:	fa0c fc03 	lsl.w	ip, ip, r3
 8004984:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004988:	f04f 3cff 	mov.w	ip, #4294967295
 800498c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004990:	ea21 010c 	bic.w	r1, r1, ip
 8004994:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004996:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004998:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800499c:	db0c      	blt.n	80049b8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80049a2:	0109      	lsls	r1, r1, #4
 80049a4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80049a8:	b2c9      	uxtb	r1, r1
 80049aa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80049b2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b4:	4613      	mov	r3, r2
 80049b6:	e7e7      	b.n	8004988 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_NVIC_SetPriority+0x78>)
 80049ba:	f000 000f 	and.w	r0, r0, #15
 80049be:	0109      	lsls	r1, r1, #4
 80049c0:	4403      	add	r3, r0
 80049c2:	b2c9      	uxtb	r1, r1
 80049c4:	7619      	strb	r1, [r3, #24]
 80049c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80049ca:	bf00      	nop
 80049cc:	e000ed00 	.word	0xe000ed00
 80049d0:	e000ecfc 	.word	0xe000ecfc

080049d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80049d4:	2800      	cmp	r0, #0
 80049d6:	db08      	blt.n	80049ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049d8:	4a04      	ldr	r2, [pc, #16]	; (80049ec <HAL_NVIC_EnableIRQ+0x18>)
 80049da:	0941      	lsrs	r1, r0, #5
 80049dc:	2301      	movs	r3, #1
 80049de:	f000 001f 	and.w	r0, r0, #31
 80049e2:	fa03 f000 	lsl.w	r0, r3, r0
 80049e6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80049ea:	4770      	bx	lr
 80049ec:	e000e100 	.word	0xe000e100

080049f0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80049f0:	2800      	cmp	r0, #0
 80049f2:	db0d      	blt.n	8004a10 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f4:	0943      	lsrs	r3, r0, #5
 80049f6:	4907      	ldr	r1, [pc, #28]	; (8004a14 <HAL_NVIC_DisableIRQ+0x24>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	3320      	adds	r3, #32
 80049fc:	f000 001f 	and.w	r0, r0, #31
 8004a00:	fa02 f000 	lsl.w	r0, r2, r0
 8004a04:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a0c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	e000e100 	.word	0xe000e100

08004a18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a18:	3801      	subs	r0, #1
 8004a1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004a1e:	d210      	bcs.n	8004a42 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a20:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a26:	4c08      	ldr	r4, [pc, #32]	; (8004a48 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a28:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8004a2e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a32:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a34:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a36:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a38:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a3e:	6119      	str	r1, [r3, #16]
 8004a40:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004a42:	2001      	movs	r0, #1
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	db09      	blt.n	8004a64 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a50:	0943      	lsrs	r3, r0, #5
 8004a52:	4905      	ldr	r1, [pc, #20]	; (8004a68 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8004a54:	f000 001f 	and.w	r0, r0, #31
 8004a58:	2201      	movs	r2, #1
 8004a5a:	3360      	adds	r3, #96	; 0x60
 8004a5c:	fa02 f000 	lsl.w	r0, r2, r0
 8004a60:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	e000e100 	.word	0xe000e100

08004a6c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d050      	beq.n	8004b12 <HAL_DMA_Init+0xa6>
{
 8004a70:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a72:	4b32      	ldr	r3, [pc, #200]	; (8004b3c <HAL_DMA_Init+0xd0>)
 8004a74:	6804      	ldr	r4, [r0, #0]
 8004a76:	429c      	cmp	r4, r3
 8004a78:	d942      	bls.n	8004b00 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a7a:	4a31      	ldr	r2, [pc, #196]	; (8004b40 <HAL_DMA_Init+0xd4>)
 8004a7c:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <HAL_DMA_Init+0xd8>)
    hdma->DmaBaseAddress = DMA2;
 8004a7e:	4d32      	ldr	r5, [pc, #200]	; (8004b48 <HAL_DMA_Init+0xdc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a80:	4422      	add	r2, r4
 8004a82:	fba3 3202 	umull	r3, r2, r3, r2
 8004a86:	0912      	lsrs	r2, r2, #4
 8004a88:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a90:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a94:	6907      	ldr	r7, [r0, #16]
  tmp = hdma->Instance->CCR;
 8004a96:	6821      	ldr	r1, [r4, #0]
 8004a98:	6405      	str	r5, [r0, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 8004a9a:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9c:	433b      	orrs	r3, r7
 8004a9e:	6947      	ldr	r7, [r0, #20]
 8004aa0:	6442      	str	r2, [r0, #68]	; 0x44
 8004aa2:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa4:	6987      	ldr	r7, [r0, #24]
 8004aa6:	433b      	orrs	r3, r7
 8004aa8:	69c7      	ldr	r7, [r0, #28]
 8004aaa:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aac:	6a07      	ldr	r7, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004aae:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8004ab2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab6:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8004ab8:	430b      	orrs	r3, r1
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004aba:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8004abe:	6023      	str	r3, [r4, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004ac0:	d014      	beq.n	8004aec <HAL_DMA_Init+0x80>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004ac2:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_DMA_Init+0xe0>)
 8004ac4:	429d      	cmp	r5, r3
 8004ac6:	d026      	beq.n	8004b16 <HAL_DMA_Init+0xaa>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ac8:	f8d3 14a8 	ldr.w	r1, [r3, #1192]	; 0x4a8
 8004acc:	f002 021c 	and.w	r2, r2, #28
 8004ad0:	240f      	movs	r4, #15
 8004ad2:	4094      	lsls	r4, r2
 8004ad4:	ea21 0104 	bic.w	r1, r1, r4
 8004ad8:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004adc:	6841      	ldr	r1, [r0, #4]
 8004ade:	f8d3 44a8 	ldr.w	r4, [r3, #1192]	; 0x4a8
 8004ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae6:	4322      	orrs	r2, r4
 8004ae8:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aec:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004aee:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af0:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004af2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8004af6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
}
 8004afa:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004afc:	4618      	mov	r0, r3
}
 8004afe:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b00:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <HAL_DMA_Init+0xe4>)
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <HAL_DMA_Init+0xd8>)
    hdma->DmaBaseAddress = DMA1;
 8004b04:	4d11      	ldr	r5, [pc, #68]	; (8004b4c <HAL_DMA_Init+0xe0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b06:	4422      	add	r2, r4
 8004b08:	fba3 3202 	umull	r3, r2, r3, r2
 8004b0c:	0912      	lsrs	r2, r2, #4
 8004b0e:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8004b10:	e7bb      	b.n	8004a8a <HAL_DMA_Init+0x1e>
    return HAL_ERROR;
 8004b12:	2001      	movs	r0, #1
}
 8004b14:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b16:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8004b1a:	f002 021c 	and.w	r2, r2, #28
 8004b1e:	240f      	movs	r4, #15
 8004b20:	4094      	lsls	r4, r2
 8004b22:	ea21 0104 	bic.w	r1, r1, r4
 8004b26:	f8c5 10a8 	str.w	r1, [r5, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004b2a:	6843      	ldr	r3, [r0, #4]
 8004b2c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8004b30:	4093      	lsls	r3, r2
 8004b32:	430b      	orrs	r3, r1
 8004b34:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 8004b38:	e7d8      	b.n	8004aec <HAL_DMA_Init+0x80>
 8004b3a:	bf00      	nop
 8004b3c:	40020407 	.word	0x40020407
 8004b40:	bffdfbf8 	.word	0xbffdfbf8
 8004b44:	cccccccd 	.word	0xcccccccd
 8004b48:	40020400 	.word	0x40020400
 8004b4c:	40020000 	.word	0x40020000
 8004b50:	bffdfff8 	.word	0xbffdfff8

08004b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b54:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b56:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8004b5a:	2c01      	cmp	r4, #1
 8004b5c:	d03d      	beq.n	8004bda <HAL_DMA_Start_IT+0x86>
 8004b5e:	2401      	movs	r4, #1
 8004b60:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b64:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8004b68:	2c01      	cmp	r4, #1
 8004b6a:	fa5f fc84 	uxtb.w	ip, r4
 8004b6e:	d005      	beq.n	8004b7c <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b70:	2300      	movs	r3, #0
 8004b72:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8004b76:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8004b78:	2002      	movs	r0, #2
}
 8004b7a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b7c:	2502      	movs	r5, #2
 8004b7e:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    __HAL_DMA_DISABLE(hdma);
 8004b82:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b84:	2500      	movs	r5, #0
 8004b86:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004b88:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b8a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8004b8c:	f026 0601 	bic.w	r6, r6, #1
 8004b90:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b92:	f005 051c 	and.w	r5, r5, #28
 8004b96:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004b98:	fa0c f505 	lsl.w	r5, ip, r5
 8004b9c:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b9e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ba0:	6883      	ldr	r3, [r0, #8]
 8004ba2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8004ba4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ba6:	bf0b      	itete	eq
 8004ba8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004baa:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004bac:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004bae:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004bb0:	b153      	cbz	r3, 8004bc8 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	f043 030e 	orr.w	r3, r3, #14
 8004bb8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004bc2:	6023      	str	r3, [r4, #0]
}
 8004bc4:	bc70      	pop	{r4, r5, r6}
 8004bc6:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	f023 0304 	bic.w	r3, r3, #4
 8004bce:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f043 030a 	orr.w	r3, r3, #10
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	e7ef      	b.n	8004bba <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 8004bda:	2002      	movs	r0, #2
}
 8004bdc:	bc70      	pop	{r4, r5, r6}
 8004bde:	4770      	bx	lr

08004be0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004be0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d006      	beq.n	8004bf6 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be8:	2204      	movs	r2, #4
    __HAL_UNLOCK(hdma);
 8004bea:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bec:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004bee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bf6:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bf8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bfa:	6811      	ldr	r1, [r2, #0]
 8004bfc:	f021 010e 	bic.w	r1, r1, #14
 8004c00:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004c02:	6811      	ldr	r1, [r2, #0]
 8004c04:	f021 0101 	bic.w	r1, r1, #1
 8004c08:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c0a:	f04f 0c01 	mov.w	ip, #1
 8004c0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004c10:	f003 031c 	and.w	r3, r3, #28
 8004c14:	fa0c f303 	lsl.w	r3, ip, r3
 8004c18:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8004c1a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004c1c:	f880 c025 	strb.w	ip, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004c20:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8004c24:	4618      	mov	r0, r3
}
 8004c26:	4770      	bx	lr

08004c28 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c28:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004c2c:	2a02      	cmp	r2, #2
 8004c2e:	d003      	beq.n	8004c38 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c30:	2204      	movs	r2, #4
 8004c32:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004c34:	2001      	movs	r0, #1
}
 8004c36:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c38:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8004c3c:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c3e:	680c      	ldr	r4, [r1, #0]
 8004c40:	f024 040e 	bic.w	r4, r4, #14
 8004c44:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004c46:	680c      	ldr	r4, [r1, #0]
 8004c48:	f024 0401 	bic.w	r4, r4, #1
 8004c4c:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c4e:	f002 021c 	and.w	r2, r2, #28
 8004c52:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004c54:	2101      	movs	r1, #1
 8004c56:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5a:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 8004c5c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004c62:	2400      	movs	r4, #0
 8004c64:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8004c68:	b112      	cbz	r2, 8004c70 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8004c6a:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004c6c:	4620      	mov	r0, r4
}
 8004c6e:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004c70:	4610      	mov	r0, r2
}
 8004c72:	bd10      	pop	{r4, pc}

08004c74 <HAL_DMA_IRQHandler>:
{
 8004c74:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c76:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c78:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8004c7a:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c7c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004c7e:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c80:	f003 031c 	and.w	r3, r3, #28
 8004c84:	2204      	movs	r2, #4
 8004c86:	409a      	lsls	r2, r3
 8004c88:	420a      	tst	r2, r1
 8004c8a:	d00e      	beq.n	8004caa <HAL_DMA_IRQHandler+0x36>
 8004c8c:	f014 0f04 	tst.w	r4, #4
 8004c90:	d00b      	beq.n	8004caa <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c92:	682b      	ldr	r3, [r5, #0]
 8004c94:	069b      	lsls	r3, r3, #26
 8004c96:	d403      	bmi.n	8004ca0 <HAL_DMA_IRQHandler+0x2c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	f023 0304 	bic.w	r3, r3, #4
 8004c9e:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004ca0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004ca2:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8004ca4:	b1cb      	cbz	r3, 8004cda <HAL_DMA_IRQHandler+0x66>
}
 8004ca6:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8004ca8:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004caa:	2202      	movs	r2, #2
 8004cac:	409a      	lsls	r2, r3
 8004cae:	420a      	tst	r2, r1
 8004cb0:	d015      	beq.n	8004cde <HAL_DMA_IRQHandler+0x6a>
 8004cb2:	f014 0f02 	tst.w	r4, #2
 8004cb6:	d012      	beq.n	8004cde <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	0699      	lsls	r1, r3, #26
 8004cbc:	d406      	bmi.n	8004ccc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cbe:	682b      	ldr	r3, [r5, #0]
 8004cc0:	f023 030a 	bic.w	r3, r3, #10
 8004cc4:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 8004ccc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cce:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e5      	bne.n	8004ca6 <HAL_DMA_IRQHandler+0x32>
}
 8004cda:	bc70      	pop	{r4, r5, r6}
 8004cdc:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004cde:	2208      	movs	r2, #8
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	420a      	tst	r2, r1
 8004ce4:	d0f9      	beq.n	8004cda <HAL_DMA_IRQHandler+0x66>
 8004ce6:	0722      	lsls	r2, r4, #28
 8004ce8:	d5f7      	bpl.n	8004cda <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cea:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8004cec:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cee:	f022 020e 	bic.w	r2, r2, #14
 8004cf2:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8004cfa:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cfc:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cfe:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004d00:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8004d04:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8004d08:	2900      	cmp	r1, #0
 8004d0a:	d0e6      	beq.n	8004cda <HAL_DMA_IRQHandler+0x66>
}
 8004d0c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004d0e:	4708      	bx	r1

08004d10 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004d10:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8004d12:	4770      	bx	lr

08004d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d18:	680c      	ldr	r4, [r1, #0]
{
 8004d1a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d1c:	2c00      	cmp	r4, #0
 8004d1e:	f000 808e 	beq.w	8004e3e <HAL_GPIO_Init+0x12a>
 8004d22:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d26:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8004f14 <HAL_GPIO_Init+0x200>
  uint32_t position = 0x00u;
 8004d2a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d2c:	f04f 0a01 	mov.w	sl, #1
 8004d30:	4688      	mov	r8, r1
 8004d32:	fa0a f603 	lsl.w	r6, sl, r3
    if (iocurrent != 0x00u)
 8004d36:	ea16 0904 	ands.w	r9, r6, r4
 8004d3a:	d079      	beq.n	8004e30 <HAL_GPIO_Init+0x11c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004d40:	f001 0203 	and.w	r2, r1, #3
 8004d44:	1e55      	subs	r5, r2, #1
 8004d46:	2d01      	cmp	r5, #1
 8004d48:	d97c      	bls.n	8004e44 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004d4a:	2a03      	cmp	r2, #3
 8004d4c:	f040 80b7 	bne.w	8004ebe <HAL_GPIO_Init+0x1aa>
        temp = GPIOx->ASCR;
 8004d50:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004d52:	ea25 0506 	bic.w	r5, r5, r6
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004d56:	f3c1 06c0 	ubfx	r6, r1, #3, #1
 8004d5a:	409e      	lsls	r6, r3
 8004d5c:	432e      	orrs	r6, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d5e:	fa02 f20c 	lsl.w	r2, r2, ip
        GPIOx->ASCR = temp;
 8004d62:	62c6      	str	r6, [r0, #44]	; 0x2c
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d64:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8004d66:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d68:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d6a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d6c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004d70:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d72:	d05d      	beq.n	8004e30 <HAL_GPIO_Init+0x11c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d74:	4d60      	ldr	r5, [pc, #384]	; (8004ef8 <HAL_GPIO_Init+0x1e4>)
 8004d76:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	662a      	str	r2, [r5, #96]	; 0x60
 8004d7e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004d80:	f002 0201 	and.w	r2, r2, #1
 8004d84:	9203      	str	r2, [sp, #12]
 8004d86:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004d88:	f023 0203 	bic.w	r2, r3, #3
 8004d8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004d90:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d94:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8004d98:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d9a:	00b6      	lsls	r6, r6, #2
 8004d9c:	250f      	movs	r5, #15
 8004d9e:	40b5      	lsls	r5, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004da0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004da4:	ea27 0505 	bic.w	r5, r7, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004da8:	d01b      	beq.n	8004de2 <HAL_GPIO_Init+0xce>
 8004daa:	4f54      	ldr	r7, [pc, #336]	; (8004efc <HAL_GPIO_Init+0x1e8>)
 8004dac:	42b8      	cmp	r0, r7
 8004dae:	f000 8090 	beq.w	8004ed2 <HAL_GPIO_Init+0x1be>
 8004db2:	4f53      	ldr	r7, [pc, #332]	; (8004f00 <HAL_GPIO_Init+0x1ec>)
 8004db4:	42b8      	cmp	r0, r7
 8004db6:	f000 8090 	beq.w	8004eda <HAL_GPIO_Init+0x1c6>
 8004dba:	4f52      	ldr	r7, [pc, #328]	; (8004f04 <HAL_GPIO_Init+0x1f0>)
 8004dbc:	42b8      	cmp	r0, r7
 8004dbe:	f000 8083 	beq.w	8004ec8 <HAL_GPIO_Init+0x1b4>
 8004dc2:	4f51      	ldr	r7, [pc, #324]	; (8004f08 <HAL_GPIO_Init+0x1f4>)
 8004dc4:	42b8      	cmp	r0, r7
 8004dc6:	f000 808d 	beq.w	8004ee4 <HAL_GPIO_Init+0x1d0>
 8004dca:	4f50      	ldr	r7, [pc, #320]	; (8004f0c <HAL_GPIO_Init+0x1f8>)
 8004dcc:	42b8      	cmp	r0, r7
 8004dce:	f000 808e 	beq.w	8004eee <HAL_GPIO_Init+0x1da>
 8004dd2:	4f4f      	ldr	r7, [pc, #316]	; (8004f10 <HAL_GPIO_Init+0x1fc>)
 8004dd4:	42b8      	cmp	r0, r7
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2706      	moveq	r7, #6
 8004dda:	2707      	movne	r7, #7
 8004ddc:	fa07 f606 	lsl.w	r6, r7, r6
 8004de0:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004de2:	6095      	str	r5, [r2, #8]
        temp = EXTI->RTSR1;
 8004de4:	f8db 2008 	ldr.w	r2, [fp, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004de8:	02cd      	lsls	r5, r1, #11
        temp &= ~(iocurrent);
 8004dea:	ea6f 0609 	mvn.w	r6, r9
 8004dee:	bf54      	ite	pl
 8004df0:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8004df2:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 8004df6:	f8cb 2008 	str.w	r2, [fp, #8]

        temp = EXTI->FTSR1;
 8004dfa:	f8db 500c 	ldr.w	r5, [fp, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dfe:	028a      	lsls	r2, r1, #10
        temp &= ~(iocurrent);
 8004e00:	bf54      	ite	pl
 8004e02:	4035      	andpl	r5, r6
        {
          temp |= iocurrent;
 8004e04:	ea49 0505 	orrmi.w	r5, r9, r5
        }
        EXTI->FTSR1 = temp;
 8004e08:	f8cb 500c 	str.w	r5, [fp, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e0c:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e10:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8004e12:	bf54      	ite	pl
 8004e14:	4035      	andpl	r5, r6
        {
          temp |= iocurrent;
 8004e16:	ea49 0505 	orrmi.w	r5, r9, r5
        }
        EXTI->EMR1 = temp;
 8004e1a:	f8cb 5004 	str.w	r5, [fp, #4]

        temp = EXTI->IMR1;
 8004e1e:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e22:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8004e24:	bf54      	ite	pl
 8004e26:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8004e28:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 8004e2c:	f8cb 2000 	str.w	r2, [fp]
      }
    }

    position++;
 8004e30:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e32:	fa34 f203 	lsrs.w	r2, r4, r3
 8004e36:	f10c 0c02 	add.w	ip, ip, #2
 8004e3a:	f47f af7a 	bne.w	8004d32 <HAL_GPIO_Init+0x1e>
  }
}
 8004e3e:	b005      	add	sp, #20
 8004e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004e44:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e48:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e4c:	2703      	movs	r7, #3
 8004e4e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004e52:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e56:	fa05 f50c 	lsl.w	r5, r5, ip
 8004e5a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OSPEEDR = temp;
 8004e5e:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e60:	43fd      	mvns	r5, r7
        temp = GPIOx->OTYPER;
 8004e62:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e64:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e68:	f3c1 1600 	ubfx	r6, r1, #4, #1
 8004e6c:	409e      	lsls	r6, r3
 8004e6e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8004e70:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8004e72:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e74:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e78:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e7a:	fa06 f60c 	lsl.w	r6, r6, ip
 8004e7e:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e80:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004e82:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e84:	fa02 f20c 	lsl.w	r2, r2, ip
 8004e88:	f47f af6d 	bne.w	8004d66 <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3u];
 8004e8c:	08df      	lsrs	r7, r3, #3
 8004e8e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e92:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8004e96:	6a3e      	ldr	r6, [r7, #32]
 8004e98:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e9a:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e9e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ea2:	fa06 f60e 	lsl.w	r6, r6, lr
 8004ea6:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ea8:	260f      	movs	r6, #15
 8004eaa:	fa06 fe0e 	lsl.w	lr, r6, lr
 8004eae:	9e00      	ldr	r6, [sp, #0]
 8004eb0:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004eb4:	9e01      	ldr	r6, [sp, #4]
 8004eb6:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004eba:	623e      	str	r6, [r7, #32]
 8004ebc:	e753      	b.n	8004d66 <HAL_GPIO_Init+0x52>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ebe:	2503      	movs	r5, #3
 8004ec0:	fa05 f50c 	lsl.w	r5, r5, ip
 8004ec4:	43ed      	mvns	r5, r5
 8004ec6:	e7d4      	b.n	8004e72 <HAL_GPIO_Init+0x15e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ec8:	2703      	movs	r7, #3
 8004eca:	fa07 f606 	lsl.w	r6, r7, r6
 8004ece:	4335      	orrs	r5, r6
 8004ed0:	e787      	b.n	8004de2 <HAL_GPIO_Init+0xce>
 8004ed2:	fa0a f606 	lsl.w	r6, sl, r6
 8004ed6:	4335      	orrs	r5, r6
 8004ed8:	e783      	b.n	8004de2 <HAL_GPIO_Init+0xce>
 8004eda:	2702      	movs	r7, #2
 8004edc:	fa07 f606 	lsl.w	r6, r7, r6
 8004ee0:	4335      	orrs	r5, r6
 8004ee2:	e77e      	b.n	8004de2 <HAL_GPIO_Init+0xce>
 8004ee4:	2704      	movs	r7, #4
 8004ee6:	fa07 f606 	lsl.w	r6, r7, r6
 8004eea:	4335      	orrs	r5, r6
 8004eec:	e779      	b.n	8004de2 <HAL_GPIO_Init+0xce>
 8004eee:	2705      	movs	r7, #5
 8004ef0:	fa07 f606 	lsl.w	r6, r7, r6
 8004ef4:	4335      	orrs	r5, r6
 8004ef6:	e774      	b.n	8004de2 <HAL_GPIO_Init+0xce>
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	48000400 	.word	0x48000400
 8004f00:	48000800 	.word	0x48000800
 8004f04:	48000c00 	.word	0x48000c00
 8004f08:	48001000 	.word	0x48001000
 8004f0c:	48001400 	.word	0x48001400
 8004f10:	48001800 	.word	0x48001800
 8004f14:	40010400 	.word	0x40010400

08004f18 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	f000 8093 	beq.w	8005044 <HAL_GPIO_DeInit+0x12c>
{
 8004f1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004f22:	4e49      	ldr	r6, [pc, #292]	; (8005048 <HAL_GPIO_DeInit+0x130>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004f24:	f8df a138 	ldr.w	sl, [pc, #312]	; 8005060 <HAL_GPIO_DeInit+0x148>
  uint32_t position = 0x00u;
 8004f28:	2300      	movs	r3, #0
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004f2a:	f04f 090f 	mov.w	r9, #15
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004f2e:	2201      	movs	r2, #1
 8004f30:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8004f32:	ea12 0e01 	ands.w	lr, r2, r1
 8004f36:	d067      	beq.n	8005008 <HAL_GPIO_DeInit+0xf0>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004f38:	f023 0503 	bic.w	r5, r3, #3
 8004f3c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004f40:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004f44:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004f48:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004f4c:	00a4      	lsls	r4, r4, #2
 8004f4e:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004f52:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004f56:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004f5a:	d017      	beq.n	8004f8c <HAL_GPIO_DeInit+0x74>
 8004f5c:	4550      	cmp	r0, sl
 8004f5e:	d059      	beq.n	8005014 <HAL_GPIO_DeInit+0xfc>
 8004f60:	4f3a      	ldr	r7, [pc, #232]	; (800504c <HAL_GPIO_DeInit+0x134>)
 8004f62:	42b8      	cmp	r0, r7
 8004f64:	d05a      	beq.n	800501c <HAL_GPIO_DeInit+0x104>
 8004f66:	4f3a      	ldr	r7, [pc, #232]	; (8005050 <HAL_GPIO_DeInit+0x138>)
 8004f68:	42b8      	cmp	r0, r7
 8004f6a:	d061      	beq.n	8005030 <HAL_GPIO_DeInit+0x118>
 8004f6c:	4f39      	ldr	r7, [pc, #228]	; (8005054 <HAL_GPIO_DeInit+0x13c>)
 8004f6e:	42b8      	cmp	r0, r7
 8004f70:	d063      	beq.n	800503a <HAL_GPIO_DeInit+0x122>
 8004f72:	4f39      	ldr	r7, [pc, #228]	; (8005058 <HAL_GPIO_DeInit+0x140>)
 8004f74:	42b8      	cmp	r0, r7
 8004f76:	d056      	beq.n	8005026 <HAL_GPIO_DeInit+0x10e>
 8004f78:	4f38      	ldr	r7, [pc, #224]	; (800505c <HAL_GPIO_DeInit+0x144>)
 8004f7a:	42b8      	cmp	r0, r7
 8004f7c:	bf14      	ite	ne
 8004f7e:	f04f 0b07 	movne.w	fp, #7
 8004f82:	f04f 0b06 	moveq.w	fp, #6
 8004f86:	fa0b f404 	lsl.w	r4, fp, r4
 8004f8a:	e000      	b.n	8004f8e <HAL_GPIO_DeInit+0x76>
 8004f8c:	2400      	movs	r4, #0
 8004f8e:	45a4      	cmp	ip, r4
 8004f90:	d113      	bne.n	8004fba <HAL_GPIO_DeInit+0xa2>
        EXTI->IMR1 &= ~(iocurrent);
 8004f92:	6834      	ldr	r4, [r6, #0]
 8004f94:	ea24 040e 	bic.w	r4, r4, lr
 8004f98:	6034      	str	r4, [r6, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004f9a:	6874      	ldr	r4, [r6, #4]
 8004f9c:	ea24 040e 	bic.w	r4, r4, lr
 8004fa0:	6074      	str	r4, [r6, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004fa2:	68f4      	ldr	r4, [r6, #12]
 8004fa4:	ea24 040e 	bic.w	r4, r4, lr
 8004fa8:	60f4      	str	r4, [r6, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004faa:	68b4      	ldr	r4, [r6, #8]
 8004fac:	ea24 040e 	bic.w	r4, r4, lr
 8004fb0:	60b4      	str	r4, [r6, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004fb2:	68ac      	ldr	r4, [r5, #8]
 8004fb4:	ea24 0408 	bic.w	r4, r4, r8
 8004fb8:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004fba:	6804      	ldr	r4, [r0, #0]
 8004fbc:	f04f 0c03 	mov.w	ip, #3
 8004fc0:	005d      	lsls	r5, r3, #1
 8004fc2:	fa0c f505 	lsl.w	r5, ip, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004fc6:	fa23 fc0c 	lsr.w	ip, r3, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004fca:	432c      	orrs	r4, r5
 8004fcc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004fd0:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004fd2:	f003 0407 	and.w	r4, r3, #7
 8004fd6:	f8dc e020 	ldr.w	lr, [ip, #32]
 8004fda:	00a4      	lsls	r4, r4, #2
 8004fdc:	fa09 f404 	lsl.w	r4, r9, r4
 8004fe0:	ea2e 0404 	bic.w	r4, lr, r4
 8004fe4:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004fe8:	6884      	ldr	r4, [r0, #8]
 8004fea:	ea24 0405 	bic.w	r4, r4, r5
 8004fee:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ff0:	6844      	ldr	r4, [r0, #4]
 8004ff2:	ea24 0402 	bic.w	r4, r4, r2
 8004ff6:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ff8:	68c4      	ldr	r4, [r0, #12]
 8004ffa:	ea24 0505 	bic.w	r5, r4, r5
 8004ffe:	60c5      	str	r5, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005000:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005002:	ea24 0202 	bic.w	r2, r4, r2
 8005006:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005008:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800500a:	fa31 f203 	lsrs.w	r2, r1, r3
 800500e:	d18e      	bne.n	8004f2e <HAL_GPIO_DeInit+0x16>
  }
}
 8005010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005014:	2701      	movs	r7, #1
 8005016:	fa07 f404 	lsl.w	r4, r7, r4
 800501a:	e7b8      	b.n	8004f8e <HAL_GPIO_DeInit+0x76>
 800501c:	f04f 0b02 	mov.w	fp, #2
 8005020:	fa0b f404 	lsl.w	r4, fp, r4
 8005024:	e7b3      	b.n	8004f8e <HAL_GPIO_DeInit+0x76>
 8005026:	f04f 0b05 	mov.w	fp, #5
 800502a:	fa0b f404 	lsl.w	r4, fp, r4
 800502e:	e7ae      	b.n	8004f8e <HAL_GPIO_DeInit+0x76>
 8005030:	f04f 0b03 	mov.w	fp, #3
 8005034:	fa0b f404 	lsl.w	r4, fp, r4
 8005038:	e7a9      	b.n	8004f8e <HAL_GPIO_DeInit+0x76>
 800503a:	f04f 0b04 	mov.w	fp, #4
 800503e:	fa0b f404 	lsl.w	r4, fp, r4
 8005042:	e7a4      	b.n	8004f8e <HAL_GPIO_DeInit+0x76>
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40010400 	.word	0x40010400
 800504c:	48000800 	.word	0x48000800
 8005050:	48000c00 	.word	0x48000c00
 8005054:	48001000 	.word	0x48001000
 8005058:	48001400 	.word	0x48001400
 800505c:	48001800 	.word	0x48001800
 8005060:	48000400 	.word	0x48000400

08005064 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005064:	6903      	ldr	r3, [r0, #16]
 8005066:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005068:	bf14      	ite	ne
 800506a:	2001      	movne	r0, #1
 800506c:	2000      	moveq	r0, #0
 800506e:	4770      	bx	lr

08005070 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005070:	b10a      	cbz	r2, 8005076 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005072:	6181      	str	r1, [r0, #24]
 8005074:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005076:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop

0800507c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800507c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800507e:	ea01 0203 	and.w	r2, r1, r3
 8005082:	ea21 0103 	bic.w	r1, r1, r3
 8005086:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800508a:	6181      	str	r1, [r0, #24]
}
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop

08005090 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005090:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8005092:	6951      	ldr	r1, [r2, #20]
 8005094:	4201      	tst	r1, r0
 8005096:	d100      	bne.n	800509a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005098:	4770      	bx	lr
{
 800509a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800509c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800509e:	f7fc fc43 	bl	8001928 <HAL_GPIO_EXTI_Callback>
  }
}
 80050a2:	bd08      	pop	{r3, pc}
 80050a4:	40010400 	.word	0x40010400

080050a8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050a8:	4b02      	ldr	r3, [pc, #8]	; (80050b4 <HAL_PWREx_GetVoltageRange+0xc>)
 80050aa:	6818      	ldr	r0, [r3, #0]
#endif
}
 80050ac:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40007000 	.word	0x40007000

080050b8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80050bc:	d00e      	beq.n	80050dc <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050be:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80050c0:	6813      	ldr	r3, [r2, #0]
 80050c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ca:	d02d      	beq.n	8005128 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050cc:	6813      	ldr	r3, [r2, #0]
 80050ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050d6:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80050dc:	4914      	ldr	r1, [pc, #80]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80050de:	680b      	ldr	r3, [r1, #0]
 80050e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d01e      	beq.n	8005128 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050ea:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050ec:	4a11      	ldr	r2, [pc, #68]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80050ee:	4812      	ldr	r0, [pc, #72]	; (8005138 <HAL_PWREx_ControlVoltageScaling+0x80>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050f8:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	2232      	movs	r2, #50	; 0x32
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005102:	694a      	ldr	r2, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005104:	fba0 0303 	umull	r0, r3, r0, r3
 8005108:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800510a:	0550      	lsls	r0, r2, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800510c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005110:	d506      	bpl.n	8005120 <HAL_PWREx_ControlVoltageScaling+0x68>
 8005112:	e000      	b.n	8005116 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8005114:	b123      	cbz	r3, 8005120 <HAL_PWREx_ControlVoltageScaling+0x68>
 8005116:	694a      	ldr	r2, [r1, #20]
 8005118:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 800511a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800511e:	d4f9      	bmi.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005120:	4b03      	ldr	r3, [pc, #12]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	055b      	lsls	r3, r3, #21
 8005126:	d401      	bmi.n	800512c <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 8005128:	2000      	movs	r0, #0
 800512a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800512c:	2003      	movs	r0, #3
}
 800512e:	4770      	bx	lr
 8005130:	40007000 	.word	0x40007000
 8005134:	2000002c 	.word	0x2000002c
 8005138:	431bde83 	.word	0x431bde83

0800513c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800513c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800513e:	4d20      	ldr	r5, [pc, #128]	; (80051c0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8005140:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005142:	00db      	lsls	r3, r3, #3
{
 8005144:	b083      	sub	sp, #12
 8005146:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005148:	d51c      	bpl.n	8005184 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800514a:	f7ff ffad 	bl	80050a8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800514e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005152:	d029      	beq.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005154:	2c80      	cmp	r4, #128	; 0x80
 8005156:	d813      	bhi.n	8005180 <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005158:	d02f      	beq.n	80051ba <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800515a:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 800515e:	fab4 f484 	clz	r4, r4
 8005162:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005164:	4917      	ldr	r1, [pc, #92]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8005166:	680b      	ldr	r3, [r1, #0]
 8005168:	f023 0307 	bic.w	r3, r3, #7
 800516c:	4323      	orrs	r3, r4
 800516e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005170:	6808      	ldr	r0, [r1, #0]
 8005172:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8005176:	1b00      	subs	r0, r0, r4
 8005178:	bf18      	it	ne
 800517a:	2001      	movne	r0, #1
 800517c:	b003      	add	sp, #12
 800517e:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 8005180:	2403      	movs	r4, #3
 8005182:	e7ef      	b.n	8005164 <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005184:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518a:	65ab      	str	r3, [r5, #88]	; 0x58
 800518c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800518e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005196:	f7ff ff87 	bl	80050a8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800519a:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800519c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80051a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a4:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051a6:	d1d5      	bne.n	8005154 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80051a8:	2c80      	cmp	r4, #128	; 0x80
 80051aa:	d904      	bls.n	80051b6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80051ac:	2ca0      	cmp	r4, #160	; 0xa0
 80051ae:	bf8c      	ite	hi
 80051b0:	2402      	movhi	r4, #2
 80051b2:	2401      	movls	r4, #1
 80051b4:	e7d6      	b.n	8005164 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051b6:	2400      	movs	r4, #0
 80051b8:	e7d4      	b.n	8005164 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 80051ba:	2402      	movs	r4, #2
 80051bc:	e7d2      	b.n	8005164 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40022000 	.word	0x40022000

080051c8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c8:	4a28      	ldr	r2, [pc, #160]	; (800526c <HAL_RCC_GetSysClockFreq+0xa4>)
 80051ca:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051cc:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ce:	f013 030c 	ands.w	r3, r3, #12
 80051d2:	d008      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x1e>
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	d038      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d034      	beq.n	8005246 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051dc:	2b08      	cmp	r3, #8
 80051de:	4824      	ldr	r0, [pc, #144]	; (8005270 <HAL_RCC_GetSysClockFreq+0xa8>)
 80051e0:	bf18      	it	ne
 80051e2:	2000      	movne	r0, #0
 80051e4:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051e6:	4a21      	ldr	r2, [pc, #132]	; (800526c <HAL_RCC_GetSysClockFreq+0xa4>)
 80051e8:	6811      	ldr	r1, [r2, #0]
 80051ea:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051ec:	bf54      	ite	pl
 80051ee:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051f2:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80051f4:	491f      	ldr	r1, [pc, #124]	; (8005274 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051f6:	bf54      	ite	pl
 80051f8:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051fc:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8005200:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005204:	b303      	cbz	r3, 8005248 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d12d      	bne.n	8005266 <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800520a:	4b18      	ldr	r3, [pc, #96]	; (800526c <HAL_RCC_GetSysClockFreq+0xa4>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005212:	2b02      	cmp	r3, #2
 8005214:	d025      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0x9a>
 8005216:	4a16      	ldr	r2, [pc, #88]	; (8005270 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005218:	2b03      	cmp	r3, #3
 800521a:	bf08      	it	eq
 800521c:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800521e:	4b13      	ldr	r3, [pc, #76]	; (800526c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005220:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005222:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800522a:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800522e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005232:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005234:	fb02 f000 	mul.w	r0, r2, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005238:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800523a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800523c:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 8005240:	fbb0 f0f3 	udiv	r0, r0, r3
 8005244:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005246:	480c      	ldr	r0, [pc, #48]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8005248:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800524a:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800524e:	2a01      	cmp	r2, #1
 8005250:	d0c9      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800525a:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800525c:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8005260:	d1d9      	bne.n	8005216 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8005262:	4805      	ldr	r0, [pc, #20]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005264:	e7db      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x56>
 8005266:	2000      	movs	r0, #0
  return sysclockfreq;
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	007a1200 	.word	0x007a1200
 8005274:	0800aa30 	.word	0x0800aa30
 8005278:	00f42400 	.word	0x00f42400

0800527c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800527c:	2800      	cmp	r0, #0
 800527e:	f000 824a 	beq.w	8005716 <HAL_RCC_OscConfig+0x49a>
{
 8005282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005286:	4aa8      	ldr	r2, [pc, #672]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005288:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800528c:	68d6      	ldr	r6, [r2, #12]
 800528e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005290:	06d8      	lsls	r0, r3, #27
{
 8005292:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005294:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005298:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800529c:	d52e      	bpl.n	80052fc <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800529e:	2d00      	cmp	r5, #0
 80052a0:	f000 8103 	beq.w	80054aa <HAL_RCC_OscConfig+0x22e>
 80052a4:	2d0c      	cmp	r5, #12
 80052a6:	f000 80fd 	beq.w	80054a4 <HAL_RCC_OscConfig+0x228>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052aa:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80052ac:	4f9e      	ldr	r7, [pc, #632]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 81d7 	beq.w	8005662 <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_MSI_ENABLE();
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80052bc:	f7fe fc9c 	bl	8003bf8 <HAL_GetTick>
 80052c0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052c2:	e006      	b.n	80052d2 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052c4:	f7fe fc98 	bl	8003bf8 <HAL_GetTick>
 80052c8:	eba0 0008 	sub.w	r0, r0, r8
 80052cc:	2802      	cmp	r0, #2
 80052ce:	f200 81d9 	bhi.w	8005684 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	079b      	lsls	r3, r3, #30
 80052d6:	d5f5      	bpl.n	80052c4 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f043 0308 	orr.w	r3, r3, #8
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	6a22      	ldr	r2, [r4, #32]
 80052e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e8:	4313      	orrs	r3, r2
 80052ea:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69e2      	ldr	r2, [r4, #28]
 80052f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80052f8:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	07d9      	lsls	r1, r3, #31
 80052fe:	f100 80a6 	bmi.w	800544e <HAL_RCC_OscConfig+0x1d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005302:	0799      	lsls	r1, r3, #30
 8005304:	d523      	bpl.n	800534e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005306:	2d04      	cmp	r5, #4
 8005308:	f000 819a 	beq.w	8005640 <HAL_RCC_OscConfig+0x3c4>
 800530c:	2d0c      	cmp	r5, #12
 800530e:	f000 8194 	beq.w	800563a <HAL_RCC_OscConfig+0x3be>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005312:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8005314:	4e84      	ldr	r6, [pc, #528]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 81cf 	beq.w	80056ba <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_HSI_ENABLE();
 800531c:	6833      	ldr	r3, [r6, #0]
 800531e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005322:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005324:	f7fe fc68 	bl	8003bf8 <HAL_GetTick>
 8005328:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532a:	e005      	b.n	8005338 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532c:	f7fe fc64 	bl	8003bf8 <HAL_GetTick>
 8005330:	1bc0      	subs	r0, r0, r7
 8005332:	2802      	cmp	r0, #2
 8005334:	f200 81a6 	bhi.w	8005684 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005338:	6833      	ldr	r3, [r6, #0]
 800533a:	055b      	lsls	r3, r3, #21
 800533c:	d5f6      	bpl.n	800532c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533e:	6873      	ldr	r3, [r6, #4]
 8005340:	6922      	ldr	r2, [r4, #16]
 8005342:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8005346:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800534a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	0719      	lsls	r1, r3, #28
 8005350:	d519      	bpl.n	8005386 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005352:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8005354:	4e74      	ldr	r6, [pc, #464]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 815b 	beq.w	8005612 <HAL_RCC_OscConfig+0x396>
      __HAL_RCC_LSI_ENABLE();
 800535c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005368:	f7fe fc46 	bl	8003bf8 <HAL_GetTick>
 800536c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800536e:	e005      	b.n	800537c <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005370:	f7fe fc42 	bl	8003bf8 <HAL_GetTick>
 8005374:	1bc0      	subs	r0, r0, r7
 8005376:	2802      	cmp	r0, #2
 8005378:	f200 8184 	bhi.w	8005684 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800537c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8005380:	079a      	lsls	r2, r3, #30
 8005382:	d5f5      	bpl.n	8005370 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	075f      	lsls	r7, r3, #29
 8005388:	d53e      	bpl.n	8005408 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800538a:	4b67      	ldr	r3, [pc, #412]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 800538c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800538e:	00d6      	lsls	r6, r2, #3
 8005390:	f100 8191 	bmi.w	80056b6 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005394:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005396:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800539a:	659a      	str	r2, [r3, #88]	; 0x58
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80053a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053a8:	4f60      	ldr	r7, [pc, #384]	; (800552c <HAL_RCC_OscConfig+0x2b0>)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	05d8      	lsls	r0, r3, #23
 80053ae:	f140 81cc 	bpl.w	800574a <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b2:	68a3      	ldr	r3, [r4, #8]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f000 8192 	beq.w	80056de <HAL_RCC_OscConfig+0x462>
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	f000 81f0 	beq.w	80057a0 <HAL_RCC_OscConfig+0x524>
 80053c0:	4f59      	ldr	r7, [pc, #356]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80053c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80053ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80053d2:	f022 0204 	bic.w	r2, r2, #4
 80053d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 8186 	bne.w	80056ec <HAL_RCC_OscConfig+0x470>
      tickstart = HAL_GetTick();
 80053e0:	f7fe fc0a 	bl	8003bf8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80053e8:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053ea:	e006      	b.n	80053fa <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f7fe fc04 	bl	8003bf8 <HAL_GetTick>
 80053f0:	eba0 0008 	sub.w	r0, r0, r8
 80053f4:	4548      	cmp	r0, r9
 80053f6:	f200 8145 	bhi.w	8005684 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053fe:	079b      	lsls	r3, r3, #30
 8005400:	d4f4      	bmi.n	80053ec <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8005402:	2e00      	cmp	r6, #0
 8005404:	f040 81b3 	bne.w	800576e <HAL_RCC_OscConfig+0x4f2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80f0 	beq.w	80055f0 <HAL_RCC_OscConfig+0x374>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005410:	2b02      	cmp	r3, #2
 8005412:	f000 809c 	beq.w	800554e <HAL_RCC_OscConfig+0x2d2>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005416:	2d0c      	cmp	r5, #12
 8005418:	f000 8095 	beq.w	8005546 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 800541c:	4c42      	ldr	r4, [pc, #264]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005424:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005426:	f7fe fbe7 	bl	8003bf8 <HAL_GetTick>
 800542a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800542c:	e005      	b.n	800543a <HAL_RCC_OscConfig+0x1be>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542e:	f7fe fbe3 	bl	8003bf8 <HAL_GetTick>
 8005432:	1b40      	subs	r0, r0, r5
 8005434:	2802      	cmp	r0, #2
 8005436:	f200 8125 	bhi.w	8005684 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8005440:	d1f5      	bne.n	800542e <HAL_RCC_OscConfig+0x1b2>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005442:	68e1      	ldr	r1, [r4, #12]
 8005444:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <HAL_RCC_OscConfig+0x2b4>)
 8005446:	400a      	ands	r2, r1
  return HAL_OK;
 8005448:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800544a:	60e2      	str	r2, [r4, #12]
 800544c:	e0d1      	b.n	80055f2 <HAL_RCC_OscConfig+0x376>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800544e:	2d08      	cmp	r5, #8
 8005450:	f000 80d5 	beq.w	80055fe <HAL_RCC_OscConfig+0x382>
 8005454:	2d0c      	cmp	r5, #12
 8005456:	f000 80cf 	beq.w	80055f8 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	f000 8114 	beq.w	800568c <HAL_RCC_OscConfig+0x410>
 8005464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005468:	f000 818d 	beq.w	8005786 <HAL_RCC_OscConfig+0x50a>
 800546c:	4f2e      	ldr	r7, [pc, #184]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005474:	603a      	str	r2, [r7, #0]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800547c:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800547e:	2b00      	cmp	r3, #0
 8005480:	f040 8109 	bne.w	8005696 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8005484:	f7fe fbb8 	bl	8003bf8 <HAL_GetTick>
 8005488:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800548a:	e006      	b.n	800549a <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800548c:	f7fe fbb4 	bl	8003bf8 <HAL_GetTick>
 8005490:	eba0 0008 	sub.w	r0, r0, r8
 8005494:	2864      	cmp	r0, #100	; 0x64
 8005496:	f200 80f5 	bhi.w	8005684 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	0398      	lsls	r0, r3, #14
 800549e:	d4f5      	bmi.n	800548c <HAL_RCC_OscConfig+0x210>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	e72e      	b.n	8005302 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054a4:	2e01      	cmp	r6, #1
 80054a6:	f47f af00 	bne.w	80052aa <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054aa:	4b1f      	ldr	r3, [pc, #124]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	0799      	lsls	r1, r3, #30
 80054b0:	d446      	bmi.n	8005540 <HAL_RCC_OscConfig+0x2c4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054b2:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	6a20      	ldr	r0, [r4, #32]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	0712      	lsls	r2, r2, #28
 80054ba:	bf56      	itet	pl
 80054bc:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80054c0:	681b      	ldrmi	r3, [r3, #0]
 80054c2:	091b      	lsrpl	r3, r3, #4
 80054c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c8:	4298      	cmp	r0, r3
 80054ca:	f200 8126 	bhi.w	800571a <HAL_RCC_OscConfig+0x49e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	f042 0208 	orr.w	r2, r2, #8
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80054de:	4302      	orrs	r2, r0
 80054e0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	69e1      	ldr	r1, [r4, #28]
 80054e6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80054ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054ee:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	f000 8142 	beq.w	800577a <HAL_RCC_OscConfig+0x4fe>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054f6:	f7ff fe67 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <HAL_RCC_OscConfig+0x2b8>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005504:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8005506:	4a0c      	ldr	r2, [pc, #48]	; (8005538 <HAL_RCC_OscConfig+0x2bc>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8005510:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005512:	4a0a      	ldr	r2, [pc, #40]	; (800553c <HAL_RCC_OscConfig+0x2c0>)
 8005514:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8005516:	f7fe fb2d 	bl	8003b74 <HAL_InitTick>
        if(status != HAL_OK)
 800551a:	2800      	cmp	r0, #0
 800551c:	d169      	bne.n	80055f2 <HAL_RCC_OscConfig+0x376>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	07d9      	lsls	r1, r3, #31
 8005522:	f57f aeee 	bpl.w	8005302 <HAL_RCC_OscConfig+0x86>
 8005526:	e792      	b.n	800544e <HAL_RCC_OscConfig+0x1d2>
 8005528:	40021000 	.word	0x40021000
 800552c:	40007000 	.word	0x40007000
 8005530:	feeefffc 	.word	0xfeeefffc
 8005534:	0800aa18 	.word	0x0800aa18
 8005538:	200001a4 	.word	0x200001a4
 800553c:	2000002c 	.word	0x2000002c
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005540:	69a3      	ldr	r3, [r4, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1b5      	bne.n	80054b2 <HAL_RCC_OscConfig+0x236>
    return HAL_ERROR;
 8005546:	2001      	movs	r0, #1
}
 8005548:	b003      	add	sp, #12
 800554a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pll_config = RCC->PLLCFGR;
 800554e:	4e9b      	ldr	r6, [pc, #620]	; (80057bc <HAL_RCC_OscConfig+0x540>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005550:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8005552:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005554:	f003 0103 	and.w	r1, r3, #3
 8005558:	4291      	cmp	r1, r2
 800555a:	f000 8133 	beq.w	80057c4 <HAL_RCC_OscConfig+0x548>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800555e:	2d0c      	cmp	r5, #12
 8005560:	d0f1      	beq.n	8005546 <HAL_RCC_OscConfig+0x2ca>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005562:	4d96      	ldr	r5, [pc, #600]	; (80057bc <HAL_RCC_OscConfig+0x540>)
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	015f      	lsls	r7, r3, #5
 8005568:	d4ed      	bmi.n	8005546 <HAL_RCC_OscConfig+0x2ca>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800556a:	682b      	ldr	r3, [r5, #0]
 800556c:	00de      	lsls	r6, r3, #3
 800556e:	d4ea      	bmi.n	8005546 <HAL_RCC_OscConfig+0x2ca>
            __HAL_RCC_PLL_DISABLE();
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005576:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8005578:	f7fe fb3e 	bl	8003bf8 <HAL_GetTick>
 800557c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800557e:	e004      	b.n	800558a <HAL_RCC_OscConfig+0x30e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005580:	f7fe fb3a 	bl	8003bf8 <HAL_GetTick>
 8005584:	1b80      	subs	r0, r0, r6
 8005586:	2802      	cmp	r0, #2
 8005588:	d87c      	bhi.n	8005684 <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	0198      	lsls	r0, r3, #6
 800558e:	d4f7      	bmi.n	8005580 <HAL_RCC_OscConfig+0x304>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005590:	68e9      	ldr	r1, [r5, #12]
 8005592:	4b8b      	ldr	r3, [pc, #556]	; (80057c0 <HAL_RCC_OscConfig+0x544>)
 8005594:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005596:	4e89      	ldr	r6, [pc, #548]	; (80057bc <HAL_RCC_OscConfig+0x540>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005598:	400b      	ands	r3, r1
 800559a:	4313      	orrs	r3, r2
 800559c:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
 80055a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80055a4:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 80055a8:	3a01      	subs	r2, #1
 80055aa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80055ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055b0:	0900      	lsrs	r0, r0, #4
 80055b2:	0849      	lsrs	r1, r1, #1
 80055b4:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80055b8:	3901      	subs	r1, #1
 80055ba:	0852      	lsrs	r2, r2, #1
 80055bc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80055c0:	3a01      	subs	r2, #1
 80055c2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80055c6:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ce:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055d0:	68eb      	ldr	r3, [r5, #12]
 80055d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d6:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80055d8:	f7fe fb0e 	bl	8003bf8 <HAL_GetTick>
 80055dc:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055de:	e004      	b.n	80055ea <HAL_RCC_OscConfig+0x36e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fe fb0a 	bl	8003bf8 <HAL_GetTick>
 80055e4:	1b00      	subs	r0, r0, r4
 80055e6:	2802      	cmp	r0, #2
 80055e8:	d84c      	bhi.n	8005684 <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ea:	6833      	ldr	r3, [r6, #0]
 80055ec:	0199      	lsls	r1, r3, #6
 80055ee:	d5f7      	bpl.n	80055e0 <HAL_RCC_OscConfig+0x364>
  return HAL_OK;
 80055f0:	2000      	movs	r0, #0
}
 80055f2:	b003      	add	sp, #12
 80055f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055f8:	2e03      	cmp	r6, #3
 80055fa:	f47f af2e 	bne.w	800545a <HAL_RCC_OscConfig+0x1de>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fe:	4a6f      	ldr	r2, [pc, #444]	; (80057bc <HAL_RCC_OscConfig+0x540>)
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	0392      	lsls	r2, r2, #14
 8005604:	f57f ae7d 	bpl.w	8005302 <HAL_RCC_OscConfig+0x86>
 8005608:	6862      	ldr	r2, [r4, #4]
 800560a:	2a00      	cmp	r2, #0
 800560c:	f47f ae79 	bne.w	8005302 <HAL_RCC_OscConfig+0x86>
 8005610:	e799      	b.n	8005546 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_LSI_DISABLE();
 8005612:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800561e:	f7fe faeb 	bl	8003bf8 <HAL_GetTick>
 8005622:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005624:	e004      	b.n	8005630 <HAL_RCC_OscConfig+0x3b4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005626:	f7fe fae7 	bl	8003bf8 <HAL_GetTick>
 800562a:	1bc0      	subs	r0, r0, r7
 800562c:	2802      	cmp	r0, #2
 800562e:	d829      	bhi.n	8005684 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005630:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8005634:	079b      	lsls	r3, r3, #30
 8005636:	d4f6      	bmi.n	8005626 <HAL_RCC_OscConfig+0x3aa>
 8005638:	e6a4      	b.n	8005384 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800563a:	2e02      	cmp	r6, #2
 800563c:	f47f ae69 	bne.w	8005312 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005640:	4a5e      	ldr	r2, [pc, #376]	; (80057bc <HAL_RCC_OscConfig+0x540>)
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	0552      	lsls	r2, r2, #21
 8005646:	d503      	bpl.n	8005650 <HAL_RCC_OscConfig+0x3d4>
 8005648:	68e2      	ldr	r2, [r4, #12]
 800564a:	2a00      	cmp	r2, #0
 800564c:	f43f af7b 	beq.w	8005546 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005650:	495a      	ldr	r1, [pc, #360]	; (80057bc <HAL_RCC_OscConfig+0x540>)
 8005652:	6920      	ldr	r0, [r4, #16]
 8005654:	684a      	ldr	r2, [r1, #4]
 8005656:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 800565a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800565e:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005660:	e675      	b.n	800534e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800566a:	f7fe fac5 	bl	8003bf8 <HAL_GetTick>
 800566e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	0798      	lsls	r0, r3, #30
 8005674:	f57f af53 	bpl.w	800551e <HAL_RCC_OscConfig+0x2a2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005678:	f7fe fabe 	bl	8003bf8 <HAL_GetTick>
 800567c:	eba0 0008 	sub.w	r0, r0, r8
 8005680:	2802      	cmp	r0, #2
 8005682:	d9f5      	bls.n	8005670 <HAL_RCC_OscConfig+0x3f4>
            return HAL_TIMEOUT;
 8005684:	2003      	movs	r0, #3
}
 8005686:	b003      	add	sp, #12
 8005688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800568c:	4a4b      	ldr	r2, [pc, #300]	; (80057bc <HAL_RCC_OscConfig+0x540>)
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005694:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005696:	f7fe faaf 	bl	8003bf8 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800569a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80057bc <HAL_RCC_OscConfig+0x540>
        tickstart = HAL_GetTick();
 800569e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056a0:	e004      	b.n	80056ac <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a2:	f7fe faa9 	bl	8003bf8 <HAL_GetTick>
 80056a6:	1bc0      	subs	r0, r0, r7
 80056a8:	2864      	cmp	r0, #100	; 0x64
 80056aa:	d8eb      	bhi.n	8005684 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ac:	f8d8 3000 	ldr.w	r3, [r8]
 80056b0:	039b      	lsls	r3, r3, #14
 80056b2:	d5f6      	bpl.n	80056a2 <HAL_RCC_OscConfig+0x426>
 80056b4:	e6f4      	b.n	80054a0 <HAL_RCC_OscConfig+0x224>
    FlagStatus       pwrclkchanged = RESET;
 80056b6:	2600      	movs	r6, #0
 80056b8:	e676      	b.n	80053a8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80056ba:	6833      	ldr	r3, [r6, #0]
 80056bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80056c2:	f7fe fa99 	bl	8003bf8 <HAL_GetTick>
 80056c6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c8:	e004      	b.n	80056d4 <HAL_RCC_OscConfig+0x458>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ca:	f7fe fa95 	bl	8003bf8 <HAL_GetTick>
 80056ce:	1bc0      	subs	r0, r0, r7
 80056d0:	2802      	cmp	r0, #2
 80056d2:	d8d7      	bhi.n	8005684 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056d4:	6833      	ldr	r3, [r6, #0]
 80056d6:	0558      	lsls	r0, r3, #21
 80056d8:	d4f7      	bmi.n	80056ca <HAL_RCC_OscConfig+0x44e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	e637      	b.n	800534e <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056de:	4a37      	ldr	r2, [pc, #220]	; (80057bc <HAL_RCC_OscConfig+0x540>)
 80056e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80056ec:	f7fe fa84 	bl	8003bf8 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80057bc <HAL_RCC_OscConfig+0x540>
      tickstart = HAL_GetTick();
 80056f4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f6:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056fa:	e004      	b.n	8005706 <HAL_RCC_OscConfig+0x48a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fc:	f7fe fa7c 	bl	8003bf8 <HAL_GetTick>
 8005700:	1bc0      	subs	r0, r0, r7
 8005702:	4548      	cmp	r0, r9
 8005704:	d8be      	bhi.n	8005684 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005706:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800570a:	079a      	lsls	r2, r3, #30
 800570c:	d5f6      	bpl.n	80056fc <HAL_RCC_OscConfig+0x480>
    if(pwrclkchanged == SET)
 800570e:	2e00      	cmp	r6, #0
 8005710:	f43f ae7a 	beq.w	8005408 <HAL_RCC_OscConfig+0x18c>
 8005714:	e02b      	b.n	800576e <HAL_RCC_OscConfig+0x4f2>
    return HAL_ERROR;
 8005716:	2001      	movs	r0, #1
}
 8005718:	4770      	bx	lr
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800571a:	f7ff fd0f 	bl	800513c <RCC_SetFlashLatencyFromMSIRange>
 800571e:	2800      	cmp	r0, #0
 8005720:	f47f af11 	bne.w	8005546 <HAL_RCC_OscConfig+0x2ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005724:	4b25      	ldr	r3, [pc, #148]	; (80057bc <HAL_RCC_OscConfig+0x540>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	f042 0208 	orr.w	r2, r2, #8
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	6a21      	ldr	r1, [r4, #32]
 8005732:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	69e1      	ldr	r1, [r4, #28]
 800573e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005742:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	e6d5      	b.n	80054f6 <HAL_RCC_OscConfig+0x27a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005750:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005752:	f7fe fa51 	bl	8003bf8 <HAL_GetTick>
 8005756:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	05d9      	lsls	r1, r3, #23
 800575c:	f53f ae29 	bmi.w	80053b2 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005760:	f7fe fa4a 	bl	8003bf8 <HAL_GetTick>
 8005764:	eba0 0008 	sub.w	r0, r0, r8
 8005768:	2802      	cmp	r0, #2
 800576a:	d9f5      	bls.n	8005758 <HAL_RCC_OscConfig+0x4dc>
 800576c:	e78a      	b.n	8005684 <HAL_RCC_OscConfig+0x408>
      __HAL_RCC_PWR_CLK_DISABLE();
 800576e:	4a13      	ldr	r2, [pc, #76]	; (80057bc <HAL_RCC_OscConfig+0x540>)
 8005770:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005776:	6593      	str	r3, [r2, #88]	; 0x58
 8005778:	e646      	b.n	8005408 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800577a:	f7ff fcdf 	bl	800513c <RCC_SetFlashLatencyFromMSIRange>
 800577e:	2800      	cmp	r0, #0
 8005780:	f43f aeb9 	beq.w	80054f6 <HAL_RCC_OscConfig+0x27a>
 8005784:	e6df      	b.n	8005546 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800578a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800579c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800579e:	e77a      	b.n	8005696 <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_RCC_OscConfig+0x540>)
 80057a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80057a6:	f042 0204 	orr.w	r2, r2, #4
 80057aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80057ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057ba:	e797      	b.n	80056ec <HAL_RCC_OscConfig+0x470>
 80057bc:	40021000 	.word	0x40021000
 80057c0:	f99d808c 	.word	0xf99d808c
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80057c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057ca:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057cc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80057d0:	f47f aec5 	bne.w	800555e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057da:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80057de:	f47f aebe 	bne.w	800555e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80057e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057e4:	3a07      	subs	r2, #7
 80057e6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80057ea:	bf18      	it	ne
 80057ec:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057ee:	4291      	cmp	r1, r2
 80057f0:	f47f aeb5 	bne.w	800555e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80057f6:	0852      	lsrs	r2, r2, #1
 80057f8:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80057fc:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80057fe:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005802:	f47f aeac 	bne.w	800555e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005806:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005808:	0852      	lsrs	r2, r2, #1
 800580a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800580e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005810:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005814:	f47f aea3 	bne.w	800555e <HAL_RCC_OscConfig+0x2e2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005818:	6833      	ldr	r3, [r6, #0]
 800581a:	019a      	lsls	r2, r3, #6
 800581c:	f53f aee8 	bmi.w	80055f0 <HAL_RCC_OscConfig+0x374>
          __HAL_RCC_PLL_ENABLE();
 8005820:	6833      	ldr	r3, [r6, #0]
 8005822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005826:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005828:	68f3      	ldr	r3, [r6, #12]
 800582a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800582e:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8005830:	f7fe f9e2 	bl	8003bf8 <HAL_GetTick>
 8005834:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005836:	e005      	b.n	8005844 <HAL_RCC_OscConfig+0x5c8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005838:	f7fe f9de 	bl	8003bf8 <HAL_GetTick>
 800583c:	1b00      	subs	r0, r0, r4
 800583e:	2802      	cmp	r0, #2
 8005840:	f63f af20 	bhi.w	8005684 <HAL_RCC_OscConfig+0x408>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	019b      	lsls	r3, r3, #6
 8005848:	d5f6      	bpl.n	8005838 <HAL_RCC_OscConfig+0x5bc>
 800584a:	e6d1      	b.n	80055f0 <HAL_RCC_OscConfig+0x374>

0800584c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800584c:	2800      	cmp	r0, #0
 800584e:	f000 809f 	beq.w	8005990 <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005852:	4a53      	ldr	r2, [pc, #332]	; (80059a0 <HAL_RCC_ClockConfig+0x154>)
 8005854:	6813      	ldr	r3, [r2, #0]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	428b      	cmp	r3, r1
{
 800585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	460d      	mov	r5, r1
 8005862:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005864:	d20c      	bcs.n	8005880 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005866:	6813      	ldr	r3, [r2, #0]
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	430b      	orrs	r3, r1
 800586e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005870:	6813      	ldr	r3, [r2, #0]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	428b      	cmp	r3, r1
 8005878:	d002      	beq.n	8005880 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800587a:	2001      	movs	r0, #1
}
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	079e      	lsls	r6, r3, #30
 8005884:	d571      	bpl.n	800596a <HAL_RCC_ClockConfig+0x11e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005886:	4847      	ldr	r0, [pc, #284]	; (80059a4 <HAL_RCC_ClockConfig+0x158>)
 8005888:	68a1      	ldr	r1, [r4, #8]
 800588a:	6882      	ldr	r2, [r0, #8]
 800588c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005890:	4291      	cmp	r1, r2
 8005892:	d904      	bls.n	800589e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005894:	6882      	ldr	r2, [r0, #8]
 8005896:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800589a:	430a      	orrs	r2, r1
 800589c:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589e:	07da      	lsls	r2, r3, #31
 80058a0:	d526      	bpl.n	80058f0 <HAL_RCC_ClockConfig+0xa4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058a2:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a4:	4b3f      	ldr	r3, [pc, #252]	; (80059a4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058a6:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a8:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058aa:	d065      	beq.n	8005978 <HAL_RCC_ClockConfig+0x12c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ac:	2a02      	cmp	r2, #2
 80058ae:	d06c      	beq.n	800598a <HAL_RCC_ClockConfig+0x13e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058b0:	2a00      	cmp	r2, #0
 80058b2:	d171      	bne.n	8005998 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058b4:	079b      	lsls	r3, r3, #30
 80058b6:	d5e0      	bpl.n	800587a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058b8:	4e3a      	ldr	r6, [pc, #232]	; (80059a4 <HAL_RCC_ClockConfig+0x158>)
 80058ba:	68b3      	ldr	r3, [r6, #8]
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80058c4:	f7fe f998 	bl	8003bf8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80058cc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ce:	e004      	b.n	80058da <HAL_RCC_ClockConfig+0x8e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d0:	f7fe f992 	bl	8003bf8 <HAL_GetTick>
 80058d4:	1bc0      	subs	r0, r0, r7
 80058d6:	4540      	cmp	r0, r8
 80058d8:	d85c      	bhi.n	8005994 <HAL_RCC_ClockConfig+0x148>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058da:	68b3      	ldr	r3, [r6, #8]
 80058dc:	6862      	ldr	r2, [r4, #4]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80058e6:	d1f3      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	079e      	lsls	r6, r3, #30
 80058ec:	d506      	bpl.n	80058fc <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058ee:	68a1      	ldr	r1, [r4, #8]
 80058f0:	482c      	ldr	r0, [pc, #176]	; (80059a4 <HAL_RCC_ClockConfig+0x158>)
 80058f2:	6882      	ldr	r2, [r0, #8]
 80058f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80058f8:	428a      	cmp	r2, r1
 80058fa:	d840      	bhi.n	800597e <HAL_RCC_ClockConfig+0x132>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058fc:	4928      	ldr	r1, [pc, #160]	; (80059a0 <HAL_RCC_ClockConfig+0x154>)
 80058fe:	680a      	ldr	r2, [r1, #0]
 8005900:	f002 0207 	and.w	r2, r2, #7
 8005904:	42aa      	cmp	r2, r5
 8005906:	d909      	bls.n	800591c <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005908:	680a      	ldr	r2, [r1, #0]
 800590a:	f022 0207 	bic.w	r2, r2, #7
 800590e:	432a      	orrs	r2, r5
 8005910:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005912:	680a      	ldr	r2, [r1, #0]
 8005914:	f002 0207 	and.w	r2, r2, #7
 8005918:	42aa      	cmp	r2, r5
 800591a:	d1ae      	bne.n	800587a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591c:	075d      	lsls	r5, r3, #29
 800591e:	d506      	bpl.n	800592e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005920:	4920      	ldr	r1, [pc, #128]	; (80059a4 <HAL_RCC_ClockConfig+0x158>)
 8005922:	68e0      	ldr	r0, [r4, #12]
 8005924:	688a      	ldr	r2, [r1, #8]
 8005926:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800592a:	4302      	orrs	r2, r0
 800592c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592e:	0718      	lsls	r0, r3, #28
 8005930:	d507      	bpl.n	8005942 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005932:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <HAL_RCC_ClockConfig+0x158>)
 8005934:	6921      	ldr	r1, [r4, #16]
 8005936:	6893      	ldr	r3, [r2, #8]
 8005938:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800593c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005940:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005942:	f7ff fc41 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8005946:	4a17      	ldr	r2, [pc, #92]	; (80059a4 <HAL_RCC_ClockConfig+0x158>)
 8005948:	4c17      	ldr	r4, [pc, #92]	; (80059a8 <HAL_RCC_ClockConfig+0x15c>)
 800594a:	6892      	ldr	r2, [r2, #8]
 800594c:	4917      	ldr	r1, [pc, #92]	; (80059ac <HAL_RCC_ClockConfig+0x160>)
 800594e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005952:	4603      	mov	r3, r0
 8005954:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8005956:	4816      	ldr	r0, [pc, #88]	; (80059b0 <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005958:	f002 021f 	and.w	r2, r2, #31
 800595c:	40d3      	lsrs	r3, r2
}
 800595e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8005962:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005964:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8005966:	f7fe b905 	b.w	8003b74 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800596a:	07d9      	lsls	r1, r3, #31
 800596c:	d5c6      	bpl.n	80058fc <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800596e:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005972:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005974:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005976:	d199      	bne.n	80058ac <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005978:	0198      	lsls	r0, r3, #6
 800597a:	d49d      	bmi.n	80058b8 <HAL_RCC_ClockConfig+0x6c>
 800597c:	e77d      	b.n	800587a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597e:	6882      	ldr	r2, [r0, #8]
 8005980:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005984:	4311      	orrs	r1, r2
 8005986:	6081      	str	r1, [r0, #8]
 8005988:	e7b8      	b.n	80058fc <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800598a:	0399      	lsls	r1, r3, #14
 800598c:	d494      	bmi.n	80058b8 <HAL_RCC_ClockConfig+0x6c>
 800598e:	e774      	b.n	800587a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005990:	2001      	movs	r0, #1
}
 8005992:	4770      	bx	lr
        return HAL_TIMEOUT;
 8005994:	2003      	movs	r0, #3
 8005996:	e771      	b.n	800587c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005998:	055f      	lsls	r7, r3, #21
 800599a:	f57f af6e 	bpl.w	800587a <HAL_RCC_ClockConfig+0x2e>
 800599e:	e78b      	b.n	80058b8 <HAL_RCC_ClockConfig+0x6c>
 80059a0:	40022000 	.word	0x40022000
 80059a4:	40021000 	.word	0x40021000
 80059a8:	0800aa18 	.word	0x0800aa18
 80059ac:	2000002c 	.word	0x2000002c
 80059b0:	200001a4 	.word	0x200001a4

080059b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80059b6:	4a06      	ldr	r2, [pc, #24]	; (80059d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80059b8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80059ba:	4906      	ldr	r1, [pc, #24]	; (80059d4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80059c0:	6808      	ldr	r0, [r1, #0]
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	f003 031f 	and.w	r3, r3, #31
}
 80059c8:	40d8      	lsrs	r0, r3
 80059ca:	4770      	bx	lr
 80059cc:	40021000 	.word	0x40021000
 80059d0:	0800aa28 	.word	0x0800aa28
 80059d4:	2000002c 	.word	0x2000002c

080059d8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80059da:	4a06      	ldr	r2, [pc, #24]	; (80059f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80059dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80059de:	4906      	ldr	r1, [pc, #24]	; (80059f8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059e0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	5cd3      	ldrb	r3, [r2, r3]
 80059e8:	f003 031f 	and.w	r3, r3, #31
}
 80059ec:	40d8      	lsrs	r0, r3
 80059ee:	4770      	bx	lr
 80059f0:	40021000 	.word	0x40021000
 80059f4:	0800aa28 	.word	0x0800aa28
 80059f8:	2000002c 	.word	0x2000002c

080059fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059fe:	4b47      	ldr	r3, [pc, #284]	; (8005b1c <RCCEx_PLLSAI1_Config+0x120>)
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	0792      	lsls	r2, r2, #30
{
 8005a04:	4604      	mov	r4, r0
 8005a06:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a08:	d007      	beq.n	8005a1a <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	6801      	ldr	r1, [r0, #0]
 8005a0e:	f002 0203 	and.w	r2, r2, #3
 8005a12:	428a      	cmp	r2, r1
 8005a14:	d04c      	beq.n	8005ab0 <RCCEx_PLLSAI1_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a16:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8005a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8005a1a:	6800      	ldr	r0, [r0, #0]
 8005a1c:	2802      	cmp	r0, #2
 8005a1e:	d058      	beq.n	8005ad2 <RCCEx_PLLSAI1_Config+0xd6>
 8005a20:	2803      	cmp	r0, #3
 8005a22:	d04f      	beq.n	8005ac4 <RCCEx_PLLSAI1_Config+0xc8>
 8005a24:	2801      	cmp	r0, #1
 8005a26:	d1f6      	bne.n	8005a16 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	079b      	lsls	r3, r3, #30
 8005a2c:	d5f4      	bpl.n	8005a18 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a2e:	4a3b      	ldr	r2, [pc, #236]	; (8005b1c <RCCEx_PLLSAI1_Config+0x120>)
 8005a30:	68d3      	ldr	r3, [r2, #12]
 8005a32:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8005a36:	4318      	orrs	r0, r3
 8005a38:	6863      	ldr	r3, [r4, #4]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8005a40:	60d0      	str	r0, [r2, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a42:	4d36      	ldr	r5, [pc, #216]	; (8005b1c <RCCEx_PLLSAI1_Config+0x120>)
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a4a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005a4c:	f7fe f8d4 	bl	8003bf8 <HAL_GetTick>
 8005a50:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a52:	e004      	b.n	8005a5e <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a54:	f7fe f8d0 	bl	8003bf8 <HAL_GetTick>
 8005a58:	1b83      	subs	r3, r0, r6
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d83d      	bhi.n	8005ada <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	011a      	lsls	r2, r3, #4
 8005a62:	d4f7      	bmi.n	8005a54 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8005a64:	2f00      	cmp	r7, #0
 8005a66:	d13a      	bne.n	8005ade <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a68:	692b      	ldr	r3, [r5, #16]
 8005a6a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005a6e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a7a:	0912      	lsrs	r2, r2, #4
 8005a7c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8005a80:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a82:	4d26      	ldr	r5, [pc, #152]	; (8005b1c <RCCEx_PLLSAI1_Config+0x120>)
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a8a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005a8c:	f7fe f8b4 	bl	8003bf8 <HAL_GetTick>
 8005a90:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a92:	e004      	b.n	8005a9e <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a94:	f7fe f8b0 	bl	8003bf8 <HAL_GetTick>
 8005a98:	1b83      	subs	r3, r0, r6
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d81d      	bhi.n	8005ada <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a9e:	682b      	ldr	r3, [r5, #0]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	d5f7      	bpl.n	8005a94 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005aa4:	692b      	ldr	r3, [r5, #16]
 8005aa6:	69a2      	ldr	r2, [r4, #24]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	2000      	movs	r0, #0
 8005aac:	612b      	str	r3, [r5, #16]
}
 8005aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	d0b0      	beq.n	8005a16 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ab4:	68db      	ldr	r3, [r3, #12]
       ||
 8005ab6:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ab8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005abc:	3301      	adds	r3, #1
       ||
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d1a9      	bne.n	8005a16 <RCCEx_PLLSAI1_Config+0x1a>
 8005ac2:	e7be      	b.n	8005a42 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	0395      	lsls	r5, r2, #14
 8005ac8:	d4b1      	bmi.n	8005a2e <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	0359      	lsls	r1, r3, #13
 8005ace:	d5a2      	bpl.n	8005a16 <RCCEx_PLLSAI1_Config+0x1a>
 8005ad0:	e7ad      	b.n	8005a2e <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	055e      	lsls	r6, r3, #21
 8005ad6:	d59e      	bpl.n	8005a16 <RCCEx_PLLSAI1_Config+0x1a>
 8005ad8:	e7a9      	b.n	8005a2e <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 8005ada:	2003      	movs	r0, #3
}
 8005adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ade:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ae0:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ae2:	d00d      	beq.n	8005b00 <RCCEx_PLLSAI1_Config+0x104>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ae4:	6962      	ldr	r2, [r4, #20]
 8005ae6:	68a1      	ldr	r1, [r4, #8]
 8005ae8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005aec:	0852      	lsrs	r2, r2, #1
 8005aee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005af2:	3a01      	subs	r2, #1
 8005af4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005af8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005afc:	612b      	str	r3, [r5, #16]
 8005afe:	e7c0      	b.n	8005a82 <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b00:	6922      	ldr	r2, [r4, #16]
 8005b02:	68a1      	ldr	r1, [r4, #8]
 8005b04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b08:	0852      	lsrs	r2, r2, #1
 8005b0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b0e:	3a01      	subs	r2, #1
 8005b10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b14:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8005b18:	612b      	str	r3, [r5, #16]
 8005b1a:	e7b2      	b.n	8005a82 <RCCEx_PLLSAI1_Config+0x86>
 8005b1c:	40021000 	.word	0x40021000

08005b20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b22:	4b3f      	ldr	r3, [pc, #252]	; (8005c20 <RCCEx_PLLSAI2_Config+0x100>)
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	0792      	lsls	r2, r2, #30
{
 8005b28:	4604      	mov	r4, r0
 8005b2a:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b2c:	d007      	beq.n	8005b3e <RCCEx_PLLSAI2_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	6801      	ldr	r1, [r0, #0]
 8005b32:	f002 0203 	and.w	r2, r2, #3
 8005b36:	428a      	cmp	r2, r1
 8005b38:	d04c      	beq.n	8005bd4 <RCCEx_PLLSAI2_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b3a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8005b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8005b3e:	6800      	ldr	r0, [r0, #0]
 8005b40:	2802      	cmp	r0, #2
 8005b42:	d058      	beq.n	8005bf6 <RCCEx_PLLSAI2_Config+0xd6>
 8005b44:	2803      	cmp	r0, #3
 8005b46:	d04f      	beq.n	8005be8 <RCCEx_PLLSAI2_Config+0xc8>
 8005b48:	2801      	cmp	r0, #1
 8005b4a:	d1f6      	bne.n	8005b3a <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	079b      	lsls	r3, r3, #30
 8005b50:	d5f4      	bpl.n	8005b3c <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b52:	4a33      	ldr	r2, [pc, #204]	; (8005c20 <RCCEx_PLLSAI2_Config+0x100>)
 8005b54:	68d3      	ldr	r3, [r2, #12]
 8005b56:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8005b5a:	4318      	orrs	r0, r3
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8005b64:	60d0      	str	r0, [r2, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b66:	4d2e      	ldr	r5, [pc, #184]	; (8005c20 <RCCEx_PLLSAI2_Config+0x100>)
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005b70:	f7fe f842 	bl	8003bf8 <HAL_GetTick>
 8005b74:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b76:	e004      	b.n	8005b82 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b78:	f7fe f83e 	bl	8003bf8 <HAL_GetTick>
 8005b7c:	1b83      	subs	r3, r0, r6
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d83d      	bhi.n	8005bfe <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b82:	682b      	ldr	r3, [r5, #0]
 8005b84:	009a      	lsls	r2, r3, #2
 8005b86:	d4f7      	bmi.n	8005b78 <RCCEx_PLLSAI2_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8005b88:	2f00      	cmp	r7, #0
 8005b8a:	d13a      	bne.n	8005c02 <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b8c:	696b      	ldr	r3, [r5, #20]
 8005b8e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005b92:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b9e:	0912      	lsrs	r2, r2, #4
 8005ba0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8005ba4:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ba6:	4d1e      	ldr	r5, [pc, #120]	; (8005c20 <RCCEx_PLLSAI2_Config+0x100>)
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005bb0:	f7fe f822 	bl	8003bf8 <HAL_GetTick>
 8005bb4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bb6:	e004      	b.n	8005bc2 <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bb8:	f7fe f81e 	bl	8003bf8 <HAL_GetTick>
 8005bbc:	1b83      	subs	r3, r0, r6
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d81d      	bhi.n	8005bfe <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bc2:	682b      	ldr	r3, [r5, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	d5f7      	bpl.n	8005bb8 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bc8:	696b      	ldr	r3, [r5, #20]
 8005bca:	6962      	ldr	r2, [r4, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	2000      	movs	r0, #0
 8005bd0:	616b      	str	r3, [r5, #20]
}
 8005bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8005bd4:	2a00      	cmp	r2, #0
 8005bd6:	d0b0      	beq.n	8005b3a <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bd8:	68db      	ldr	r3, [r3, #12]
       ||
 8005bda:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bdc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005be0:	3301      	adds	r3, #1
       ||
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d1a9      	bne.n	8005b3a <RCCEx_PLLSAI2_Config+0x1a>
 8005be6:	e7be      	b.n	8005b66 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	0395      	lsls	r5, r2, #14
 8005bec:	d4b1      	bmi.n	8005b52 <RCCEx_PLLSAI2_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	0359      	lsls	r1, r3, #13
 8005bf2:	d5a2      	bpl.n	8005b3a <RCCEx_PLLSAI2_Config+0x1a>
 8005bf4:	e7ad      	b.n	8005b52 <RCCEx_PLLSAI2_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	055e      	lsls	r6, r3, #21
 8005bfa:	d59e      	bpl.n	8005b3a <RCCEx_PLLSAI2_Config+0x1a>
 8005bfc:	e7a9      	b.n	8005b52 <RCCEx_PLLSAI2_Config+0x32>
        status = HAL_TIMEOUT;
 8005bfe:	2003      	movs	r0, #3
}
 8005c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c02:	696b      	ldr	r3, [r5, #20]
 8005c04:	6922      	ldr	r2, [r4, #16]
 8005c06:	68a1      	ldr	r1, [r4, #8]
 8005c08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c0c:	0852      	lsrs	r2, r2, #1
 8005c0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c12:	3a01      	subs	r2, #1
 8005c14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c18:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005c1c:	616b      	str	r3, [r5, #20]
 8005c1e:	e7c2      	b.n	8005ba6 <RCCEx_PLLSAI2_Config+0x86>
 8005c20:	40021000 	.word	0x40021000

08005c24 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c28:	6803      	ldr	r3, [r0, #0]
 8005c2a:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 8005c2e:	b083      	sub	sp, #12
 8005c30:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c32:	d020      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c34:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8005c36:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005c3a:	f000 81d4 	beq.w	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8005c3e:	f200 8122 	bhi.w	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005c42:	2900      	cmp	r1, #0
 8005c44:	f000 81ab 	beq.w	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005c48:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8005c4c:	f040 811f 	bne.w	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c50:	2100      	movs	r1, #0
 8005c52:	3020      	adds	r0, #32
 8005c54:	f7ff ff64 	bl	8005b20 <RCCEx_PLLSAI2_Config>
 8005c58:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005c5a:	2d00      	cmp	r5, #0
 8005c5c:	f040 81d0 	bne.w	8006000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c60:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c62:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c64:	48ae      	ldr	r0, [pc, #696]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c66:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005c6a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005c6e:	4311      	orrs	r1, r2
 8005c70:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 8005c74:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c76:	04d8      	lsls	r0, r3, #19
 8005c78:	f140 810e 	bpl.w	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x274>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005c7c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005c7e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8005c82:	f000 81b6 	beq.w	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005c86:	f200 816c 	bhi.w	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	f000 8181 	beq.w	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c90:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8005c94:	f040 819a 	bne.w	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c98:	2100      	movs	r1, #0
 8005c9a:	f104 0020 	add.w	r0, r4, #32
 8005c9e:	f7ff ff3f 	bl	8005b20 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ca2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ca4:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 8005ca6:	f1b8 0f00 	cmp.w	r8, #0
 8005caa:	f040 8162 	bne.w	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005cae:	499c      	ldr	r1, [pc, #624]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005cb0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005cb2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cb6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005cba:	4302      	orrs	r2, r0
 8005cbc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cc0:	0399      	lsls	r1, r3, #14
 8005cc2:	f100 80ed 	bmi.w	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cc6:	07da      	lsls	r2, r3, #31
 8005cc8:	d508      	bpl.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cca:	4995      	ldr	r1, [pc, #596]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005ccc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005cce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cd2:	f022 0203 	bic.w	r2, r2, #3
 8005cd6:	4302      	orrs	r2, r0
 8005cd8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cdc:	079f      	lsls	r7, r3, #30
 8005cde:	d508      	bpl.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ce0:	498f      	ldr	r1, [pc, #572]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005ce2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005ce4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ce8:	f022 020c 	bic.w	r2, r2, #12
 8005cec:	4302      	orrs	r2, r0
 8005cee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cf2:	075e      	lsls	r6, r3, #29
 8005cf4:	d508      	bpl.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cf6:	498a      	ldr	r1, [pc, #552]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005cf8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005cfa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cfe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005d02:	4302      	orrs	r2, r0
 8005d04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d08:	0718      	lsls	r0, r3, #28
 8005d0a:	d508      	bpl.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d0c:	4984      	ldr	r1, [pc, #528]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005d10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d14:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d18:	4302      	orrs	r2, r0
 8005d1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d1e:	06d9      	lsls	r1, r3, #27
 8005d20:	d508      	bpl.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d22:	497f      	ldr	r1, [pc, #508]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d24:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005d26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d2e:	4302      	orrs	r2, r0
 8005d30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d34:	069a      	lsls	r2, r3, #26
 8005d36:	d508      	bpl.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d38:	4979      	ldr	r1, [pc, #484]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d3a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005d3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d44:	4302      	orrs	r2, r0
 8005d46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d4a:	059f      	lsls	r7, r3, #22
 8005d4c:	d508      	bpl.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d4e:	4974      	ldr	r1, [pc, #464]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d50:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005d52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d56:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005d5a:	4302      	orrs	r2, r0
 8005d5c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d60:	055e      	lsls	r6, r3, #21
 8005d62:	d508      	bpl.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d64:	496e      	ldr	r1, [pc, #440]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d66:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005d68:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d6c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005d70:	4302      	orrs	r2, r0
 8005d72:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d76:	0658      	lsls	r0, r3, #25
 8005d78:	d508      	bpl.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d7a:	4969      	ldr	r1, [pc, #420]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d7c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005d7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d82:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005d86:	4302      	orrs	r2, r0
 8005d88:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d8c:	0619      	lsls	r1, r3, #24
 8005d8e:	d508      	bpl.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d90:	4963      	ldr	r1, [pc, #396]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d94:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005d9c:	4302      	orrs	r2, r0
 8005d9e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005da2:	05da      	lsls	r2, r3, #23
 8005da4:	d508      	bpl.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005da6:	495e      	ldr	r1, [pc, #376]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005daa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005dae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005db2:	4302      	orrs	r2, r0
 8005db4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005db8:	049f      	lsls	r7, r3, #18
 8005dba:	d510      	bpl.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dbc:	4958      	ldr	r1, [pc, #352]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005dbe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005dc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005dc4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005dc8:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dca:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dd2:	f000 80f1 	beq.w	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005dd6:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005dda:	f000 8128 	beq.w	800602e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005dde:	031e      	lsls	r6, r3, #12
 8005de0:	d510      	bpl.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005de2:	494f      	ldr	r1, [pc, #316]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005de4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005de6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005dea:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005dee:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005df0:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005df4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005df8:	f000 80e3 	beq.w	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005dfc:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005e00:	f000 811f 	beq.w	8006042 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e04:	0358      	lsls	r0, r3, #13
 8005e06:	d510      	bpl.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e08:	4945      	ldr	r1, [pc, #276]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e0a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005e0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005e10:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005e14:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e16:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e1e:	f000 80c6 	beq.w	8005fae <HAL_RCCEx_PeriphCLKConfig+0x38a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e22:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005e26:	f000 80f8 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e2a:	0459      	lsls	r1, r3, #17
 8005e2c:	d510      	bpl.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e2e:	483c      	ldr	r0, [pc, #240]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e30:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005e32:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005e36:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e3a:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e3c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e40:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e44:	f000 80c5 	beq.w	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005e48:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005e4c:	f000 80da 	beq.w	8006004 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e50:	041a      	lsls	r2, r3, #16
 8005e52:	d508      	bpl.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e54:	4932      	ldr	r1, [pc, #200]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e56:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005e58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005e5c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005e60:	4302      	orrs	r2, r0
 8005e62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e66:	03db      	lsls	r3, r3, #15
 8005e68:	d509      	bpl.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e6a:	4a2d      	ldr	r2, [pc, #180]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e6c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005e70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8005e7e:	4628      	mov	r0, r5
 8005e80:	b003      	add	sp, #12
 8005e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8005e86:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8005e8a:	f43f aeeb 	beq.w	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x40>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e8e:	04d8      	lsls	r0, r3, #19
    switch(PeriphClkInit->Sai1ClockSelection)
 8005e90:	f04f 0501 	mov.w	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e94:	f53f aef2 	bmi.w	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005e98:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e9a:	0399      	lsls	r1, r3, #14
 8005e9c:	f57f af13 	bpl.w	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ea0:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005ea2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ea4:	00d2      	lsls	r2, r2, #3
 8005ea6:	d566      	bpl.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x352>
    FlagStatus       pwrclkchanged = RESET;
 8005ea8:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eac:	4e1d      	ldr	r6, [pc, #116]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005eae:	6833      	ldr	r3, [r6, #0]
 8005eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005eb6:	f7fd fe9f 	bl	8003bf8 <HAL_GetTick>
 8005eba:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ebc:	e004      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ebe:	f7fd fe9b 	bl	8003bf8 <HAL_GetTick>
 8005ec2:	1bc3      	subs	r3, r0, r7
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d862      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	05db      	lsls	r3, r3, #23
 8005ecc:	d5f7      	bpl.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x29a>
    if(ret == HAL_OK)
 8005ece:	f1b8 0f00 	cmp.w	r8, #0
 8005ed2:	f040 80c0 	bne.w	8006056 <HAL_RCCEx_PeriphCLKConfig+0x432>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ed6:	4e12      	ldr	r6, [pc, #72]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005ed8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005edc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005ee0:	d02b      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8005ee2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d029      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005eea:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8005eee:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef6:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005efa:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f02:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f06:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f08:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 8005f0c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f10:	f140 80a3 	bpl.w	800605a <HAL_RCCEx_PeriphCLKConfig+0x436>
        tickstart = HAL_GetTick();
 8005f14:	f7fd fe70 	bl	8003bf8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f18:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005f1c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8005f20:	40021000 	.word	0x40021000
 8005f24:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f28:	f7fd fe66 	bl	8003bf8 <HAL_GetTick>
 8005f2c:	1bc0      	subs	r0, r0, r7
 8005f2e:	4540      	cmp	r0, r8
 8005f30:	d82d      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f32:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005f36:	0799      	lsls	r1, r3, #30
 8005f38:	d5f6      	bpl.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005f3e:	4948      	ldr	r1, [pc, #288]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8005f40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005f44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8005f4e:	f1b9 0f00 	cmp.w	r9, #0
 8005f52:	d004      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f54:	4a42      	ldr	r2, [pc, #264]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8005f56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f5c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	e6b1      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005f62:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005f66:	d131      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8005f68:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 8005f6a:	f1b8 0f00 	cmp.w	r8, #0
 8005f6e:	f43f ae9e 	beq.w	8005cae <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8005f72:	4645      	mov	r5, r8
 8005f74:	e791      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x276>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f7c:	659a      	str	r2, [r3, #88]	; 0x58
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005f88:	f04f 0901 	mov.w	r9, #1
 8005f8c:	e78e      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = HAL_TIMEOUT;
 8005f8e:	2503      	movs	r5, #3
 8005f90:	e7dd      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x32a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f92:	1d20      	adds	r0, r4, #4
 8005f94:	f7ff fd32 	bl	80059fc <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f98:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f9a:	4680      	mov	r8, r0
      break;
 8005f9c:	e683      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f9e:	3004      	adds	r0, #4
 8005fa0:	f7ff fd2c 	bl	80059fc <RCCEx_PLLSAI1_Config>
 8005fa4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	f43f ae5a 	beq.w	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005fac:	e028      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fae:	68ca      	ldr	r2, [r1, #12]
 8005fb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005fb4:	60ca      	str	r2, [r1, #12]
 8005fb6:	e738      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fb8:	68ca      	ldr	r2, [r1, #12]
 8005fba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005fbe:	60ca      	str	r2, [r1, #12]
 8005fc0:	e70d      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fc2:	68ca      	ldr	r2, [r1, #12]
 8005fc4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005fc8:	60ca      	str	r2, [r1, #12]
 8005fca:	e71b      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005fcc:	2501      	movs	r5, #1
 8005fce:	46a8      	mov	r8, r5
 8005fd0:	e763      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x276>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	1d20      	adds	r0, r4, #4
 8005fd6:	f7ff fd11 	bl	80059fc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fda:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	f43f af37 	beq.w	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	e734      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fe6:	481e      	ldr	r0, [pc, #120]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8005fe8:	68c2      	ldr	r2, [r0, #12]
 8005fea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005fee:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8005ff0:	e638      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ff2:	491b      	ldr	r1, [pc, #108]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8005ff4:	68ca      	ldr	r2, [r1, #12]
 8005ff6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ffa:	60ca      	str	r2, [r1, #12]
      break;
 8005ffc:	46a8      	mov	r8, r5
 8005ffe:	e652      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x82>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	e638      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x52>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006004:	2102      	movs	r1, #2
 8006006:	f104 0020 	add.w	r0, r4, #32
 800600a:	f7ff fd89 	bl	8005b20 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800600e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8006010:	2800      	cmp	r0, #0
 8006012:	f43f af1d 	beq.w	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006016:	4605      	mov	r5, r0
 8006018:	e71a      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800601a:	2101      	movs	r1, #1
 800601c:	1d20      	adds	r0, r4, #4
 800601e:	f7ff fced 	bl	80059fc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006022:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8006024:	2800      	cmp	r0, #0
 8006026:	f43f af00 	beq.w	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800602a:	4605      	mov	r5, r0
 800602c:	e6fd      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800602e:	2101      	movs	r1, #1
 8006030:	1d20      	adds	r0, r4, #4
 8006032:	f7ff fce3 	bl	80059fc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006036:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8006038:	2800      	cmp	r0, #0
 800603a:	f43f aed0 	beq.w	8005dde <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800603e:	4605      	mov	r5, r0
 8006040:	e6cd      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006042:	2101      	movs	r1, #1
 8006044:	1d20      	adds	r0, r4, #4
 8006046:	f7ff fcd9 	bl	80059fc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800604a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800604c:	2800      	cmp	r0, #0
 800604e:	f43f aed9 	beq.w	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006052:	4605      	mov	r5, r0
 8006054:	e6d6      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8006056:	4645      	mov	r5, r8
 8006058:	e779      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800605a:	4613      	mov	r3, r2
 800605c:	e76f      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800605e:	bf00      	nop
 8006060:	40021000 	.word	0x40021000

08006064 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006064:	6a03      	ldr	r3, [r0, #32]
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606c:	6a03      	ldr	r3, [r0, #32]
{
 800606e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006072:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006074:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006076:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800607a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800607e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006080:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006082:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006086:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006088:	4d13      	ldr	r5, [pc, #76]	; (80060d8 <TIM_OC1_SetConfig+0x74>)
 800608a:	42a8      	cmp	r0, r5
 800608c:	d00f      	beq.n	80060ae <TIM_OC1_SetConfig+0x4a>
 800608e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006092:	42a8      	cmp	r0, r5
 8006094:	d00b      	beq.n	80060ae <TIM_OC1_SetConfig+0x4a>
 8006096:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800609a:	42a8      	cmp	r0, r5
 800609c:	d007      	beq.n	80060ae <TIM_OC1_SetConfig+0x4a>
 800609e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060a2:	42a8      	cmp	r0, r5
 80060a4:	d003      	beq.n	80060ae <TIM_OC1_SetConfig+0x4a>
 80060a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060aa:	42a8      	cmp	r0, r5
 80060ac:	d10d      	bne.n	80060ca <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060ae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80060b0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80060b4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060b6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060ba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80060be:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80060c2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80060c6:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060ca:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80060cc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80060ce:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80060d0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80060d2:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80060d4:	6203      	str	r3, [r0, #32]
}
 80060d6:	4770      	bx	lr
 80060d8:	40012c00 	.word	0x40012c00

080060dc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060dc:	6a03      	ldr	r3, [r0, #32]
 80060de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e4:	6a03      	ldr	r3, [r0, #32]
{
 80060e6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80060f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060f8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80060fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006102:	4d15      	ldr	r5, [pc, #84]	; (8006158 <TIM_OC3_SetConfig+0x7c>)
 8006104:	42a8      	cmp	r0, r5
 8006106:	d010      	beq.n	800612a <TIM_OC3_SetConfig+0x4e>
 8006108:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800610c:	42a8      	cmp	r0, r5
 800610e:	d00c      	beq.n	800612a <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006110:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006114:	42a8      	cmp	r0, r5
 8006116:	d00f      	beq.n	8006138 <TIM_OC3_SetConfig+0x5c>
 8006118:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800611c:	42a8      	cmp	r0, r5
 800611e:	d00b      	beq.n	8006138 <TIM_OC3_SetConfig+0x5c>
 8006120:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006124:	42a8      	cmp	r0, r5
 8006126:	d10f      	bne.n	8006148 <TIM_OC3_SetConfig+0x6c>
 8006128:	e006      	b.n	8006138 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800612a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800612c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006130:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006138:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800613c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006140:	ea46 0c05 	orr.w	ip, r6, r5
 8006144:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006148:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800614a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800614c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800614e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8006150:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006152:	6203      	str	r3, [r0, #32]
}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40012c00 	.word	0x40012c00

0800615c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800615c:	2800      	cmp	r0, #0
 800615e:	f000 8085 	beq.w	800626c <HAL_TIM_OC_Init+0x110>
{
 8006162:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006164:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006168:	4604      	mov	r4, r0
 800616a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800616e:	2b00      	cmp	r3, #0
 8006170:	d071      	beq.n	8006256 <HAL_TIM_OC_Init+0xfa>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006172:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006174:	493e      	ldr	r1, [pc, #248]	; (8006270 <HAL_TIM_OC_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006176:	2302      	movs	r3, #2
 8006178:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800617c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800617e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	d055      	beq.n	800622e <HAL_TIM_OC_Init+0xd2>
 8006182:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006186:	d025      	beq.n	80061d4 <HAL_TIM_OC_Init+0x78>
 8006188:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800618c:	428a      	cmp	r2, r1
 800618e:	d021      	beq.n	80061d4 <HAL_TIM_OC_Init+0x78>
 8006190:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006194:	428a      	cmp	r2, r1
 8006196:	d01d      	beq.n	80061d4 <HAL_TIM_OC_Init+0x78>
 8006198:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800619c:	428a      	cmp	r2, r1
 800619e:	d019      	beq.n	80061d4 <HAL_TIM_OC_Init+0x78>
 80061a0:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80061a4:	428a      	cmp	r2, r1
 80061a6:	d042      	beq.n	800622e <HAL_TIM_OC_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a8:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80061ac:	428a      	cmp	r2, r1
 80061ae:	d057      	beq.n	8006260 <HAL_TIM_OC_Init+0x104>
 80061b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061b4:	428a      	cmp	r2, r1
 80061b6:	d053      	beq.n	8006260 <HAL_TIM_OC_Init+0x104>
 80061b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061bc:	428a      	cmp	r2, r1
 80061be:	d04f      	beq.n	8006260 <HAL_TIM_OC_Init+0x104>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c0:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c8:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80061ca:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80061cc:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061ce:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061d0:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d2:	e010      	b.n	80061f6 <HAL_TIM_OC_Init+0x9a>
    tmpcr1 |= Structure->CounterMode;
 80061d4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d6:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80061dc:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80061de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061e4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061ea:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ec:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80061ee:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80061f0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061f4:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80061f6:	2301      	movs	r3, #1
 80061f8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061fa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006202:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006206:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800620a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800620e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006216:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800621a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800621e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006222:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006226:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800622a:	2000      	movs	r0, #0
}
 800622c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800622e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006230:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006236:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800623c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800623e:	69a1      	ldr	r1, [r4, #24]
 8006240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006244:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006246:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006248:	68e3      	ldr	r3, [r4, #12]
 800624a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800624c:	6863      	ldr	r3, [r4, #4]
 800624e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006250:	6963      	ldr	r3, [r4, #20]
 8006252:	6313      	str	r3, [r2, #48]	; 0x30
 8006254:	e7cf      	b.n	80061f6 <HAL_TIM_OC_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 8006256:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800625a:	f7fb fa65 	bl	8001728 <HAL_TIM_OC_MspInit>
 800625e:	e788      	b.n	8006172 <HAL_TIM_OC_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006260:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006262:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006268:	4303      	orrs	r3, r0
 800626a:	e7e9      	b.n	8006240 <HAL_TIM_OC_Init+0xe4>
    return HAL_ERROR;
 800626c:	2001      	movs	r0, #1
}
 800626e:	4770      	bx	lr
 8006270:	40012c00 	.word	0x40012c00

08006274 <HAL_TIM_OC_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 8006276:	6803      	ldr	r3, [r0, #0]
{
 8006278:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 800627a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800627e:	6a19      	ldr	r1, [r3, #32]
 8006280:	f241 1211 	movw	r2, #4369	; 0x1111
 8006284:	4211      	tst	r1, r2
{
 8006286:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8006288:	d108      	bne.n	800629c <HAL_TIM_OC_DeInit+0x28>
 800628a:	6a19      	ldr	r1, [r3, #32]
 800628c:	f240 4244 	movw	r2, #1092	; 0x444
 8006290:	4211      	tst	r1, r2
 8006292:	d103      	bne.n	800629c <HAL_TIM_OC_DeInit+0x28>
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]
  HAL_TIM_OC_MspDeInit(htim);
 800629c:	4620      	mov	r0, r4
 800629e:	f7fb fa99 	bl	80017d4 <HAL_TIM_OC_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80062a2:	2000      	movs	r0, #0
 80062a4:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
  __HAL_UNLOCK(htim);
 80062a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80062ac:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 80062b0:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
 80062b4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 80062b8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 80062bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 80062c0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80062c4:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 80062c8:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
 80062cc:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 80062d0:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_RESET;
 80062d4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
}
 80062d8:	bd10      	pop	{r4, pc}
 80062da:	bf00      	nop

080062dc <HAL_TIM_OC_Start_IT>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062dc:	2900      	cmp	r1, #0
 80062de:	d153      	bne.n	8006388 <HAL_TIM_OC_Start_IT+0xac>
 80062e0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d159      	bne.n	800639c <HAL_TIM_OC_Start_IT+0xc0>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062e8:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ea:	2202      	movs	r2, #2
 80062ec:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	f042 0202 	orr.w	r2, r2, #2
 80062f6:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062f8:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062fa:	2201      	movs	r2, #1
 80062fc:	f001 011f 	and.w	r1, r1, #31
 8006300:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8006304:	ea20 0001 	bic.w	r0, r0, r1
 8006308:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800630a:	6a18      	ldr	r0, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800630c:	4a52      	ldr	r2, [pc, #328]	; (8006458 <HAL_TIM_OC_Start_IT+0x17c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800630e:	4301      	orrs	r1, r0
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006310:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006312:	6219      	str	r1, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006314:	f000 8091 	beq.w	800643a <HAL_TIM_OC_Start_IT+0x15e>
 8006318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631c:	4293      	cmp	r3, r2
 800631e:	d00b      	beq.n	8006338 <HAL_TIM_OC_Start_IT+0x5c>
 8006320:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006324:	4293      	cmp	r3, r2
 8006326:	d007      	beq.n	8006338 <HAL_TIM_OC_Start_IT+0x5c>
 8006328:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <HAL_TIM_OC_Start_IT+0x5c>
 8006330:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006334:	4293      	cmp	r3, r2
 8006336:	d103      	bne.n	8006340 <HAL_TIM_OC_Start_IT+0x64>
      __HAL_TIM_MOE_ENABLE(htim);
 8006338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800633a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800633e:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d012      	beq.n	800636c <HAL_TIM_OC_Start_IT+0x90>
 8006346:	4a45      	ldr	r2, [pc, #276]	; (800645c <HAL_TIM_OC_Start_IT+0x180>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00f      	beq.n	800636c <HAL_TIM_OC_Start_IT+0x90>
 800634c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006350:	4293      	cmp	r3, r2
 8006352:	d00b      	beq.n	800636c <HAL_TIM_OC_Start_IT+0x90>
 8006354:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <HAL_TIM_OC_Start_IT+0x90>
 800635c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <HAL_TIM_OC_Start_IT+0x90>
 8006364:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006368:	4293      	cmp	r3, r2
 800636a:	d107      	bne.n	800637c <HAL_TIM_OC_Start_IT+0xa0>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800636c:	6899      	ldr	r1, [r3, #8]
 800636e:	4a3c      	ldr	r2, [pc, #240]	; (8006460 <HAL_TIM_OC_Start_IT+0x184>)
 8006370:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006372:	2a06      	cmp	r2, #6
 8006374:	d014      	beq.n	80063a0 <HAL_TIM_OC_Start_IT+0xc4>
 8006376:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800637a:	d011      	beq.n	80063a0 <HAL_TIM_OC_Start_IT+0xc4>
      __HAL_TIM_ENABLE(htim);
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	2000      	movs	r0, #0
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006388:	2904      	cmp	r1, #4
 800638a:	d040      	beq.n	800640e <HAL_TIM_OC_Start_IT+0x132>
 800638c:	2908      	cmp	r1, #8
 800638e:	d031      	beq.n	80063f4 <HAL_TIM_OC_Start_IT+0x118>
 8006390:	290c      	cmp	r1, #12
 8006392:	d107      	bne.n	80063a4 <HAL_TIM_OC_Start_IT+0xc8>
 8006394:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006398:	2b01      	cmp	r3, #1
 800639a:	d045      	beq.n	8006428 <HAL_TIM_OC_Start_IT+0x14c>
  switch (Channel)
 800639c:	2001      	movs	r0, #1
 800639e:	4770      	bx	lr
 80063a0:	2000      	movs	r0, #0
}
 80063a2:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063a4:	2910      	cmp	r1, #16
 80063a6:	d04d      	beq.n	8006444 <HAL_TIM_OC_Start_IT+0x168>
 80063a8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d1f5      	bne.n	800639c <HAL_TIM_OC_Start_IT+0xc0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b0:	2908      	cmp	r1, #8
 80063b2:	d023      	beq.n	80063fc <HAL_TIM_OC_Start_IT+0x120>
 80063b4:	290c      	cmp	r1, #12
 80063b6:	d037      	beq.n	8006428 <HAL_TIM_OC_Start_IT+0x14c>
 80063b8:	2910      	cmp	r1, #16
 80063ba:	d047      	beq.n	800644c <HAL_TIM_OC_Start_IT+0x170>
 80063bc:	2202      	movs	r2, #2
  switch (Channel)
 80063be:	1f0b      	subs	r3, r1, #4
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063c0:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
  switch (Channel)
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d8e9      	bhi.n	800639c <HAL_TIM_OC_Start_IT+0xc0>
 80063c8:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <HAL_TIM_OC_Start_IT+0xf4>)
 80063ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ce:	bf00      	nop
 80063d0:	0800641d 	.word	0x0800641d
 80063d4:	0800639d 	.word	0x0800639d
 80063d8:	0800639d 	.word	0x0800639d
 80063dc:	0800639d 	.word	0x0800639d
 80063e0:	08006403 	.word	0x08006403
 80063e4:	0800639d 	.word	0x0800639d
 80063e8:	0800639d 	.word	0x0800639d
 80063ec:	0800639d 	.word	0x0800639d
 80063f0:	0800642f 	.word	0x0800642f
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063f4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d1cf      	bne.n	800639c <HAL_TIM_OC_Start_IT+0xc0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063fc:	2302      	movs	r3, #2
 80063fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006402:	6803      	ldr	r3, [r0, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	f042 0208 	orr.w	r2, r2, #8
 800640a:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 800640c:	e774      	b.n	80062f8 <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800640e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006412:	2b01      	cmp	r3, #1
 8006414:	d1c2      	bne.n	800639c <HAL_TIM_OC_Start_IT+0xc0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006416:	2302      	movs	r3, #2
 8006418:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800641c:	6803      	ldr	r3, [r0, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	f042 0204 	orr.w	r2, r2, #4
 8006424:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8006426:	e767      	b.n	80062f8 <HAL_TIM_OC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006428:	2302      	movs	r3, #2
 800642a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800642e:	6803      	ldr	r3, [r0, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	f042 0210 	orr.w	r2, r2, #16
 8006436:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8006438:	e75e      	b.n	80062f8 <HAL_TIM_OC_Start_IT+0x1c>
      __HAL_TIM_MOE_ENABLE(htim);
 800643a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006442:	e793      	b.n	800636c <HAL_TIM_OC_Start_IT+0x90>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006444:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006448:	2b01      	cmp	r3, #1
 800644a:	d1a7      	bne.n	800639c <HAL_TIM_OC_Start_IT+0xc0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800644c:	2302      	movs	r3, #2
 800644e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      status = HAL_ERROR;
 8006452:	2001      	movs	r0, #1
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40000400 	.word	0x40000400
 8006460:	00010007 	.word	0x00010007

08006464 <HAL_TIM_OC_Stop_IT>:
  switch (Channel)
 8006464:	290c      	cmp	r1, #12
 8006466:	d808      	bhi.n	800647a <HAL_TIM_OC_Stop_IT+0x16>
 8006468:	e8df f001 	tbb	[pc, r1]
 800646c:	07070750 	.word	0x07070750
 8006470:	0707074a 	.word	0x0707074a
 8006474:	07070744 	.word	0x07070744
 8006478:	09          	.byte	0x09
 8006479:	00          	.byte	0x00
 800647a:	2001      	movs	r0, #1
}
 800647c:	4770      	bx	lr
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800647e:	6803      	ldr	r3, [r0, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	f022 0210 	bic.w	r2, r2, #16
 8006486:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8006488:	6a1a      	ldr	r2, [r3, #32]
{
 800648a:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800648c:	f04f 0c01 	mov.w	ip, #1
 8006490:	f001 041f 	and.w	r4, r1, #31
 8006494:	fa0c fc04 	lsl.w	ip, ip, r4
  TIMx->CCER &= ~tmp;
 8006498:	ea22 020c 	bic.w	r2, r2, ip
 800649c:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800649e:	4a35      	ldr	r2, [pc, #212]	; (8006574 <HAL_TIM_OC_Stop_IT+0x110>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064a0:	6a1c      	ldr	r4, [r3, #32]
 80064a2:	621c      	str	r4, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d037      	beq.n	8006518 <HAL_TIM_OC_Stop_IT+0xb4>
 80064a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d033      	beq.n	8006518 <HAL_TIM_OC_Stop_IT+0xb4>
 80064b0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d02f      	beq.n	8006518 <HAL_TIM_OC_Stop_IT+0xb4>
 80064b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064bc:	4293      	cmp	r3, r2
 80064be:	d02b      	beq.n	8006518 <HAL_TIM_OC_Stop_IT+0xb4>
 80064c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d027      	beq.n	8006518 <HAL_TIM_OC_Stop_IT+0xb4>
    __HAL_TIM_DISABLE(htim);
 80064c8:	6a1c      	ldr	r4, [r3, #32]
 80064ca:	f241 1211 	movw	r2, #4369	; 0x1111
 80064ce:	4214      	tst	r4, r2
 80064d0:	d108      	bne.n	80064e4 <HAL_TIM_OC_Stop_IT+0x80>
 80064d2:	6a1c      	ldr	r4, [r3, #32]
 80064d4:	f240 4244 	movw	r2, #1092	; 0x444
 80064d8:	4214      	tst	r4, r2
 80064da:	d103      	bne.n	80064e4 <HAL_TIM_OC_Stop_IT+0x80>
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	2301      	movs	r3, #1
 80064e6:	bb31      	cbnz	r1, 8006536 <HAL_TIM_OC_Stop_IT+0xd2>
 80064e8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80064ec:	4608      	mov	r0, r1
}
 80064ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064f2:	4770      	bx	lr
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	f022 0208 	bic.w	r2, r2, #8
 80064fc:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 80064fe:	e7c3      	b.n	8006488 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006500:	6803      	ldr	r3, [r0, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	f022 0204 	bic.w	r2, r2, #4
 8006508:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 800650a:	e7bd      	b.n	8006488 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800650c:	6803      	ldr	r3, [r0, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	f022 0202 	bic.w	r2, r2, #2
 8006514:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8006516:	e7b7      	b.n	8006488 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_MOE_DISABLE(htim);
 8006518:	6a1c      	ldr	r4, [r3, #32]
 800651a:	f241 1211 	movw	r2, #4369	; 0x1111
 800651e:	4214      	tst	r4, r2
 8006520:	d1d2      	bne.n	80064c8 <HAL_TIM_OC_Stop_IT+0x64>
 8006522:	6a1c      	ldr	r4, [r3, #32]
 8006524:	f240 4244 	movw	r2, #1092	; 0x444
 8006528:	4214      	tst	r4, r2
 800652a:	d1cd      	bne.n	80064c8 <HAL_TIM_OC_Stop_IT+0x64>
 800652c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800652e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006532:	645a      	str	r2, [r3, #68]	; 0x44
 8006534:	e7c8      	b.n	80064c8 <HAL_TIM_OC_Stop_IT+0x64>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006536:	2904      	cmp	r1, #4
 8006538:	d011      	beq.n	800655e <HAL_TIM_OC_Stop_IT+0xfa>
 800653a:	2908      	cmp	r1, #8
 800653c:	d00b      	beq.n	8006556 <HAL_TIM_OC_Stop_IT+0xf2>
 800653e:	290c      	cmp	r1, #12
 8006540:	d013      	beq.n	800656a <HAL_TIM_OC_Stop_IT+0x106>
 8006542:	2910      	cmp	r1, #16
 8006544:	bf0c      	ite	eq
 8006546:	f880 3042 	strbeq.w	r3, [r0, #66]	; 0x42
 800654a:	f880 3043 	strbne.w	r3, [r0, #67]	; 0x43
}
 800654e:	f85d 4b04 	ldr.w	r4, [sp], #4
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006552:	2000      	movs	r0, #0
}
 8006554:	4770      	bx	lr
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006556:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800655a:	2000      	movs	r0, #0
 800655c:	e7c7      	b.n	80064ee <HAL_TIM_OC_Stop_IT+0x8a>
 800655e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
 8006562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006566:	2000      	movs	r0, #0
 8006568:	4770      	bx	lr
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800656a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800656e:	2000      	movs	r0, #0
 8006570:	e7bd      	b.n	80064ee <HAL_TIM_OC_Stop_IT+0x8a>
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00

08006578 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006578:	2800      	cmp	r0, #0
 800657a:	f000 8085 	beq.w	8006688 <HAL_TIM_PWM_Init+0x110>
{
 800657e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006580:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006584:	4604      	mov	r4, r0
 8006586:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800658a:	2b00      	cmp	r3, #0
 800658c:	d071      	beq.n	8006672 <HAL_TIM_PWM_Init+0xfa>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006590:	493e      	ldr	r1, [pc, #248]	; (800668c <HAL_TIM_PWM_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006592:	2302      	movs	r3, #2
 8006594:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006598:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800659a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800659c:	d055      	beq.n	800664a <HAL_TIM_PWM_Init+0xd2>
 800659e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80065a2:	d025      	beq.n	80065f0 <HAL_TIM_PWM_Init+0x78>
 80065a4:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80065a8:	428a      	cmp	r2, r1
 80065aa:	d021      	beq.n	80065f0 <HAL_TIM_PWM_Init+0x78>
 80065ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065b0:	428a      	cmp	r2, r1
 80065b2:	d01d      	beq.n	80065f0 <HAL_TIM_PWM_Init+0x78>
 80065b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065b8:	428a      	cmp	r2, r1
 80065ba:	d019      	beq.n	80065f0 <HAL_TIM_PWM_Init+0x78>
 80065bc:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80065c0:	428a      	cmp	r2, r1
 80065c2:	d042      	beq.n	800664a <HAL_TIM_PWM_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065c4:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80065c8:	428a      	cmp	r2, r1
 80065ca:	d057      	beq.n	800667c <HAL_TIM_PWM_Init+0x104>
 80065cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065d0:	428a      	cmp	r2, r1
 80065d2:	d053      	beq.n	800667c <HAL_TIM_PWM_Init+0x104>
 80065d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065d8:	428a      	cmp	r2, r1
 80065da:	d04f      	beq.n	800667c <HAL_TIM_PWM_Init+0x104>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065dc:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065de:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80065e6:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80065e8:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ea:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065ec:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ee:	e010      	b.n	8006612 <HAL_TIM_PWM_Init+0x9a>
    tmpcr1 |= Structure->CounterMode;
 80065f0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065f2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80065f8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80065fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065fe:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006600:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006606:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006608:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800660a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800660c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800660e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006610:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006612:	2301      	movs	r3, #1
 8006614:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006616:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800661a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800661e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006622:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006626:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800662a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800662e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006632:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800663a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800663e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006642:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006646:	2000      	movs	r0, #0
}
 8006648:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800664a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800664c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006652:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006658:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800665a:	69a1      	ldr	r1, [r4, #24]
 800665c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006660:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006662:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006664:	68e3      	ldr	r3, [r4, #12]
 8006666:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800666c:	6963      	ldr	r3, [r4, #20]
 800666e:	6313      	str	r3, [r2, #48]	; 0x30
 8006670:	e7cf      	b.n	8006612 <HAL_TIM_PWM_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 8006672:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006676:	f7fb f889 	bl	800178c <HAL_TIM_PWM_MspInit>
 800667a:	e788      	b.n	800658e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800667c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800667e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006684:	4303      	orrs	r3, r0
 8006686:	e7e9      	b.n	800665c <HAL_TIM_PWM_Init+0xe4>
    return HAL_ERROR;
 8006688:	2001      	movs	r0, #1
}
 800668a:	4770      	bx	lr
 800668c:	40012c00 	.word	0x40012c00

08006690 <HAL_TIM_PWM_Start_IT>:
 8006690:	2900      	cmp	r1, #0
 8006692:	d153      	bne.n	800673c <HAL_TIM_PWM_Start_IT+0xac>
 8006694:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006698:	2b01      	cmp	r3, #1
 800669a:	d159      	bne.n	8006750 <HAL_TIM_PWM_Start_IT+0xc0>
 800669c:	6803      	ldr	r3, [r0, #0]
 800669e:	2202      	movs	r2, #2
 80066a0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	f042 0202 	orr.w	r2, r2, #2
 80066aa:	60da      	str	r2, [r3, #12]
 80066ac:	6a18      	ldr	r0, [r3, #32]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f001 011f 	and.w	r1, r1, #31
 80066b4:	fa02 f101 	lsl.w	r1, r2, r1
 80066b8:	ea20 0001 	bic.w	r0, r0, r1
 80066bc:	6218      	str	r0, [r3, #32]
 80066be:	6a18      	ldr	r0, [r3, #32]
 80066c0:	4a52      	ldr	r2, [pc, #328]	; (800680c <HAL_TIM_PWM_Start_IT+0x17c>)
 80066c2:	4301      	orrs	r1, r0
 80066c4:	4293      	cmp	r3, r2
 80066c6:	6219      	str	r1, [r3, #32]
 80066c8:	f000 8091 	beq.w	80067ee <HAL_TIM_PWM_Start_IT+0x15e>
 80066cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00b      	beq.n	80066ec <HAL_TIM_PWM_Start_IT+0x5c>
 80066d4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80066d8:	4293      	cmp	r3, r2
 80066da:	d007      	beq.n	80066ec <HAL_TIM_PWM_Start_IT+0x5c>
 80066dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <HAL_TIM_PWM_Start_IT+0x5c>
 80066e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d103      	bne.n	80066f4 <HAL_TIM_PWM_Start_IT+0x64>
 80066ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066f2:	645a      	str	r2, [r3, #68]	; 0x44
 80066f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f8:	d012      	beq.n	8006720 <HAL_TIM_PWM_Start_IT+0x90>
 80066fa:	4a45      	ldr	r2, [pc, #276]	; (8006810 <HAL_TIM_PWM_Start_IT+0x180>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00f      	beq.n	8006720 <HAL_TIM_PWM_Start_IT+0x90>
 8006700:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006704:	4293      	cmp	r3, r2
 8006706:	d00b      	beq.n	8006720 <HAL_TIM_PWM_Start_IT+0x90>
 8006708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800670c:	4293      	cmp	r3, r2
 800670e:	d007      	beq.n	8006720 <HAL_TIM_PWM_Start_IT+0x90>
 8006710:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <HAL_TIM_PWM_Start_IT+0x90>
 8006718:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800671c:	4293      	cmp	r3, r2
 800671e:	d107      	bne.n	8006730 <HAL_TIM_PWM_Start_IT+0xa0>
 8006720:	6899      	ldr	r1, [r3, #8]
 8006722:	4a3c      	ldr	r2, [pc, #240]	; (8006814 <HAL_TIM_PWM_Start_IT+0x184>)
 8006724:	400a      	ands	r2, r1
 8006726:	2a06      	cmp	r2, #6
 8006728:	d014      	beq.n	8006754 <HAL_TIM_PWM_Start_IT+0xc4>
 800672a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800672e:	d011      	beq.n	8006754 <HAL_TIM_PWM_Start_IT+0xc4>
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	2000      	movs	r0, #0
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	4770      	bx	lr
 800673c:	2904      	cmp	r1, #4
 800673e:	d040      	beq.n	80067c2 <HAL_TIM_PWM_Start_IT+0x132>
 8006740:	2908      	cmp	r1, #8
 8006742:	d031      	beq.n	80067a8 <HAL_TIM_PWM_Start_IT+0x118>
 8006744:	290c      	cmp	r1, #12
 8006746:	d107      	bne.n	8006758 <HAL_TIM_PWM_Start_IT+0xc8>
 8006748:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800674c:	2b01      	cmp	r3, #1
 800674e:	d045      	beq.n	80067dc <HAL_TIM_PWM_Start_IT+0x14c>
 8006750:	2001      	movs	r0, #1
 8006752:	4770      	bx	lr
 8006754:	2000      	movs	r0, #0
 8006756:	4770      	bx	lr
 8006758:	2910      	cmp	r1, #16
 800675a:	d04d      	beq.n	80067f8 <HAL_TIM_PWM_Start_IT+0x168>
 800675c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8006760:	2b01      	cmp	r3, #1
 8006762:	d1f5      	bne.n	8006750 <HAL_TIM_PWM_Start_IT+0xc0>
 8006764:	2908      	cmp	r1, #8
 8006766:	d023      	beq.n	80067b0 <HAL_TIM_PWM_Start_IT+0x120>
 8006768:	290c      	cmp	r1, #12
 800676a:	d037      	beq.n	80067dc <HAL_TIM_PWM_Start_IT+0x14c>
 800676c:	2910      	cmp	r1, #16
 800676e:	d047      	beq.n	8006800 <HAL_TIM_PWM_Start_IT+0x170>
 8006770:	2202      	movs	r2, #2
 8006772:	1f0b      	subs	r3, r1, #4
 8006774:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
 8006778:	2b08      	cmp	r3, #8
 800677a:	d8e9      	bhi.n	8006750 <HAL_TIM_PWM_Start_IT+0xc0>
 800677c:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <HAL_TIM_PWM_Start_IT+0xf4>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	080067d1 	.word	0x080067d1
 8006788:	08006751 	.word	0x08006751
 800678c:	08006751 	.word	0x08006751
 8006790:	08006751 	.word	0x08006751
 8006794:	080067b7 	.word	0x080067b7
 8006798:	08006751 	.word	0x08006751
 800679c:	08006751 	.word	0x08006751
 80067a0:	08006751 	.word	0x08006751
 80067a4:	080067e3 	.word	0x080067e3
 80067a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d1cf      	bne.n	8006750 <HAL_TIM_PWM_Start_IT+0xc0>
 80067b0:	2302      	movs	r3, #2
 80067b2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80067b6:	6803      	ldr	r3, [r0, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	f042 0208 	orr.w	r2, r2, #8
 80067be:	60da      	str	r2, [r3, #12]
 80067c0:	e774      	b.n	80066ac <HAL_TIM_PWM_Start_IT+0x1c>
 80067c2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d1c2      	bne.n	8006750 <HAL_TIM_PWM_Start_IT+0xc0>
 80067ca:	2302      	movs	r3, #2
 80067cc:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80067d0:	6803      	ldr	r3, [r0, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	f042 0204 	orr.w	r2, r2, #4
 80067d8:	60da      	str	r2, [r3, #12]
 80067da:	e767      	b.n	80066ac <HAL_TIM_PWM_Start_IT+0x1c>
 80067dc:	2302      	movs	r3, #2
 80067de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80067e2:	6803      	ldr	r3, [r0, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	f042 0210 	orr.w	r2, r2, #16
 80067ea:	60da      	str	r2, [r3, #12]
 80067ec:	e75e      	b.n	80066ac <HAL_TIM_PWM_Start_IT+0x1c>
 80067ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067f4:	645a      	str	r2, [r3, #68]	; 0x44
 80067f6:	e793      	b.n	8006720 <HAL_TIM_PWM_Start_IT+0x90>
 80067f8:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d1a7      	bne.n	8006750 <HAL_TIM_PWM_Start_IT+0xc0>
 8006800:	2302      	movs	r3, #2
 8006802:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8006806:	2001      	movs	r0, #1
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40000400 	.word	0x40000400
 8006814:	00010007 	.word	0x00010007

08006818 <HAL_TIM_PeriodElapsedCallback>:
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop

0800681c <HAL_TIM_IC_CaptureCallback>:
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop

08006820 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop

08006824 <HAL_TIM_TriggerCallback>:
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop

08006828 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006828:	6803      	ldr	r3, [r0, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	0791      	lsls	r1, r2, #30
{
 800682e:	b510      	push	{r4, lr}
 8006830:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006832:	d502      	bpl.n	800683a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	0792      	lsls	r2, r2, #30
 8006838:	d468      	bmi.n	800690c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	0752      	lsls	r2, r2, #29
 800683e:	d502      	bpl.n	8006846 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	0750      	lsls	r0, r2, #29
 8006844:	d44f      	bmi.n	80068e6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	0711      	lsls	r1, r2, #28
 800684a:	d502      	bpl.n	8006852 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	0712      	lsls	r2, r2, #28
 8006850:	d437      	bmi.n	80068c2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	06d0      	lsls	r0, r2, #27
 8006856:	d502      	bpl.n	800685e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	06d1      	lsls	r1, r2, #27
 800685c:	d41e      	bmi.n	800689c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	07d2      	lsls	r2, r2, #31
 8006862:	d502      	bpl.n	800686a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	07d0      	lsls	r0, r2, #31
 8006868:	d469      	bmi.n	800693e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	0611      	lsls	r1, r2, #24
 800686e:	d502      	bpl.n	8006876 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	0612      	lsls	r2, r2, #24
 8006874:	d46b      	bmi.n	800694e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	05d0      	lsls	r0, r2, #23
 800687a:	d502      	bpl.n	8006882 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	0611      	lsls	r1, r2, #24
 8006880:	d46d      	bmi.n	800695e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	0652      	lsls	r2, r2, #25
 8006886:	d502      	bpl.n	800688e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	0650      	lsls	r0, r2, #25
 800688c:	d46f      	bmi.n	800696e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	0691      	lsls	r1, r2, #26
 8006892:	d502      	bpl.n	800689a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	0692      	lsls	r2, r2, #26
 8006898:	d449      	bmi.n	800692e <HAL_TIM_IRQHandler+0x106>
}
 800689a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800689c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068a2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80068ac:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068ae:	d16f      	bne.n	8006990 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b0:	f7fb f82e 	bl	8001910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b4:	4620      	mov	r0, r4
 80068b6:	f7ff ffb3 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068bc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	7722      	strb	r2, [r4, #28]
 80068c0:	e7cd      	b.n	800685e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068c2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c6:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068c8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80068d0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068d2:	d15a      	bne.n	800698a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d4:	f7fb f81c 	bl	8001910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	4620      	mov	r0, r4
 80068da:	f7ff ffa1 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068e0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	7722      	strb	r2, [r4, #28]
 80068e4:	e7b5      	b.n	8006852 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068e6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ea:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068ec:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80068f6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068f8:	d144      	bne.n	8006984 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fa:	f7fb f809 	bl	8001910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fe:	4620      	mov	r0, r4
 8006900:	f7ff ff8e 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006904:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006906:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006908:	7722      	strb	r2, [r4, #28]
 800690a:	e79c      	b.n	8006846 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800690c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006910:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006912:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006914:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	0799      	lsls	r1, r3, #30
 800691a:	d130      	bne.n	800697e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800691c:	f7fa fff8 	bl	8001910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	4620      	mov	r0, r4
 8006922:	f7ff ff7d 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006928:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	7722      	strb	r2, [r4, #28]
 800692c:	e785      	b.n	800683a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800692e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006932:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006934:	611a      	str	r2, [r3, #16]
}
 8006936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800693a:	f000 bac7 	b.w	8006ecc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800693e:	f06f 0201 	mvn.w	r2, #1
 8006942:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006944:	4620      	mov	r0, r4
 8006946:	f7ff ff67 	bl	8006818 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	e78d      	b.n	800686a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800694e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006952:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006954:	4620      	mov	r0, r4
 8006956:	f000 fabb 	bl	8006ed0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	e78b      	b.n	8006876 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800695e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006962:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006964:	4620      	mov	r0, r4
 8006966:	f000 fab5 	bl	8006ed4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	e789      	b.n	8006882 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800696e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006972:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006974:	4620      	mov	r0, r4
 8006976:	f7ff ff55 	bl	8006824 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	e787      	b.n	800688e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800697e:	f7ff ff4d 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 8006982:	e7d0      	b.n	8006926 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8006984:	f7ff ff4a 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 8006988:	e7bc      	b.n	8006904 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800698a:	f7ff ff47 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 800698e:	e7a6      	b.n	80068de <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8006990:	f7ff ff44 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 8006994:	e791      	b.n	80068ba <HAL_TIM_IRQHandler+0x92>
 8006996:	bf00      	nop

08006998 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006998:	6a03      	ldr	r3, [r0, #32]
 800699a:	f023 0310 	bic.w	r3, r3, #16
 800699e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80069a0:	6a03      	ldr	r3, [r0, #32]
{
 80069a2:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80069a4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80069a6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069aa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80069ae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069b6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80069b8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069c0:	4d14      	ldr	r5, [pc, #80]	; (8006a14 <TIM_OC2_SetConfig+0x7c>)
 80069c2:	42a8      	cmp	r0, r5
 80069c4:	d010      	beq.n	80069e8 <TIM_OC2_SetConfig+0x50>
 80069c6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80069ca:	42a8      	cmp	r0, r5
 80069cc:	d00c      	beq.n	80069e8 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ce:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80069d2:	42a8      	cmp	r0, r5
 80069d4:	d00f      	beq.n	80069f6 <TIM_OC2_SetConfig+0x5e>
 80069d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80069da:	42a8      	cmp	r0, r5
 80069dc:	d00b      	beq.n	80069f6 <TIM_OC2_SetConfig+0x5e>
 80069de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80069e2:	42a8      	cmp	r0, r5
 80069e4:	d10f      	bne.n	8006a06 <TIM_OC2_SetConfig+0x6e>
 80069e6:	e006      	b.n	80069f6 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069e8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80069ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80069f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069f6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069fa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069fe:	ea46 0c05 	orr.w	ip, r6, r5
 8006a02:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006a06:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006a08:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006a0a:	6182      	str	r2, [r0, #24]
}
 8006a0c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006a0e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006a10:	6203      	str	r3, [r0, #32]
}
 8006a12:	4770      	bx	lr
 8006a14:	40012c00 	.word	0x40012c00

08006a18 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006a18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	f000 80d2 	beq.w	8006bc6 <HAL_TIM_OC_ConfigChannel+0x1ae>
 8006a22:	2301      	movs	r3, #1
{
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006a28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006a2c:	2a14      	cmp	r2, #20
 8006a2e:	d80c      	bhi.n	8006a4a <HAL_TIM_OC_ConfigChannel+0x32>
 8006a30:	e8df f002 	tbb	[pc, r2]
 8006a34:	0b0b0b46 	.word	0x0b0b0b46
 8006a38:	0b0b0b4e 	.word	0x0b0b0b4e
 8006a3c:	0b0b0b56 	.word	0x0b0b0b56
 8006a40:	0b0b0b5e 	.word	0x0b0b0b5e
 8006a44:	0b0b0b94 	.word	0x0b0b0b94
 8006a48:	10          	.byte	0x10
 8006a49:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8006a50:	2001      	movs	r0, #1
}
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a54:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a56:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a58:	6a1a      	ldr	r2, [r3, #32]
 8006a5a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006a5e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006a60:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006a62:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006a64:	6d58      	ldr	r0, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a66:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8006a6a:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a6e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a72:	688e      	ldr	r6, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a74:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a78:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7c:	4e53      	ldr	r6, [pc, #332]	; (8006bcc <HAL_TIM_OC_ConfigChannel+0x1b4>)
 8006a7e:	42b3      	cmp	r3, r6
 8006a80:	d00f      	beq.n	8006aa2 <HAL_TIM_OC_ConfigChannel+0x8a>
 8006a82:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006a86:	42b3      	cmp	r3, r6
 8006a88:	d00b      	beq.n	8006aa2 <HAL_TIM_OC_ConfigChannel+0x8a>
 8006a8a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006a8e:	42b3      	cmp	r3, r6
 8006a90:	d007      	beq.n	8006aa2 <HAL_TIM_OC_ConfigChannel+0x8a>
 8006a92:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006a96:	42b3      	cmp	r3, r6
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_OC_ConfigChannel+0x8a>
 8006a9a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006a9e:	42b3      	cmp	r3, r6
 8006aa0:	d104      	bne.n	8006aac <HAL_TIM_OC_ConfigChannel+0x94>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006aa2:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006aa4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006aa8:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8006aac:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006aae:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006ab0:	6558      	str	r0, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8006ab2:	65d9      	str	r1, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8006ab4:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006abc:	2000      	movs	r0, #0
}
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ac0:	6800      	ldr	r0, [r0, #0]
 8006ac2:	f7ff facf 	bl	8006064 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006acc:	2000      	movs	r0, #0
}
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ad0:	6800      	ldr	r0, [r0, #0]
 8006ad2:	f7ff ff61 	bl	8006998 <TIM_OC2_SetConfig>
  __HAL_UNLOCK(htim);
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006adc:	2000      	movs	r0, #0
}
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ae0:	6800      	ldr	r0, [r0, #0]
 8006ae2:	f7ff fafb 	bl	80060dc <TIM_OC3_SetConfig>
  __HAL_UNLOCK(htim);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006aec:	2000      	movs	r0, #0
}
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006af0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af2:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006afa:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006afc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006afe:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006b00:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b02:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8006b06:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b0a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b0e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006b10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b14:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b18:	4e2c      	ldr	r6, [pc, #176]	; (8006bcc <HAL_TIM_OC_ConfigChannel+0x1b4>)
 8006b1a:	42b3      	cmp	r3, r6
 8006b1c:	d00f      	beq.n	8006b3e <HAL_TIM_OC_ConfigChannel+0x126>
 8006b1e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006b22:	42b3      	cmp	r3, r6
 8006b24:	d00b      	beq.n	8006b3e <HAL_TIM_OC_ConfigChannel+0x126>
 8006b26:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006b2a:	42b3      	cmp	r3, r6
 8006b2c:	d007      	beq.n	8006b3e <HAL_TIM_OC_ConfigChannel+0x126>
 8006b2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006b32:	42b3      	cmp	r3, r6
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_OC_ConfigChannel+0x126>
 8006b36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006b3a:	42b3      	cmp	r3, r6
 8006b3c:	d104      	bne.n	8006b48 <HAL_TIM_OC_ConfigChannel+0x130>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b3e:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b40:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b44:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8006b48:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006b4a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006b4c:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006b4e:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006b50:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8006b52:	2300      	movs	r3, #0
 8006b54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006b58:	2000      	movs	r0, #0
}
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b5c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006b5e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b60:	6a1a      	ldr	r2, [r3, #32]
 8006b62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b66:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006b68:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006b6a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006b6c:	6d58      	ldr	r0, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b6e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8006b72:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006b76:	4330      	orrs	r0, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b78:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006b7a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b7e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b82:	4e12      	ldr	r6, [pc, #72]	; (8006bcc <HAL_TIM_OC_ConfigChannel+0x1b4>)
 8006b84:	42b3      	cmp	r3, r6
 8006b86:	d00f      	beq.n	8006ba8 <HAL_TIM_OC_ConfigChannel+0x190>
 8006b88:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006b8c:	42b3      	cmp	r3, r6
 8006b8e:	d00b      	beq.n	8006ba8 <HAL_TIM_OC_ConfigChannel+0x190>
 8006b90:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006b94:	42b3      	cmp	r3, r6
 8006b96:	d007      	beq.n	8006ba8 <HAL_TIM_OC_ConfigChannel+0x190>
 8006b98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006b9c:	42b3      	cmp	r3, r6
 8006b9e:	d003      	beq.n	8006ba8 <HAL_TIM_OC_ConfigChannel+0x190>
 8006ba0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006ba4:	42b3      	cmp	r3, r6
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_OC_ConfigChannel+0x19a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ba8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006baa:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bae:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8006bb2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006bb4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006bb6:	6558      	str	r0, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8006bb8:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8006bba:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006bc2:	2000      	movs	r0, #0
}
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8006bc6:	2002      	movs	r0, #2
}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40012c00 	.word	0x40012c00

08006bd0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006bd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	f000 812b 	beq.w	8006e30 <HAL_TIM_PWM_ConfigChannel+0x260>
 8006bda:	2301      	movs	r3, #1
{
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	4604      	mov	r4, r0
 8006be0:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8006be2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006be6:	2a14      	cmp	r2, #20
 8006be8:	d816      	bhi.n	8006c18 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006bea:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006bee:	005d      	.short	0x005d
 8006bf0:	00150015 	.word	0x00150015
 8006bf4:	00720015 	.word	0x00720015
 8006bf8:	00150015 	.word	0x00150015
 8006bfc:	00880015 	.word	0x00880015
 8006c00:	00150015 	.word	0x00150015
 8006c04:	009d0015 	.word	0x009d0015
 8006c08:	00150015 	.word	0x00150015
 8006c0c:	00e00015 	.word	0x00e00015
 8006c10:	00150015 	.word	0x00150015
 8006c14:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8006c1e:	2001      	movs	r0, #1
}
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c22:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c24:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006c2c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006c2e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006c30:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006c32:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c34:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006c38:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c40:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c42:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c46:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4a:	4e7a      	ldr	r6, [pc, #488]	; (8006e34 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006c4c:	42b3      	cmp	r3, r6
 8006c4e:	d00f      	beq.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006c50:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006c54:	42b3      	cmp	r3, r6
 8006c56:	d00b      	beq.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006c58:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006c5c:	42b3      	cmp	r3, r6
 8006c5e:	d007      	beq.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006c60:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c64:	42b3      	cmp	r3, r6
 8006c66:	d003      	beq.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006c68:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c6c:	42b3      	cmp	r3, r6
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_PWM_ConfigChannel+0xaa>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c70:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c72:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c76:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8006c7a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006c7c:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8006c7e:	6869      	ldr	r1, [r5, #4]
 8006c80:	65d9      	str	r1, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8006c82:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c84:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c86:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c88:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006c8c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c8e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c90:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006c94:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c98:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006c9c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006ca4:	2000      	movs	r0, #0
}
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca8:	6800      	ldr	r0, [r0, #0]
 8006caa:	f7ff f9db 	bl	8006064 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cb0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb2:	6999      	ldr	r1, [r3, #24]
 8006cb4:	f041 0108 	orr.w	r1, r1, #8
 8006cb8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cba:	6999      	ldr	r1, [r3, #24]
 8006cbc:	f021 0104 	bic.w	r1, r1, #4
 8006cc0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cc2:	699a      	ldr	r2, [r3, #24]
 8006cc4:	4302      	orrs	r2, r0
 8006cc6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006cce:	2000      	movs	r0, #0
}
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cd2:	6800      	ldr	r0, [r0, #0]
 8006cd4:	f7ff fe60 	bl	8006998 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cd8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cda:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cdc:	6999      	ldr	r1, [r3, #24]
 8006cde:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006ce2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ce4:	6999      	ldr	r1, [r3, #24]
 8006ce6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006cea:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cec:	699a      	ldr	r2, [r3, #24]
 8006cee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006cf2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006cfa:	2000      	movs	r0, #0
}
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cfe:	6800      	ldr	r0, [r0, #0]
 8006d00:	f7ff f9ec 	bl	80060dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d04:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d06:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d08:	69d9      	ldr	r1, [r3, #28]
 8006d0a:	f041 0108 	orr.w	r1, r1, #8
 8006d0e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d10:	69d9      	ldr	r1, [r3, #28]
 8006d12:	f021 0104 	bic.w	r1, r1, #4
 8006d16:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	4302      	orrs	r2, r0
 8006d1c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2000      	movs	r0, #0
}
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d28:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d2a:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d32:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006d34:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006d36:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006d38:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d3a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006d3e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d42:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d46:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d4c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d50:	4e38      	ldr	r6, [pc, #224]	; (8006e34 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006d52:	42b3      	cmp	r3, r6
 8006d54:	d00f      	beq.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8006d56:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006d5a:	42b3      	cmp	r3, r6
 8006d5c:	d00b      	beq.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8006d5e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006d62:	42b3      	cmp	r3, r6
 8006d64:	d007      	beq.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8006d66:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006d6a:	42b3      	cmp	r3, r6
 8006d6c:	d003      	beq.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8006d6e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006d72:	42b3      	cmp	r3, r6
 8006d74:	d104      	bne.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x1b0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d76:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d78:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d7c:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8006d80:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006d82:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006d84:	6869      	ldr	r1, [r5, #4]
 8006d86:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006d88:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d8a:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d8c:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d8e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006d92:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d94:	69d9      	ldr	r1, [r3, #28]
 8006d96:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006d9a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d9c:	69da      	ldr	r2, [r3, #28]
 8006d9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006da2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006da4:	2300      	movs	r3, #0
 8006da6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006daa:	2000      	movs	r0, #0
}
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dae:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006db0:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006db2:	6a1a      	ldr	r2, [r3, #32]
 8006db4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006db8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006dba:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006dbc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006dbe:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dc0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006dc4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006dc8:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dca:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006dcc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dd0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd4:	4e17      	ldr	r6, [pc, #92]	; (8006e34 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006dd6:	42b3      	cmp	r3, r6
 8006dd8:	d00f      	beq.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x22a>
 8006dda:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006dde:	42b3      	cmp	r3, r6
 8006de0:	d00b      	beq.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x22a>
 8006de2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006de6:	42b3      	cmp	r3, r6
 8006de8:	d007      	beq.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x22a>
 8006dea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006dee:	42b3      	cmp	r3, r6
 8006df0:	d003      	beq.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x22a>
 8006df2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006df6:	42b3      	cmp	r3, r6
 8006df8:	d104      	bne.n	8006e04 <HAL_TIM_PWM_ConfigChannel+0x234>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dfa:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dfc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e00:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006e04:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006e06:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8006e08:	6869      	ldr	r1, [r5, #4]
 8006e0a:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8006e0c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e0e:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e10:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e12:	f041 0108 	orr.w	r1, r1, #8
 8006e16:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e1a:	f021 0104 	bic.w	r1, r1, #4
 8006e1e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e22:	432a      	orrs	r2, r5
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8006e26:	2300      	movs	r3, #0
 8006e28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006e2c:	2000      	movs	r0, #0
}
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8006e30:	2002      	movs	r0, #2
}
 8006e32:	4770      	bx	lr
 8006e34:	40012c00 	.word	0x40012c00

08006e38 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d03e      	beq.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8006e40:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e42:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e44:	4d1f      	ldr	r5, [pc, #124]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006e46:	2302      	movs	r3, #2
 8006e48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e4c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006e4e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006e50:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e52:	d02a      	beq.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006e54:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006e58:	42aa      	cmp	r2, r5
 8006e5a:	d026      	beq.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e5c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e62:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e64:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006e68:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6a:	d010      	beq.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e6c:	4b16      	ldr	r3, [pc, #88]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d00d      	beq.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d009      	beq.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d005      	beq.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e82:	42aa      	cmp	r2, r5
 8006e84:	d003      	beq.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e86:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d104      	bne.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e8e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e90:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e94:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e96:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006e98:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006ea0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006ea4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006ea6:	4618      	mov	r0, r3
}
 8006ea8:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eaa:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eb0:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb8:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006eba:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ebc:	e7e7      	b.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
  __HAL_LOCK(htim);
 8006ebe:	2002      	movs	r0, #2
}
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40000400 	.word	0x40000400

08006ecc <HAL_TIMEx_CommutCallback>:
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop

08006ed0 <HAL_TIMEx_BreakCallback>:
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop

08006ed4 <HAL_TIMEx_Break2Callback>:
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop

08006ed8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eda:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8006edc:	2e20      	cmp	r6, #32
 8006ede:	d140      	bne.n	8006f62 <HAL_UART_Transmit_DMA+0x8a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	d03c      	beq.n	8006f5e <HAL_UART_Transmit_DMA+0x86>
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	d03a      	beq.n	8006f5e <HAL_UART_Transmit_DMA+0x86>
 8006ee8:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8006eea:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8006eee:	2801      	cmp	r0, #1
 8006ef0:	d037      	beq.n	8006f62 <HAL_UART_Transmit_DMA+0x8a>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 8006ef2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8006ef4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef8:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8006efa:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006efc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8006f02:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006f04:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8006f08:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f0c:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8006f0e:	b190      	cbz	r0, 8006f36 <HAL_UART_Transmit_DMA+0x5e>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f10:	f8df c064 	ldr.w	ip, [pc, #100]	; 8006f78 <HAL_UART_Transmit_DMA+0xa0>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f14:	6387      	str	r7, [r0, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f16:	4613      	mov	r3, r2
 8006f18:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f1a:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f1e:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8006f7c <HAL_UART_Transmit_DMA+0xa4>
 8006f22:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f26:	f8df c058 	ldr.w	ip, [pc, #88]	; 8006f80 <HAL_UART_Transmit_DMA+0xa8>
 8006f2a:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f2e:	3228      	adds	r2, #40	; 0x28
 8006f30:	f7fd fe10 	bl	8004b54 <HAL_DMA_Start_IT>
 8006f34:	b9b8      	cbnz	r0, 8006f66 <HAL_UART_Transmit_DMA+0x8e>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	2140      	movs	r1, #64	; 0x40

    __HAL_UNLOCK(huart);
 8006f3a:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f3c:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8006f3e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	f102 0308 	add.w	r3, r2, #8
 8006f46:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	f102 0008 	add.w	r0, r2, #8
 8006f52:	e840 3100 	strex	r1, r3, [r0]
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d1f3      	bne.n	8006f42 <HAL_UART_Transmit_DMA+0x6a>

    return HAL_OK;
 8006f5a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8006f5e:	2001      	movs	r0, #1
}
 8006f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006f62:	2002      	movs	r0, #2
}
 8006f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f66:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8006f68:	f884 7074 	strb.w	r7, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f6c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_ERROR;
 8006f70:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 8006f72:	67a6      	str	r6, [r4, #120]	; 0x78
}
 8006f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f76:	bf00      	nop
 8006f78:	08007091 	.word	0x08007091
 8006f7c:	080070d9 	.word	0x080070d9
 8006f80:	080070ed 	.word	0x080070ed

08006f84 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	6803      	ldr	r3, [r0, #0]
 8006f88:	4604      	mov	r4, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f8e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	e843 2100 	strex	r1, r2, [r3]
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d1f7      	bne.n	8006f8a <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	f103 0208 	add.w	r2, r3, #8
 8006f9e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	f103 0008 	add.w	r0, r3, #8
 8006faa:	e840 2100 	strex	r1, r2, [r0]
 8006fae:	2900      	cmp	r1, #0
 8006fb0:	d1f3      	bne.n	8006f9a <HAL_UART_Abort+0x16>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006fb4:	2a01      	cmp	r2, #1
 8006fb6:	d046      	beq.n	8007046 <HAL_UART_Abort+0xc2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	0610      	lsls	r0, r2, #24
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	d42c      	bmi.n	800701a <HAL_UART_Abort+0x96>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	0652      	lsls	r2, r2, #25
 8006fc4:	d515      	bpl.n	8006ff2 <HAL_UART_Abort+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	f103 0208 	add.w	r2, r3, #8
 8006fca:	e852 2f00 	ldrex	r2, [r2]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	f103 0008 	add.w	r0, r3, #8
 8006fd6:	e840 2100 	strex	r1, r2, [r0]
 8006fda:	2900      	cmp	r1, #0
 8006fdc:	d1f3      	bne.n	8006fc6 <HAL_UART_Abort+0x42>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006fde:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d041      	beq.n	8007068 <HAL_UART_Abort+0xe4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	6383      	str	r3, [r0, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006fe8:	f7fd fdfa 	bl	8004be0 <HAL_DMA_Abort>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d147      	bne.n	8007080 <HAL_UART_Abort+0xfc>
  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
  huart->RxXferCount = 0U;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006ff0:	6821      	ldr	r1, [r4, #0]
  huart->TxXferCount = 0U;
 8006ff2:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006ff4:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 8006ff6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  huart->RxXferCount = 0U;
 8006ffa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006ffe:	620a      	str	r2, [r1, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007000:	8b0a      	ldrh	r2, [r1, #24]
 8007002:	b292      	uxth	r2, r2

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007004:	2520      	movs	r5, #32
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007006:	f042 0208 	orr.w	r2, r2, #8
 800700a:	830a      	strh	r2, [r1, #24]
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

  huart->ErrorCode = HAL_UART_ERROR_NONE;

  return HAL_OK;
 800700c:	4618      	mov	r0, r3
  huart->gState  = HAL_UART_STATE_READY;
 800700e:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007010:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007012:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007014:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8007018:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	f103 0208 	add.w	r2, r3, #8
 800701e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	f103 0008 	add.w	r0, r3, #8
 800702a:	e840 2100 	strex	r1, r2, [r0]
 800702e:	2900      	cmp	r1, #0
 8007030:	d1f3      	bne.n	800701a <HAL_UART_Abort+0x96>
    if (huart->hdmatx != NULL)
 8007032:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007034:	b128      	cbz	r0, 8007042 <HAL_UART_Abort+0xbe>
      huart->hdmatx->XferAbortCallback = NULL;
 8007036:	2300      	movs	r3, #0
 8007038:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800703a:	f7fd fdd1 	bl	8004be0 <HAL_DMA_Abort>
 800703e:	b9a8      	cbnz	r0, 800706c <HAL_UART_Abort+0xe8>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	4619      	mov	r1, r3
 8007044:	e7bc      	b.n	8006fc0 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800704a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	e843 2100 	strex	r1, r2, [r3]
 8007052:	2900      	cmp	r1, #0
 8007054:	d0b0      	beq.n	8006fb8 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	e853 2f00 	ldrex	r2, [r3]
 800705a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	e843 2100 	strex	r1, r2, [r3]
 8007062:	2900      	cmp	r1, #0
 8007064:	d1ef      	bne.n	8007046 <HAL_UART_Abort+0xc2>
 8007066:	e7a7      	b.n	8006fb8 <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007068:	4619      	mov	r1, r3
 800706a:	e7c2      	b.n	8006ff2 <HAL_UART_Abort+0x6e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800706c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800706e:	f7fd fe4f 	bl	8004d10 <HAL_DMA_GetError>
 8007072:	2820      	cmp	r0, #32
 8007074:	d1e4      	bne.n	8007040 <HAL_UART_Abort+0xbc>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007076:	2310      	movs	r3, #16
 8007078:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 800707c:	2003      	movs	r0, #3
}
 800707e:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007080:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007082:	f7fd fe45 	bl	8004d10 <HAL_DMA_GetError>
 8007086:	2820      	cmp	r0, #32
 8007088:	d1b2      	bne.n	8006ff0 <HAL_UART_Abort+0x6c>
 800708a:	e7f4      	b.n	8007076 <HAL_UART_Abort+0xf2>

0800708c <HAL_UART_TxCpltCallback>:
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop

08007090 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007090:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007092:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007094:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f013 0320 	ands.w	r3, r3, #32
 800709c:	d117      	bne.n	80070ce <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800709e:	6802      	ldr	r2, [r0, #0]
 80070a0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	f102 0308 	add.w	r3, r2, #8
 80070a8:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	f102 0008 	add.w	r0, r2, #8
 80070b4:	e840 3100 	strex	r1, r3, [r0]
 80070b8:	2900      	cmp	r1, #0
 80070ba:	d1f3      	bne.n	80070a4 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	e842 3100 	strex	r1, r3, [r2]
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d1f7      	bne.n	80070bc <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070cc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80070ce:	f7ff ffdd 	bl	800708c <HAL_UART_TxCpltCallback>
}
 80070d2:	bd08      	pop	{r3, pc}

080070d4 <HAL_UART_TxHalfCpltCallback>:
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop

080070d8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070d8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80070da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80070dc:	f7ff fffa 	bl	80070d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e0:	bd08      	pop	{r3, pc}
 80070e2:	bf00      	nop

080070e4 <HAL_UART_RxCpltCallback>:
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop

080070e8 <HAL_UART_RxHalfCpltCallback>:
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop

080070ec <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070ec:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070ee:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80070f0:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 80070f2:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80070f4:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	0612      	lsls	r2, r2, #24
 80070fa:	d501      	bpl.n	8007100 <UART_DMAError+0x14>
 80070fc:	2921      	cmp	r1, #33	; 0x21
 80070fe:	d00d      	beq.n	800711c <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	0652      	lsls	r2, r2, #25
 8007104:	d501      	bpl.n	800710a <UART_DMAError+0x1e>
 8007106:	2c22      	cmp	r4, #34	; 0x22
 8007108:	d016      	beq.n	8007138 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800710a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800710e:	f043 0310 	orr.w	r3, r3, #16
 8007112:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007116:	f7fa fa5d 	bl	80015d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800711a:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800711c:	2200      	movs	r2, #0
 800711e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007126:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	e843 2100 	strex	r1, r2, [r3]
 800712e:	2900      	cmp	r1, #0
 8007130:	d1f7      	bne.n	8007122 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8007132:	2220      	movs	r2, #32
 8007134:	6782      	str	r2, [r0, #120]	; 0x78
}
 8007136:	e7e3      	b.n	8007100 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8007138:	2200      	movs	r2, #0
 800713a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007142:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	e843 2100 	strex	r1, r2, [r3]
 800714a:	2900      	cmp	r1, #0
 800714c:	d1f7      	bne.n	800713e <UART_DMAError+0x52>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	f103 0208 	add.w	r2, r3, #8
 8007152:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007156:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	f103 0408 	add.w	r4, r3, #8
 800715e:	e844 2100 	strex	r1, r2, [r4]
 8007162:	2900      	cmp	r1, #0
 8007164:	d1f3      	bne.n	800714e <UART_DMAError+0x62>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007166:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007168:	2a01      	cmp	r2, #1
 800716a:	d005      	beq.n	8007178 <UART_DMAError+0x8c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800716e:	2220      	movs	r2, #32
 8007170:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->RxISR = NULL;
 8007172:	6643      	str	r3, [r0, #100]	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007174:	6603      	str	r3, [r0, #96]	; 0x60
}
 8007176:	e7c8      	b.n	800710a <UART_DMAError+0x1e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	e843 2100 	strex	r1, r2, [r3]
 8007184:	2900      	cmp	r1, #0
 8007186:	d0f1      	beq.n	800716c <UART_DMAError+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	e853 2f00 	ldrex	r2, [r3]
 800718c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	e843 2100 	strex	r1, r2, [r3]
 8007194:	2900      	cmp	r1, #0
 8007196:	d1ef      	bne.n	8007178 <UART_DMAError+0x8c>
 8007198:	e7e8      	b.n	800716c <UART_DMAError+0x80>
 800719a:	bf00      	nop

0800719c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800719c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800719e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071a6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071aa:	f7fa fa13 	bl	80015d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ae:	bd08      	pop	{r3, pc}

080071b0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071b0:	6803      	ldr	r3, [r0, #0]
 80071b2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071b4:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071b6:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80071ba:	ea12 0f0c 	tst.w	r2, ip
{
 80071be:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071c0:	689d      	ldr	r5, [r3, #8]
{
 80071c2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80071c4:	d14e      	bne.n	8007264 <HAL_UART_IRQHandler+0xb4>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071c6:	0696      	lsls	r6, r2, #26
 80071c8:	d502      	bpl.n	80071d0 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071ca:	068e      	lsls	r6, r1, #26
 80071cc:	f100 80e2 	bmi.w	8007394 <HAL_UART_IRQHandler+0x1e4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80071d2:	2801      	cmp	r0, #1
 80071d4:	d024      	beq.n	8007220 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071d6:	02d6      	lsls	r6, r2, #11
 80071d8:	d502      	bpl.n	80071e0 <HAL_UART_IRQHandler+0x30>
 80071da:	0268      	lsls	r0, r5, #9
 80071dc:	f100 80df 	bmi.w	800739e <HAL_UART_IRQHandler+0x1ee>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071e0:	0616      	lsls	r6, r2, #24
 80071e2:	d414      	bmi.n	800720e <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071e4:	0650      	lsls	r0, r2, #25
 80071e6:	d501      	bpl.n	80071ec <HAL_UART_IRQHandler+0x3c>
 80071e8:	064a      	lsls	r2, r1, #25
 80071ea:	d400      	bmi.n	80071ee <HAL_UART_IRQHandler+0x3e>
}
 80071ec:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	e843 2100 	strex	r1, r2, [r3]
 80071fa:	2900      	cmp	r1, #0
 80071fc:	d1f7      	bne.n	80071ee <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071fe:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007200:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007202:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8007204:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007206:	4620      	mov	r0, r4
 8007208:	f7ff ff40 	bl	800708c <HAL_UART_TxCpltCallback>
}
 800720c:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800720e:	060d      	lsls	r5, r1, #24
 8007210:	d5e8      	bpl.n	80071e4 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8007212:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0e9      	beq.n	80071ec <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8007218:	4620      	mov	r0, r4
}
 800721a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800721e:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007220:	06d6      	lsls	r6, r2, #27
 8007222:	d5d8      	bpl.n	80071d6 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007224:	06c8      	lsls	r0, r1, #27
 8007226:	d5d6      	bpl.n	80071d6 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007228:	2210      	movs	r2, #16
 800722a:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	0651      	lsls	r1, r2, #25
 8007230:	f140 80d2 	bpl.w	80073d8 <HAL_UART_IRQHandler+0x228>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007234:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007236:	6801      	ldr	r1, [r0, #0]
 8007238:	684a      	ldr	r2, [r1, #4]
 800723a:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800723c:	2a00      	cmp	r2, #0
 800723e:	d0d5      	beq.n	80071ec <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007240:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 8007244:	4295      	cmp	r5, r2
 8007246:	d9d1      	bls.n	80071ec <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8007248:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800724c:	680a      	ldr	r2, [r1, #0]
 800724e:	0692      	lsls	r2, r2, #26
 8007250:	f140 80f6 	bpl.w	8007440 <HAL_UART_IRQHandler+0x290>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007254:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8007258:	1a69      	subs	r1, r5, r1
 800725a:	4620      	mov	r0, r4
 800725c:	b289      	uxth	r1, r1
 800725e:	f7f9 fe8d 	bl	8000f7c <HAL_UARTEx_RxEventCallback>
}
 8007262:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007264:	4891      	ldr	r0, [pc, #580]	; (80074ac <HAL_UART_IRQHandler+0x2fc>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007266:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800726a:	4008      	ands	r0, r1
 800726c:	4330      	orrs	r0, r6
 800726e:	d0af      	beq.n	80071d0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007270:	07d5      	lsls	r5, r2, #31
 8007272:	d509      	bpl.n	8007288 <HAL_UART_IRQHandler+0xd8>
 8007274:	05c8      	lsls	r0, r1, #23
 8007276:	d507      	bpl.n	8007288 <HAL_UART_IRQHandler+0xd8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007278:	2001      	movs	r0, #1
 800727a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800727c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007280:	f040 0001 	orr.w	r0, r0, #1
 8007284:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007288:	0795      	lsls	r5, r2, #30
 800728a:	d57e      	bpl.n	800738a <HAL_UART_IRQHandler+0x1da>
 800728c:	b18e      	cbz	r6, 80072b2 <HAL_UART_IRQHandler+0x102>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800728e:	2002      	movs	r0, #2
 8007290:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007292:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007296:	f040 0004 	orr.w	r0, r0, #4
 800729a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800729e:	0750      	lsls	r0, r2, #29
 80072a0:	d507      	bpl.n	80072b2 <HAL_UART_IRQHandler+0x102>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072a2:	2004      	movs	r0, #4
 80072a4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072a6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80072aa:	f040 0002 	orr.w	r0, r0, #2
 80072ae:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072b2:	0710      	lsls	r0, r2, #28
 80072b4:	d50b      	bpl.n	80072ce <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072b6:	f001 0020 	and.w	r0, r1, #32
 80072ba:	4330      	orrs	r0, r6
 80072bc:	d007      	beq.n	80072ce <HAL_UART_IRQHandler+0x11e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072be:	2008      	movs	r0, #8
 80072c0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80072c6:	f040 0008 	orr.w	r0, r0, #8
 80072ca:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072ce:	0516      	lsls	r6, r2, #20
 80072d0:	d50a      	bpl.n	80072e8 <HAL_UART_IRQHandler+0x138>
 80072d2:	014d      	lsls	r5, r1, #5
 80072d4:	d508      	bpl.n	80072e8 <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80072da:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072dc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80072e0:	f040 0020 	orr.w	r0, r0, #32
 80072e4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072e8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80072ec:	2800      	cmp	r0, #0
 80072ee:	f43f af7d 	beq.w	80071ec <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072f2:	0690      	lsls	r0, r2, #26
 80072f4:	d506      	bpl.n	8007304 <HAL_UART_IRQHandler+0x154>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072f6:	0689      	lsls	r1, r1, #26
 80072f8:	d504      	bpl.n	8007304 <HAL_UART_IRQHandler+0x154>
        if (huart->RxISR != NULL)
 80072fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072fc:	b112      	cbz	r2, 8007304 <HAL_UART_IRQHandler+0x154>
          huart->RxISR(huart);
 80072fe:	4620      	mov	r0, r4
 8007300:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007302:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8007304:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007308:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800730a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800730e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8007312:	4315      	orrs	r5, r2
 8007314:	f000 80c4 	beq.w	80074a0 <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800731c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	e843 2100 	strex	r1, r2, [r3]
 8007324:	2900      	cmp	r1, #0
 8007326:	d1f7      	bne.n	8007318 <HAL_UART_IRQHandler+0x168>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	f103 0208 	add.w	r2, r3, #8
 800732c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007330:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	f103 0008 	add.w	r0, r3, #8
 8007338:	e840 2100 	strex	r1, r2, [r0]
 800733c:	2900      	cmp	r1, #0
 800733e:	d1f3      	bne.n	8007328 <HAL_UART_IRQHandler+0x178>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007340:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007342:	2a01      	cmp	r2, #1
 8007344:	d033      	beq.n	80073ae <HAL_UART_IRQHandler+0x1fe>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007346:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007348:	2120      	movs	r1, #32
 800734a:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734c:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734e:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8007350:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007352:	064a      	lsls	r2, r1, #25
 8007354:	d53c      	bpl.n	80073d0 <HAL_UART_IRQHandler+0x220>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	f103 0208 	add.w	r2, r3, #8
 800735a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	f103 0008 	add.w	r0, r3, #8
 8007366:	e840 2100 	strex	r1, r2, [r0]
 800736a:	2900      	cmp	r1, #0
 800736c:	d1f3      	bne.n	8007356 <HAL_UART_IRQHandler+0x1a6>
          if (huart->hdmarx != NULL)
 800736e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007370:	b370      	cbz	r0, 80073d0 <HAL_UART_IRQHandler+0x220>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007372:	4b4f      	ldr	r3, [pc, #316]	; (80074b0 <HAL_UART_IRQHandler+0x300>)
 8007374:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007376:	f7fd fc57 	bl	8004c28 <HAL_DMA_Abort_IT>
 800737a:	2800      	cmp	r0, #0
 800737c:	f43f af36 	beq.w	80071ec <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007380:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8007382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007386:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007388:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800738a:	0755      	lsls	r5, r2, #29
 800738c:	d591      	bpl.n	80072b2 <HAL_UART_IRQHandler+0x102>
 800738e:	2e00      	cmp	r6, #0
 8007390:	d187      	bne.n	80072a2 <HAL_UART_IRQHandler+0xf2>
 8007392:	e78e      	b.n	80072b2 <HAL_UART_IRQHandler+0x102>
      if (huart->RxISR != NULL)
 8007394:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007396:	2b00      	cmp	r3, #0
 8007398:	f47f af3f 	bne.w	800721a <HAL_UART_IRQHandler+0x6a>
 800739c:	e726      	b.n	80071ec <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800739e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80073a2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80073aa:	f000 bbef 	b.w	8007b8c <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	e843 2100 	strex	r1, r2, [r3]
 80073ba:	2900      	cmp	r1, #0
 80073bc:	d0c3      	beq.n	8007346 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	e853 2f00 	ldrex	r2, [r3]
 80073c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	e843 2100 	strex	r1, r2, [r3]
 80073ca:	2900      	cmp	r1, #0
 80073cc:	d1ef      	bne.n	80073ae <HAL_UART_IRQHandler+0x1fe>
 80073ce:	e7ba      	b.n	8007346 <HAL_UART_IRQHandler+0x196>
            HAL_UART_ErrorCallback(huart);
 80073d0:	4620      	mov	r0, r4
 80073d2:	f7fa f8ff 	bl	80015d4 <HAL_UART_ErrorCallback>
}
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073d8:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 80073dc:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80073e0:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073e2:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	f43f af01 	beq.w	80071ec <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073ea:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 80073ee:	1a51      	subs	r1, r2, r1
 80073f0:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80073f2:	2900      	cmp	r1, #0
 80073f4:	f43f aefa 	beq.w	80071ec <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	e843 2000 	strex	r0, r2, [r3]
 8007404:	2800      	cmp	r0, #0
 8007406:	d1f7      	bne.n	80073f8 <HAL_UART_IRQHandler+0x248>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	f103 0208 	add.w	r2, r3, #8
 800740c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007410:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	f103 0508 	add.w	r5, r3, #8
 8007418:	e845 2000 	strex	r0, r2, [r5]
 800741c:	2800      	cmp	r0, #0
 800741e:	d1f3      	bne.n	8007408 <HAL_UART_IRQHandler+0x258>
        huart->RxState = HAL_UART_STATE_READY;
 8007420:	2220      	movs	r2, #32
 8007422:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8007424:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007426:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	e843 2000 	strex	r0, r2, [r3]
 8007434:	2800      	cmp	r0, #0
 8007436:	d1f7      	bne.n	8007428 <HAL_UART_IRQHandler+0x278>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007438:	4620      	mov	r0, r4
 800743a:	f7f9 fd9f 	bl	8000f7c <HAL_UARTEx_RxEventCallback>
}
 800743e:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	e843 2100 	strex	r1, r2, [r3]
 800744c:	2900      	cmp	r1, #0
 800744e:	d1f7      	bne.n	8007440 <HAL_UART_IRQHandler+0x290>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	f103 0208 	add.w	r2, r3, #8
 8007454:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007458:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	f103 0508 	add.w	r5, r3, #8
 8007460:	e845 2100 	strex	r1, r2, [r5]
 8007464:	2900      	cmp	r1, #0
 8007466:	d1f3      	bne.n	8007450 <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	f103 0208 	add.w	r2, r3, #8
 800746c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	f103 0508 	add.w	r5, r3, #8
 8007478:	e845 2100 	strex	r1, r2, [r5]
 800747c:	2900      	cmp	r1, #0
 800747e:	d1f3      	bne.n	8007468 <HAL_UART_IRQHandler+0x2b8>
          huart->RxState = HAL_UART_STATE_READY;
 8007480:	2220      	movs	r2, #32
 8007482:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	e843 2100 	strex	r1, r2, [r3]
 8007492:	2900      	cmp	r1, #0
 8007494:	d1f7      	bne.n	8007486 <HAL_UART_IRQHandler+0x2d6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007496:	f7fd fba3 	bl	8004be0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800749a:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 800749e:	e6d9      	b.n	8007254 <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 80074a0:	4620      	mov	r0, r4
 80074a2:	f7fa f897 	bl	80015d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
 80074ac:	04000120 	.word	0x04000120
 80074b0:	0800719d 	.word	0x0800719d

080074b4 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80074b6:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d002      	beq.n	80074c4 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80074be:	f7ff fe13 	bl	80070e8 <HAL_UART_RxHalfCpltCallback>
}
 80074c2:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80074c4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80074c8:	0849      	lsrs	r1, r1, #1
 80074ca:	f7f9 fd57 	bl	8000f7c <HAL_UARTEx_RxEventCallback>
}
 80074ce:	bd08      	pop	{r3, pc}

080074d0 <UART_DMAReceiveCplt>:
{
 80074d0:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074d2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	f012 0220 	ands.w	r2, r2, #32
 80074dc:	d127      	bne.n	800752e <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 80074de:	6803      	ldr	r3, [r0, #0]
 80074e0:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	e843 2100 	strex	r1, r2, [r3]
 80074f0:	2900      	cmp	r1, #0
 80074f2:	d1f7      	bne.n	80074e4 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	f103 0208 	add.w	r2, r3, #8
 80074f8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	f103 0c08 	add.w	ip, r3, #8
 8007504:	e84c 2100 	strex	r1, r2, [ip]
 8007508:	2900      	cmp	r1, #0
 800750a:	d1f3      	bne.n	80074f4 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	f103 0208 	add.w	r2, r3, #8
 8007510:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	f103 0c08 	add.w	ip, r3, #8
 800751c:	e84c 2100 	strex	r1, r2, [ip]
 8007520:	2900      	cmp	r1, #0
 8007522:	d1f3      	bne.n	800750c <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8007524:	2220      	movs	r2, #32
 8007526:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007528:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800752a:	2a01      	cmp	r2, #1
 800752c:	d005      	beq.n	800753a <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800752e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007530:	2b01      	cmp	r3, #1
 8007532:	d013      	beq.n	800755c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8007534:	f7ff fdd6 	bl	80070e4 <HAL_UART_RxCpltCallback>
}
 8007538:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	e843 2100 	strex	r1, r2, [r3]
 8007546:	2900      	cmp	r1, #0
 8007548:	d0f1      	beq.n	800752e <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	e853 2f00 	ldrex	r2, [r3]
 800754e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	e843 2100 	strex	r1, r2, [r3]
 8007556:	2900      	cmp	r1, #0
 8007558:	d1ef      	bne.n	800753a <UART_DMAReceiveCplt+0x6a>
 800755a:	e7e8      	b.n	800752e <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800755c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8007560:	f7f9 fd0c 	bl	8000f7c <HAL_UARTEx_RxEventCallback>
}
 8007564:	bd08      	pop	{r3, pc}
 8007566:	bf00      	nop

08007568 <UART_SetConfig>:
{
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800756c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800756e:	6882      	ldr	r2, [r0, #8]
 8007570:	6900      	ldr	r0, [r0, #16]
 8007572:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007574:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007576:	4302      	orrs	r2, r0
 8007578:	430a      	orrs	r2, r1
 800757a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800757c:	499f      	ldr	r1, [pc, #636]	; (80077fc <UART_SetConfig+0x294>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800757e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007580:	4029      	ands	r1, r5
 8007582:	430a      	orrs	r2, r1
 8007584:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	68e1      	ldr	r1, [r4, #12]
 800758a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800758e:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007590:	499b      	ldr	r1, [pc, #620]	; (8007800 <UART_SetConfig+0x298>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007592:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007594:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007596:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007598:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800759a:	d071      	beq.n	8007680 <UART_SetConfig+0x118>
    tmpreg |= huart->Init.OneBitSampling;
 800759c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800759e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80075a2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075a4:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075a6:	4997      	ldr	r1, [pc, #604]	; (8007804 <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075a8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075aa:	428b      	cmp	r3, r1
 80075ac:	d024      	beq.n	80075f8 <UART_SetConfig+0x90>
 80075ae:	4a96      	ldr	r2, [pc, #600]	; (8007808 <UART_SetConfig+0x2a0>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d043      	beq.n	800763c <UART_SetConfig+0xd4>
 80075b4:	4a95      	ldr	r2, [pc, #596]	; (800780c <UART_SetConfig+0x2a4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	f000 80d7 	beq.w	800776a <UART_SetConfig+0x202>
 80075bc:	4a94      	ldr	r2, [pc, #592]	; (8007810 <UART_SetConfig+0x2a8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	f000 80a1 	beq.w	8007706 <UART_SetConfig+0x19e>
 80075c4:	4a93      	ldr	r2, [pc, #588]	; (8007814 <UART_SetConfig+0x2ac>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d111      	bne.n	80075ee <UART_SetConfig+0x86>
 80075ca:	4b93      	ldr	r3, [pc, #588]	; (8007818 <UART_SetConfig+0x2b0>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d8:	f000 80ff 	beq.w	80077da <UART_SetConfig+0x272>
 80075dc:	f200 80be 	bhi.w	800775c <UART_SetConfig+0x1f4>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 80dc 	beq.w	800779e <UART_SetConfig+0x236>
 80075e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ea:	f000 8099 	beq.w	8007720 <UART_SetConfig+0x1b8>
        ret = HAL_ERROR;
 80075ee:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80075f0:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80075f2:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
}
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075f8:	4b87      	ldr	r3, [pc, #540]	; (8007818 <UART_SetConfig+0x2b0>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	3b01      	subs	r3, #1
 8007604:	2b02      	cmp	r3, #2
 8007606:	d978      	bls.n	80076fa <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007608:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800760c:	f000 80f0 	beq.w	80077f0 <UART_SetConfig+0x288>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007610:	f7fe f9e2 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007614:	2800      	cmp	r0, #0
 8007616:	d048      	beq.n	80076aa <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007618:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800761a:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800761e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8007622:	fbb0 f2f2 	udiv	r2, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007626:	f1a2 0110 	sub.w	r1, r2, #16
 800762a:	4299      	cmp	r1, r3
 800762c:	d8df      	bhi.n	80075ee <UART_SetConfig+0x86>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 8007632:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8007634:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
 8007638:	2000      	movs	r0, #0
}
 800763a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800763c:	4b76      	ldr	r3, [pc, #472]	; (8007818 <UART_SetConfig+0x2b0>)
 800763e:	4a77      	ldr	r2, [pc, #476]	; (800781c <UART_SetConfig+0x2b4>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007644:	f003 030c 	and.w	r3, r3, #12
 8007648:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800764a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800764e:	d06d      	beq.n	800772c <UART_SetConfig+0x1c4>
    switch (clocksource)
 8007650:	2b08      	cmp	r3, #8
 8007652:	d8cc      	bhi.n	80075ee <UART_SetConfig+0x86>
 8007654:	a201      	add	r2, pc, #4	; (adr r2, 800765c <UART_SetConfig+0xf4>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	08007765 	.word	0x08007765
 8007660:	08007611 	.word	0x08007611
 8007664:	080077e1 	.word	0x080077e1
 8007668:	080075ef 	.word	0x080075ef
 800766c:	08007727 	.word	0x08007727
 8007670:	080075ef 	.word	0x080075ef
 8007674:	080075ef 	.word	0x080075ef
 8007678:	080075ef 	.word	0x080075ef
 800767c:	0800778f 	.word	0x0800778f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007680:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007684:	4864      	ldr	r0, [pc, #400]	; (8007818 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007686:	430a      	orrs	r2, r1
 8007688:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800768a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800768e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007696:	f000 8080 	beq.w	800779a <UART_SetConfig+0x232>
 800769a:	d80b      	bhi.n	80076b4 <UART_SetConfig+0x14c>
 800769c:	b383      	cbz	r3, 8007700 <UART_SetConfig+0x198>
 800769e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a2:	d1a4      	bne.n	80075ee <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetSysClockFreq();
 80076a4:	f7fd fd90 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80076a8:	b948      	cbnz	r0, 80076be <UART_SetConfig+0x156>
  huart->RxISR = NULL;
 80076aa:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80076ac:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
 80076b0:	2000      	movs	r0, #0
}
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076b8:	d199      	bne.n	80075ee <UART_SetConfig+0x86>
        pclk = (uint32_t) LSE_VALUE;
 80076ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076be:	6862      	ldr	r2, [r4, #4]
 80076c0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80076c4:	4283      	cmp	r3, r0
 80076c6:	d892      	bhi.n	80075ee <UART_SetConfig+0x86>
 80076c8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80076cc:	d88f      	bhi.n	80075ee <UART_SetConfig+0x86>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076ce:	2500      	movs	r5, #0
 80076d0:	0853      	lsrs	r3, r2, #1
 80076d2:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80076d6:	4629      	mov	r1, r5
 80076d8:	fbe0 310c 	umlal	r3, r1, r0, ip
 80076dc:	4618      	mov	r0, r3
 80076de:	462b      	mov	r3, r5
 80076e0:	f7f9 fa94 	bl	8000c0c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076e4:	4a4e      	ldr	r2, [pc, #312]	; (8007820 <UART_SetConfig+0x2b8>)
 80076e6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80076ea:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076ec:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076ee:	f63f af7e 	bhi.w	80075ee <UART_SetConfig+0x86>
          huart->Instance->BRR = usartdiv;
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	4628      	mov	r0, r5
 80076f6:	60d3      	str	r3, [r2, #12]
 80076f8:	e77a      	b.n	80075f0 <UART_SetConfig+0x88>
 80076fa:	4a4a      	ldr	r2, [pc, #296]	; (8007824 <UART_SetConfig+0x2bc>)
 80076fc:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80076fe:	e7a4      	b.n	800764a <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007700:	f7fe f958 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
        break;
 8007704:	e7d0      	b.n	80076a8 <UART_SetConfig+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007706:	4b44      	ldr	r3, [pc, #272]	; (8007818 <UART_SetConfig+0x2b0>)
 8007708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007710:	2b80      	cmp	r3, #128	; 0x80
 8007712:	d062      	beq.n	80077da <UART_SetConfig+0x272>
 8007714:	d83e      	bhi.n	8007794 <UART_SetConfig+0x22c>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d041      	beq.n	800779e <UART_SetConfig+0x236>
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	f47f af67 	bne.w	80075ee <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007720:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007724:	d05e      	beq.n	80077e4 <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007726:	f7fd fd4f 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
        break;
 800772a:	e773      	b.n	8007614 <UART_SetConfig+0xac>
    switch (clocksource)
 800772c:	2b08      	cmp	r3, #8
 800772e:	f63f af5e 	bhi.w	80075ee <UART_SetConfig+0x86>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <UART_SetConfig+0x1d0>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	080077a5 	.word	0x080077a5
 800773c:	080077f1 	.word	0x080077f1
 8007740:	080077f7 	.word	0x080077f7
 8007744:	080075ef 	.word	0x080075ef
 8007748:	080077e5 	.word	0x080077e5
 800774c:	080075ef 	.word	0x080075ef
 8007750:	080075ef 	.word	0x080075ef
 8007754:	080075ef 	.word	0x080075ef
 8007758:	080077eb 	.word	0x080077eb
  UART_GETCLOCKSOURCE(huart, clocksource);
 800775c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007760:	d012      	beq.n	8007788 <UART_SetConfig+0x220>
 8007762:	e744      	b.n	80075ee <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fe f926 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
        break;
 8007768:	e754      	b.n	8007614 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800776a:	4b2b      	ldr	r3, [pc, #172]	; (8007818 <UART_SetConfig+0x2b0>)
 800776c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007774:	2b20      	cmp	r3, #32
 8007776:	d030      	beq.n	80077da <UART_SetConfig+0x272>
 8007778:	d803      	bhi.n	8007782 <UART_SetConfig+0x21a>
 800777a:	b183      	cbz	r3, 800779e <UART_SetConfig+0x236>
 800777c:	2b10      	cmp	r3, #16
 800777e:	d0cf      	beq.n	8007720 <UART_SetConfig+0x1b8>
 8007780:	e735      	b.n	80075ee <UART_SetConfig+0x86>
 8007782:	2b30      	cmp	r3, #48	; 0x30
 8007784:	f47f af33 	bne.w	80075ee <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007788:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800778c:	d02d      	beq.n	80077ea <UART_SetConfig+0x282>
    switch (clocksource)
 800778e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007792:	e741      	b.n	8007618 <UART_SetConfig+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007794:	2bc0      	cmp	r3, #192	; 0xc0
 8007796:	d0f7      	beq.n	8007788 <UART_SetConfig+0x220>
 8007798:	e729      	b.n	80075ee <UART_SetConfig+0x86>
 800779a:	4823      	ldr	r0, [pc, #140]	; (8007828 <UART_SetConfig+0x2c0>)
 800779c:	e78f      	b.n	80076be <UART_SetConfig+0x156>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800779e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80077a2:	d1df      	bne.n	8007764 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a4:	f7fe f906 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80077a8:	2800      	cmp	r0, #0
 80077aa:	f43f af7e 	beq.w	80076aa <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ae:	0043      	lsls	r3, r0, #1
 80077b0:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b2:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077b6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80077ba:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077be:	f1a3 0210 	sub.w	r2, r3, #16
 80077c2:	428a      	cmp	r2, r1
 80077c4:	f63f af13 	bhi.w	80075ee <UART_SetConfig+0x86>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077c8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80077cc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077ce:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077d0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60cb      	str	r3, [r1, #12]
 80077d8:	e767      	b.n	80076aa <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80077de:	d00a      	beq.n	80077f6 <UART_SetConfig+0x28e>
        pclk = (uint32_t) HSI_VALUE;
 80077e0:	4811      	ldr	r0, [pc, #68]	; (8007828 <UART_SetConfig+0x2c0>)
 80077e2:	e719      	b.n	8007618 <UART_SetConfig+0xb0>
        pclk = HAL_RCC_GetSysClockFreq();
 80077e4:	f7fd fcf0 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
        break;
 80077e8:	e7de      	b.n	80077a8 <UART_SetConfig+0x240>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80077ee:	e7df      	b.n	80077b0 <UART_SetConfig+0x248>
        pclk = HAL_RCC_GetPCLK2Freq();
 80077f0:	f7fe f8f2 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
        break;
 80077f4:	e7d8      	b.n	80077a8 <UART_SetConfig+0x240>
    switch (clocksource)
 80077f6:	4b0d      	ldr	r3, [pc, #52]	; (800782c <UART_SetConfig+0x2c4>)
 80077f8:	e7da      	b.n	80077b0 <UART_SetConfig+0x248>
 80077fa:	bf00      	nop
 80077fc:	efff69f3 	.word	0xefff69f3
 8007800:	40008000 	.word	0x40008000
 8007804:	40013800 	.word	0x40013800
 8007808:	40004400 	.word	0x40004400
 800780c:	40004800 	.word	0x40004800
 8007810:	40004c00 	.word	0x40004c00
 8007814:	40005000 	.word	0x40005000
 8007818:	40021000 	.word	0x40021000
 800781c:	0800aa64 	.word	0x0800aa64
 8007820:	000ffcff 	.word	0x000ffcff
 8007824:	0800aa60 	.word	0x0800aa60
 8007828:	00f42400 	.word	0x00f42400
 800782c:	01e84800 	.word	0x01e84800

08007830 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007830:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007832:	07da      	lsls	r2, r3, #31
{
 8007834:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007836:	d506      	bpl.n	8007846 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007838:	6801      	ldr	r1, [r0, #0]
 800783a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800783c:	684a      	ldr	r2, [r1, #4]
 800783e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007842:	4322      	orrs	r2, r4
 8007844:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007846:	079c      	lsls	r4, r3, #30
 8007848:	d506      	bpl.n	8007858 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800784a:	6801      	ldr	r1, [r0, #0]
 800784c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800784e:	684a      	ldr	r2, [r1, #4]
 8007850:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007854:	4322      	orrs	r2, r4
 8007856:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007858:	0759      	lsls	r1, r3, #29
 800785a:	d506      	bpl.n	800786a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800785c:	6801      	ldr	r1, [r0, #0]
 800785e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007860:	684a      	ldr	r2, [r1, #4]
 8007862:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007866:	4322      	orrs	r2, r4
 8007868:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800786a:	071a      	lsls	r2, r3, #28
 800786c:	d506      	bpl.n	800787c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800786e:	6801      	ldr	r1, [r0, #0]
 8007870:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007872:	684a      	ldr	r2, [r1, #4]
 8007874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007878:	4322      	orrs	r2, r4
 800787a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800787c:	06dc      	lsls	r4, r3, #27
 800787e:	d506      	bpl.n	800788e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007880:	6801      	ldr	r1, [r0, #0]
 8007882:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007884:	688a      	ldr	r2, [r1, #8]
 8007886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800788a:	4322      	orrs	r2, r4
 800788c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800788e:	0699      	lsls	r1, r3, #26
 8007890:	d506      	bpl.n	80078a0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007892:	6801      	ldr	r1, [r0, #0]
 8007894:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007896:	688a      	ldr	r2, [r1, #8]
 8007898:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800789c:	4322      	orrs	r2, r4
 800789e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078a0:	065a      	lsls	r2, r3, #25
 80078a2:	d509      	bpl.n	80078b8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078a4:	6801      	ldr	r1, [r0, #0]
 80078a6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80078a8:	684a      	ldr	r2, [r1, #4]
 80078aa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80078ae:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078b4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078b6:	d00b      	beq.n	80078d0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078b8:	061b      	lsls	r3, r3, #24
 80078ba:	d506      	bpl.n	80078ca <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078bc:	6802      	ldr	r2, [r0, #0]
 80078be:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80078c0:	6853      	ldr	r3, [r2, #4]
 80078c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80078c6:	430b      	orrs	r3, r1
 80078c8:	6053      	str	r3, [r2, #4]
}
 80078ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ce:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078d0:	684a      	ldr	r2, [r1, #4]
 80078d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80078d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80078d8:	4322      	orrs	r2, r4
 80078da:	604a      	str	r2, [r1, #4]
 80078dc:	e7ec      	b.n	80078b8 <UART_AdvFeatureConfig+0x88>
 80078de:	bf00      	nop

080078e0 <UART_WaitOnFlagUntilTimeout>:
{
 80078e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e8:	6804      	ldr	r4, [r0, #0]
{
 80078ea:	4607      	mov	r7, r0
 80078ec:	460e      	mov	r6, r1
 80078ee:	4615      	mov	r5, r2
 80078f0:	4699      	mov	r9, r3
 80078f2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80078f6:	d10a      	bne.n	800790e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f8:	69e3      	ldr	r3, [r4, #28]
 80078fa:	ea36 0303 	bics.w	r3, r6, r3
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	429d      	cmp	r5, r3
 8007906:	d0f7      	beq.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8007908:	2000      	movs	r0, #0
}
 800790a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800790e:	69e3      	ldr	r3, [r4, #28]
 8007910:	ea36 0303 	bics.w	r3, r6, r3
 8007914:	bf0c      	ite	eq
 8007916:	2301      	moveq	r3, #1
 8007918:	2300      	movne	r3, #0
 800791a:	42ab      	cmp	r3, r5
 800791c:	d1f4      	bne.n	8007908 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791e:	f7fc f96b 	bl	8003bf8 <HAL_GetTick>
 8007922:	eba0 0009 	sub.w	r0, r0, r9
 8007926:	4540      	cmp	r0, r8
 8007928:	d831      	bhi.n	800798e <UART_WaitOnFlagUntilTimeout+0xae>
 800792a:	f1b8 0f00 	cmp.w	r8, #0
 800792e:	d02e      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007930:	683c      	ldr	r4, [r7, #0]
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	0759      	lsls	r1, r3, #29
 8007936:	4622      	mov	r2, r4
 8007938:	d5db      	bpl.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800793a:	69e3      	ldr	r3, [r4, #28]
 800793c:	051b      	lsls	r3, r3, #20
 800793e:	d5d8      	bpl.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007944:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800794a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	e844 3100 	strex	r1, r3, [r4]
 8007952:	b139      	cbz	r1, 8007964 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	e852 3f00 	ldrex	r3, [r2]
 8007958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	e842 3100 	strex	r1, r3, [r2]
 8007960:	2900      	cmp	r1, #0
 8007962:	d1f7      	bne.n	8007954 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	f102 0308 	add.w	r3, r2, #8
 8007968:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	f102 0008 	add.w	r0, r2, #8
 8007974:	e840 3100 	strex	r1, r3, [r0]
 8007978:	2900      	cmp	r1, #0
 800797a:	d1f3      	bne.n	8007964 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800797c:	2320      	movs	r3, #32
 800797e:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8007980:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007984:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 8007986:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 800798c:	e7bd      	b.n	800790a <UART_WaitOnFlagUntilTimeout+0x2a>
 800798e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	e842 3100 	strex	r1, r3, [r2]
 800799c:	2900      	cmp	r1, #0
 800799e:	d1f7      	bne.n	8007990 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	f102 0308 	add.w	r3, r2, #8
 80079a4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	f102 0008 	add.w	r0, r2, #8
 80079b0:	e840 3100 	strex	r1, r3, [r0]
 80079b4:	2900      	cmp	r1, #0
 80079b6:	d1f3      	bne.n	80079a0 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 80079b8:	2320      	movs	r3, #32
 80079ba:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80079bc:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80079c0:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 80079c2:	2003      	movs	r0, #3
 80079c4:	e7a1      	b.n	800790a <UART_WaitOnFlagUntilTimeout+0x2a>
 80079c6:	bf00      	nop

080079c8 <HAL_UART_Init>:
  if (huart == NULL)
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d062      	beq.n	8007a92 <HAL_UART_Init+0xca>
{
 80079cc:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80079ce:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80079d0:	b082      	sub	sp, #8
 80079d2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d049      	beq.n	8007a6c <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 80079d8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80079da:	2324      	movs	r3, #36	; 0x24
 80079dc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80079de:	6813      	ldr	r3, [r2, #0]
 80079e0:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079e4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80079e6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079e8:	f7ff fdbe 	bl	8007568 <UART_SetConfig>
 80079ec:	2801      	cmp	r0, #1
 80079ee:	d03a      	beq.n	8007a66 <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d133      	bne.n	8007a5e <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	6859      	ldr	r1, [r3, #4]
 80079fa:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80079fe:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a00:	6899      	ldr	r1, [r3, #8]
 8007a02:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8007a06:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007a08:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0a:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8007a0c:	f041 0101 	orr.w	r1, r1, #1
 8007a10:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a12:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8007a16:	f7fc f8ef 	bl	8003bf8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8007a20:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a22:	d40c      	bmi.n	8007a3e <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	075b      	lsls	r3, r3, #29
 8007a28:	d425      	bmi.n	8007a76 <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8007a30:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007a34:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8007a36:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a38:	6623      	str	r3, [r4, #96]	; 0x60
}
 8007a3a:	b002      	add	sp, #8
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	462a      	mov	r2, r5
 8007a46:	4603      	mov	r3, r0
 8007a48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f7ff ff47 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8007a52:	b9e0      	cbnz	r0, 8007a8e <HAL_UART_Init+0xc6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	075b      	lsls	r3, r3, #29
 8007a5a:	d40c      	bmi.n	8007a76 <HAL_UART_Init+0xae>
 8007a5c:	e7e5      	b.n	8007a2a <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f7ff fee6 	bl	8007830 <UART_AdvFeatureConfig>
 8007a64:	e7c7      	b.n	80079f6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8007a66:	2001      	movs	r0, #1
}
 8007a68:	b002      	add	sp, #8
 8007a6a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8007a6c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8007a70:	f7f9 fec8 	bl	8001804 <HAL_UART_MspInit>
 8007a74:	e7b0      	b.n	80079d8 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4633      	mov	r3, r6
 8007a80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a84:	4620      	mov	r0, r4
 8007a86:	f7ff ff2b 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d0cd      	beq.n	8007a2a <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 8007a8e:	2003      	movs	r0, #3
 8007a90:	e7d3      	b.n	8007a3a <HAL_UART_Init+0x72>
    return HAL_ERROR;
 8007a92:	2001      	movs	r0, #1
}
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop

08007a98 <UART_Start_Receive_DMA>:
{
 8007a98:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a9a:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9c:	2500      	movs	r5, #0
 8007a9e:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
{
 8007aa2:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8007aa4:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize = Size;
 8007aa6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aaa:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8007aac:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8007aae:	b168      	cbz	r0, 8007acc <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ab0:	4e1f      	ldr	r6, [pc, #124]	; (8007b30 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8007ab2:	6385      	str	r5, [r0, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007aba:	62c6      	str	r6, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007abc:	4e1d      	ldr	r6, [pc, #116]	; (8007b34 <UART_Start_Receive_DMA+0x9c>)
 8007abe:	6306      	str	r6, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ac0:	4e1d      	ldr	r6, [pc, #116]	; (8007b38 <UART_Start_Receive_DMA+0xa0>)
 8007ac2:	6346      	str	r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ac4:	3124      	adds	r1, #36	; 0x24
 8007ac6:	f7fd f845 	bl	8004b54 <HAL_DMA_Start_IT>
 8007aca:	bb40      	cbnz	r0, 8007b1e <UART_Start_Receive_DMA+0x86>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007acc:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ad4:	b14b      	cbz	r3, 8007aea <UART_Start_Receive_DMA+0x52>
 8007ad6:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	e843 2100 	strex	r1, r2, [r3]
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d1f7      	bne.n	8007ad8 <UART_Start_Receive_DMA+0x40>
 8007ae8:	e000      	b.n	8007aec <UART_Start_Receive_DMA+0x54>
 8007aea:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	f103 0208 	add.w	r2, r3, #8
 8007af0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af4:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	f103 0008 	add.w	r0, r3, #8
 8007afc:	e840 2100 	strex	r1, r2, [r0]
 8007b00:	2900      	cmp	r1, #0
 8007b02:	d1f3      	bne.n	8007aec <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	f103 0208 	add.w	r2, r3, #8
 8007b08:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	f103 0108 	add.w	r1, r3, #8
 8007b14:	e841 2000 	strex	r0, r2, [r1]
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d1f3      	bne.n	8007b04 <UART_Start_Receive_DMA+0x6c>
}
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b1e:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8007b20:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8007b22:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b26:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      return HAL_ERROR;
 8007b2a:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 8007b2c:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	080074d1 	.word	0x080074d1
 8007b34:	080074b5 	.word	0x080074b5
 8007b38:	080070ed 	.word	0x080070ed

08007b3c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b3c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d120      	bne.n	8007b84 <HAL_UART_Receive_DMA+0x48>
    if ((pData == NULL) || (Size == 0U))
 8007b42:	b1e9      	cbz	r1, 8007b80 <HAL_UART_Receive_DMA+0x44>
 8007b44:	b1e2      	cbz	r2, 8007b80 <HAL_UART_Receive_DMA+0x44>
    __HAL_LOCK(huart);
 8007b46:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d01a      	beq.n	8007b84 <HAL_UART_Receive_DMA+0x48>
{
 8007b4e:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b50:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <HAL_UART_Receive_DMA+0x4c>)
 8007b52:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8007b54:	2501      	movs	r5, #1
 8007b56:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b5a:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5c:	f04f 0500 	mov.w	r5, #0
 8007b60:	6605      	str	r5, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b62:	d00a      	beq.n	8007b7a <HAL_UART_Receive_DMA+0x3e>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b64:	6863      	ldr	r3, [r4, #4]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	d507      	bpl.n	8007b7a <HAL_UART_Receive_DMA+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	e844 3500 	strex	r5, r3, [r4]
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	d1f7      	bne.n	8007b6a <HAL_UART_Receive_DMA+0x2e>
}
 8007b7a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007b7c:	f7ff bf8c 	b.w	8007a98 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8007b80:	2001      	movs	r0, #1
 8007b82:	4770      	bx	lr
    return HAL_BUSY;
 8007b84:	2002      	movs	r0, #2
}
 8007b86:	4770      	bx	lr
 8007b88:	40008000 	.word	0x40008000

08007b8c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop

08007b90 <atof>:
 8007b90:	2100      	movs	r1, #0
 8007b92:	f000 be63 	b.w	800885c <strtod>
	...

08007b98 <__errno>:
 8007b98:	4b01      	ldr	r3, [pc, #4]	; (8007ba0 <__errno+0x8>)
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	200001a8 	.word	0x200001a8

08007ba4 <__libc_init_array>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4d0d      	ldr	r5, [pc, #52]	; (8007bdc <__libc_init_array+0x38>)
 8007ba8:	4c0d      	ldr	r4, [pc, #52]	; (8007be0 <__libc_init_array+0x3c>)
 8007baa:	1b64      	subs	r4, r4, r5
 8007bac:	10a4      	asrs	r4, r4, #2
 8007bae:	2600      	movs	r6, #0
 8007bb0:	42a6      	cmp	r6, r4
 8007bb2:	d109      	bne.n	8007bc8 <__libc_init_array+0x24>
 8007bb4:	4d0b      	ldr	r5, [pc, #44]	; (8007be4 <__libc_init_array+0x40>)
 8007bb6:	4c0c      	ldr	r4, [pc, #48]	; (8007be8 <__libc_init_array+0x44>)
 8007bb8:	f002 ff20 	bl	800a9fc <_init>
 8007bbc:	1b64      	subs	r4, r4, r5
 8007bbe:	10a4      	asrs	r4, r4, #2
 8007bc0:	2600      	movs	r6, #0
 8007bc2:	42a6      	cmp	r6, r4
 8007bc4:	d105      	bne.n	8007bd2 <__libc_init_array+0x2e>
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bcc:	4798      	blx	r3
 8007bce:	3601      	adds	r6, #1
 8007bd0:	e7ee      	b.n	8007bb0 <__libc_init_array+0xc>
 8007bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd6:	4798      	blx	r3
 8007bd8:	3601      	adds	r6, #1
 8007bda:	e7f2      	b.n	8007bc2 <__libc_init_array+0x1e>
 8007bdc:	0800aeac 	.word	0x0800aeac
 8007be0:	0800aeac 	.word	0x0800aeac
 8007be4:	0800aeac 	.word	0x0800aeac
 8007be8:	0800aeb0 	.word	0x0800aeb0

08007bec <memcpy>:
 8007bec:	440a      	add	r2, r1
 8007bee:	4291      	cmp	r1, r2
 8007bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bf4:	d100      	bne.n	8007bf8 <memcpy+0xc>
 8007bf6:	4770      	bx	lr
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c02:	4291      	cmp	r1, r2
 8007c04:	d1f9      	bne.n	8007bfa <memcpy+0xe>
 8007c06:	bd10      	pop	{r4, pc}

08007c08 <memset>:
 8007c08:	4402      	add	r2, r0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d100      	bne.n	8007c12 <memset+0xa>
 8007c10:	4770      	bx	lr
 8007c12:	f803 1b01 	strb.w	r1, [r3], #1
 8007c16:	e7f9      	b.n	8007c0c <memset+0x4>

08007c18 <sulp>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	460d      	mov	r5, r1
 8007c1e:	ec45 4b10 	vmov	d0, r4, r5
 8007c22:	4616      	mov	r6, r2
 8007c24:	f001 fd1a 	bl	800965c <__ulp>
 8007c28:	ec51 0b10 	vmov	r0, r1, d0
 8007c2c:	b17e      	cbz	r6, 8007c4e <sulp+0x36>
 8007c2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dd09      	ble.n	8007c4e <sulp+0x36>
 8007c3a:	051b      	lsls	r3, r3, #20
 8007c3c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c40:	2400      	movs	r4, #0
 8007c42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007c46:	4622      	mov	r2, r4
 8007c48:	462b      	mov	r3, r5
 8007c4a:	f7f8 fcd5 	bl	80005f8 <__aeabi_dmul>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}

08007c50 <_strtod_l>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	ed2d 8b02 	vpush	{d8}
 8007c58:	b09d      	sub	sp, #116	; 0x74
 8007c5a:	461f      	mov	r7, r3
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9318      	str	r3, [sp, #96]	; 0x60
 8007c60:	4ba2      	ldr	r3, [pc, #648]	; (8007eec <_strtod_l+0x29c>)
 8007c62:	9213      	str	r2, [sp, #76]	; 0x4c
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	9305      	str	r3, [sp, #20]
 8007c68:	4604      	mov	r4, r0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	4688      	mov	r8, r1
 8007c6e:	f7f8 faaf 	bl	80001d0 <strlen>
 8007c72:	f04f 0a00 	mov.w	sl, #0
 8007c76:	4605      	mov	r5, r0
 8007c78:	f04f 0b00 	mov.w	fp, #0
 8007c7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	2a2b      	cmp	r2, #43	; 0x2b
 8007c86:	d04e      	beq.n	8007d26 <_strtod_l+0xd6>
 8007c88:	d83b      	bhi.n	8007d02 <_strtod_l+0xb2>
 8007c8a:	2a0d      	cmp	r2, #13
 8007c8c:	d834      	bhi.n	8007cf8 <_strtod_l+0xa8>
 8007c8e:	2a08      	cmp	r2, #8
 8007c90:	d834      	bhi.n	8007cfc <_strtod_l+0xac>
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	d03e      	beq.n	8007d14 <_strtod_l+0xc4>
 8007c96:	2300      	movs	r3, #0
 8007c98:	930a      	str	r3, [sp, #40]	; 0x28
 8007c9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007c9c:	7833      	ldrb	r3, [r6, #0]
 8007c9e:	2b30      	cmp	r3, #48	; 0x30
 8007ca0:	f040 80b0 	bne.w	8007e04 <_strtod_l+0x1b4>
 8007ca4:	7873      	ldrb	r3, [r6, #1]
 8007ca6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007caa:	2b58      	cmp	r3, #88	; 0x58
 8007cac:	d168      	bne.n	8007d80 <_strtod_l+0x130>
 8007cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	ab18      	add	r3, sp, #96	; 0x60
 8007cb4:	9702      	str	r7, [sp, #8]
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	4a8d      	ldr	r2, [pc, #564]	; (8007ef0 <_strtod_l+0x2a0>)
 8007cba:	ab19      	add	r3, sp, #100	; 0x64
 8007cbc:	a917      	add	r1, sp, #92	; 0x5c
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 fe40 	bl	8008944 <__gethex>
 8007cc4:	f010 0707 	ands.w	r7, r0, #7
 8007cc8:	4605      	mov	r5, r0
 8007cca:	d005      	beq.n	8007cd8 <_strtod_l+0x88>
 8007ccc:	2f06      	cmp	r7, #6
 8007cce:	d12c      	bne.n	8007d2a <_strtod_l+0xda>
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9617      	str	r6, [sp, #92]	; 0x5c
 8007cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f040 8590 	bne.w	8008800 <_strtod_l+0xbb0>
 8007ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce2:	b1eb      	cbz	r3, 8007d20 <_strtod_l+0xd0>
 8007ce4:	4652      	mov	r2, sl
 8007ce6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007cea:	ec43 2b10 	vmov	d0, r2, r3
 8007cee:	b01d      	add	sp, #116	; 0x74
 8007cf0:	ecbd 8b02 	vpop	{d8}
 8007cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf8:	2a20      	cmp	r2, #32
 8007cfa:	d1cc      	bne.n	8007c96 <_strtod_l+0x46>
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d00:	e7be      	b.n	8007c80 <_strtod_l+0x30>
 8007d02:	2a2d      	cmp	r2, #45	; 0x2d
 8007d04:	d1c7      	bne.n	8007c96 <_strtod_l+0x46>
 8007d06:	2201      	movs	r2, #1
 8007d08:	920a      	str	r2, [sp, #40]	; 0x28
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d0e:	785b      	ldrb	r3, [r3, #1]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1c2      	bne.n	8007c9a <_strtod_l+0x4a>
 8007d14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f040 856e 	bne.w	80087fc <_strtod_l+0xbac>
 8007d20:	4652      	mov	r2, sl
 8007d22:	465b      	mov	r3, fp
 8007d24:	e7e1      	b.n	8007cea <_strtod_l+0x9a>
 8007d26:	2200      	movs	r2, #0
 8007d28:	e7ee      	b.n	8007d08 <_strtod_l+0xb8>
 8007d2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d2c:	b13a      	cbz	r2, 8007d3e <_strtod_l+0xee>
 8007d2e:	2135      	movs	r1, #53	; 0x35
 8007d30:	a81a      	add	r0, sp, #104	; 0x68
 8007d32:	f001 fd9e 	bl	8009872 <__copybits>
 8007d36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f001 f95d 	bl	8008ff8 <_Bfree>
 8007d3e:	3f01      	subs	r7, #1
 8007d40:	2f04      	cmp	r7, #4
 8007d42:	d806      	bhi.n	8007d52 <_strtod_l+0x102>
 8007d44:	e8df f007 	tbb	[pc, r7]
 8007d48:	1714030a 	.word	0x1714030a
 8007d4c:	0a          	.byte	0x0a
 8007d4d:	00          	.byte	0x00
 8007d4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007d52:	0728      	lsls	r0, r5, #28
 8007d54:	d5c0      	bpl.n	8007cd8 <_strtod_l+0x88>
 8007d56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007d5a:	e7bd      	b.n	8007cd8 <_strtod_l+0x88>
 8007d5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007d60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d6e:	e7f0      	b.n	8007d52 <_strtod_l+0x102>
 8007d70:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007ef4 <_strtod_l+0x2a4>
 8007d74:	e7ed      	b.n	8007d52 <_strtod_l+0x102>
 8007d76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007d7a:	f04f 3aff 	mov.w	sl, #4294967295
 8007d7e:	e7e8      	b.n	8007d52 <_strtod_l+0x102>
 8007d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d86:	785b      	ldrb	r3, [r3, #1]
 8007d88:	2b30      	cmp	r3, #48	; 0x30
 8007d8a:	d0f9      	beq.n	8007d80 <_strtod_l+0x130>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0a3      	beq.n	8007cd8 <_strtod_l+0x88>
 8007d90:	2301      	movs	r3, #1
 8007d92:	f04f 0900 	mov.w	r9, #0
 8007d96:	9304      	str	r3, [sp, #16]
 8007d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d9a:	9308      	str	r3, [sp, #32]
 8007d9c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007da0:	464f      	mov	r7, r9
 8007da2:	220a      	movs	r2, #10
 8007da4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007da6:	7806      	ldrb	r6, [r0, #0]
 8007da8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007dac:	b2d9      	uxtb	r1, r3
 8007dae:	2909      	cmp	r1, #9
 8007db0:	d92a      	bls.n	8007e08 <_strtod_l+0x1b8>
 8007db2:	9905      	ldr	r1, [sp, #20]
 8007db4:	462a      	mov	r2, r5
 8007db6:	f001 fe63 	bl	8009a80 <strncmp>
 8007dba:	b398      	cbz	r0, 8007e24 <_strtod_l+0x1d4>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4632      	mov	r2, r6
 8007dc0:	463d      	mov	r5, r7
 8007dc2:	9005      	str	r0, [sp, #20]
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2a65      	cmp	r2, #101	; 0x65
 8007dc8:	d001      	beq.n	8007dce <_strtod_l+0x17e>
 8007dca:	2a45      	cmp	r2, #69	; 0x45
 8007dcc:	d118      	bne.n	8007e00 <_strtod_l+0x1b0>
 8007dce:	b91d      	cbnz	r5, 8007dd8 <_strtod_l+0x188>
 8007dd0:	9a04      	ldr	r2, [sp, #16]
 8007dd2:	4302      	orrs	r2, r0
 8007dd4:	d09e      	beq.n	8007d14 <_strtod_l+0xc4>
 8007dd6:	2500      	movs	r5, #0
 8007dd8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007ddc:	f108 0201 	add.w	r2, r8, #1
 8007de0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007de2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007de6:	2a2b      	cmp	r2, #43	; 0x2b
 8007de8:	d075      	beq.n	8007ed6 <_strtod_l+0x286>
 8007dea:	2a2d      	cmp	r2, #45	; 0x2d
 8007dec:	d07b      	beq.n	8007ee6 <_strtod_l+0x296>
 8007dee:	f04f 0c00 	mov.w	ip, #0
 8007df2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007df6:	2909      	cmp	r1, #9
 8007df8:	f240 8082 	bls.w	8007f00 <_strtod_l+0x2b0>
 8007dfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007e00:	2600      	movs	r6, #0
 8007e02:	e09d      	b.n	8007f40 <_strtod_l+0x2f0>
 8007e04:	2300      	movs	r3, #0
 8007e06:	e7c4      	b.n	8007d92 <_strtod_l+0x142>
 8007e08:	2f08      	cmp	r7, #8
 8007e0a:	bfd8      	it	le
 8007e0c:	9907      	ldrle	r1, [sp, #28]
 8007e0e:	f100 0001 	add.w	r0, r0, #1
 8007e12:	bfda      	itte	le
 8007e14:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e18:	9307      	strle	r3, [sp, #28]
 8007e1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007e1e:	3701      	adds	r7, #1
 8007e20:	9017      	str	r0, [sp, #92]	; 0x5c
 8007e22:	e7bf      	b.n	8007da4 <_strtod_l+0x154>
 8007e24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e26:	195a      	adds	r2, r3, r5
 8007e28:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e2a:	5d5a      	ldrb	r2, [r3, r5]
 8007e2c:	2f00      	cmp	r7, #0
 8007e2e:	d037      	beq.n	8007ea0 <_strtod_l+0x250>
 8007e30:	9005      	str	r0, [sp, #20]
 8007e32:	463d      	mov	r5, r7
 8007e34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007e38:	2b09      	cmp	r3, #9
 8007e3a:	d912      	bls.n	8007e62 <_strtod_l+0x212>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e7c2      	b.n	8007dc6 <_strtod_l+0x176>
 8007e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e46:	785a      	ldrb	r2, [r3, #1]
 8007e48:	3001      	adds	r0, #1
 8007e4a:	2a30      	cmp	r2, #48	; 0x30
 8007e4c:	d0f8      	beq.n	8007e40 <_strtod_l+0x1f0>
 8007e4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	f200 84d9 	bhi.w	800880a <_strtod_l+0xbba>
 8007e58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e5a:	9005      	str	r0, [sp, #20]
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	9308      	str	r3, [sp, #32]
 8007e60:	4605      	mov	r5, r0
 8007e62:	3a30      	subs	r2, #48	; 0x30
 8007e64:	f100 0301 	add.w	r3, r0, #1
 8007e68:	d014      	beq.n	8007e94 <_strtod_l+0x244>
 8007e6a:	9905      	ldr	r1, [sp, #20]
 8007e6c:	4419      	add	r1, r3
 8007e6e:	9105      	str	r1, [sp, #20]
 8007e70:	462b      	mov	r3, r5
 8007e72:	eb00 0e05 	add.w	lr, r0, r5
 8007e76:	210a      	movs	r1, #10
 8007e78:	4573      	cmp	r3, lr
 8007e7a:	d113      	bne.n	8007ea4 <_strtod_l+0x254>
 8007e7c:	182b      	adds	r3, r5, r0
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	f105 0501 	add.w	r5, r5, #1
 8007e84:	4405      	add	r5, r0
 8007e86:	dc1c      	bgt.n	8007ec2 <_strtod_l+0x272>
 8007e88:	9907      	ldr	r1, [sp, #28]
 8007e8a:	230a      	movs	r3, #10
 8007e8c:	fb03 2301 	mla	r3, r3, r1, r2
 8007e90:	9307      	str	r3, [sp, #28]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e96:	1c51      	adds	r1, r2, #1
 8007e98:	9117      	str	r1, [sp, #92]	; 0x5c
 8007e9a:	7852      	ldrb	r2, [r2, #1]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	e7c9      	b.n	8007e34 <_strtod_l+0x1e4>
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	e7d2      	b.n	8007e4a <_strtod_l+0x1fa>
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	dc04      	bgt.n	8007eb2 <_strtod_l+0x262>
 8007ea8:	9e07      	ldr	r6, [sp, #28]
 8007eaa:	434e      	muls	r6, r1
 8007eac:	9607      	str	r6, [sp, #28]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	e7e2      	b.n	8007e78 <_strtod_l+0x228>
 8007eb2:	f103 0c01 	add.w	ip, r3, #1
 8007eb6:	f1bc 0f10 	cmp.w	ip, #16
 8007eba:	bfd8      	it	le
 8007ebc:	fb01 f909 	mulle.w	r9, r1, r9
 8007ec0:	e7f5      	b.n	8007eae <_strtod_l+0x25e>
 8007ec2:	2d10      	cmp	r5, #16
 8007ec4:	bfdc      	itt	le
 8007ec6:	230a      	movle	r3, #10
 8007ec8:	fb03 2909 	mlale	r9, r3, r9, r2
 8007ecc:	e7e1      	b.n	8007e92 <_strtod_l+0x242>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9305      	str	r3, [sp, #20]
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e77c      	b.n	8007dd0 <_strtod_l+0x180>
 8007ed6:	f04f 0c00 	mov.w	ip, #0
 8007eda:	f108 0202 	add.w	r2, r8, #2
 8007ede:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ee0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007ee4:	e785      	b.n	8007df2 <_strtod_l+0x1a2>
 8007ee6:	f04f 0c01 	mov.w	ip, #1
 8007eea:	e7f6      	b.n	8007eda <_strtod_l+0x28a>
 8007eec:	0800ab50 	.word	0x0800ab50
 8007ef0:	0800aa84 	.word	0x0800aa84
 8007ef4:	7ff00000 	.word	0x7ff00000
 8007ef8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007efa:	1c51      	adds	r1, r2, #1
 8007efc:	9117      	str	r1, [sp, #92]	; 0x5c
 8007efe:	7852      	ldrb	r2, [r2, #1]
 8007f00:	2a30      	cmp	r2, #48	; 0x30
 8007f02:	d0f9      	beq.n	8007ef8 <_strtod_l+0x2a8>
 8007f04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007f08:	2908      	cmp	r1, #8
 8007f0a:	f63f af79 	bhi.w	8007e00 <_strtod_l+0x1b0>
 8007f0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007f12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f14:	9206      	str	r2, [sp, #24]
 8007f16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f18:	1c51      	adds	r1, r2, #1
 8007f1a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f1c:	7852      	ldrb	r2, [r2, #1]
 8007f1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007f22:	2e09      	cmp	r6, #9
 8007f24:	d937      	bls.n	8007f96 <_strtod_l+0x346>
 8007f26:	9e06      	ldr	r6, [sp, #24]
 8007f28:	1b89      	subs	r1, r1, r6
 8007f2a:	2908      	cmp	r1, #8
 8007f2c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007f30:	dc02      	bgt.n	8007f38 <_strtod_l+0x2e8>
 8007f32:	4576      	cmp	r6, lr
 8007f34:	bfa8      	it	ge
 8007f36:	4676      	movge	r6, lr
 8007f38:	f1bc 0f00 	cmp.w	ip, #0
 8007f3c:	d000      	beq.n	8007f40 <_strtod_l+0x2f0>
 8007f3e:	4276      	negs	r6, r6
 8007f40:	2d00      	cmp	r5, #0
 8007f42:	d14d      	bne.n	8007fe0 <_strtod_l+0x390>
 8007f44:	9904      	ldr	r1, [sp, #16]
 8007f46:	4301      	orrs	r1, r0
 8007f48:	f47f aec6 	bne.w	8007cd8 <_strtod_l+0x88>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f47f aee1 	bne.w	8007d14 <_strtod_l+0xc4>
 8007f52:	2a69      	cmp	r2, #105	; 0x69
 8007f54:	d027      	beq.n	8007fa6 <_strtod_l+0x356>
 8007f56:	dc24      	bgt.n	8007fa2 <_strtod_l+0x352>
 8007f58:	2a49      	cmp	r2, #73	; 0x49
 8007f5a:	d024      	beq.n	8007fa6 <_strtod_l+0x356>
 8007f5c:	2a4e      	cmp	r2, #78	; 0x4e
 8007f5e:	f47f aed9 	bne.w	8007d14 <_strtod_l+0xc4>
 8007f62:	499f      	ldr	r1, [pc, #636]	; (80081e0 <_strtod_l+0x590>)
 8007f64:	a817      	add	r0, sp, #92	; 0x5c
 8007f66:	f000 ff45 	bl	8008df4 <__match>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	f43f aed2 	beq.w	8007d14 <_strtod_l+0xc4>
 8007f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b28      	cmp	r3, #40	; 0x28
 8007f76:	d12d      	bne.n	8007fd4 <_strtod_l+0x384>
 8007f78:	499a      	ldr	r1, [pc, #616]	; (80081e4 <_strtod_l+0x594>)
 8007f7a:	aa1a      	add	r2, sp, #104	; 0x68
 8007f7c:	a817      	add	r0, sp, #92	; 0x5c
 8007f7e:	f000 ff4d 	bl	8008e1c <__hexnan>
 8007f82:	2805      	cmp	r0, #5
 8007f84:	d126      	bne.n	8007fd4 <_strtod_l+0x384>
 8007f86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007f8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007f90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007f94:	e6a0      	b.n	8007cd8 <_strtod_l+0x88>
 8007f96:	210a      	movs	r1, #10
 8007f98:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007f9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007fa0:	e7b9      	b.n	8007f16 <_strtod_l+0x2c6>
 8007fa2:	2a6e      	cmp	r2, #110	; 0x6e
 8007fa4:	e7db      	b.n	8007f5e <_strtod_l+0x30e>
 8007fa6:	4990      	ldr	r1, [pc, #576]	; (80081e8 <_strtod_l+0x598>)
 8007fa8:	a817      	add	r0, sp, #92	; 0x5c
 8007faa:	f000 ff23 	bl	8008df4 <__match>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f aeb0 	beq.w	8007d14 <_strtod_l+0xc4>
 8007fb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fb6:	498d      	ldr	r1, [pc, #564]	; (80081ec <_strtod_l+0x59c>)
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	a817      	add	r0, sp, #92	; 0x5c
 8007fbc:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fbe:	f000 ff19 	bl	8008df4 <__match>
 8007fc2:	b910      	cbnz	r0, 8007fca <_strtod_l+0x37a>
 8007fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80081fc <_strtod_l+0x5ac>
 8007fce:	f04f 0a00 	mov.w	sl, #0
 8007fd2:	e681      	b.n	8007cd8 <_strtod_l+0x88>
 8007fd4:	4886      	ldr	r0, [pc, #536]	; (80081f0 <_strtod_l+0x5a0>)
 8007fd6:	f001 fd3b 	bl	8009a50 <nan>
 8007fda:	ec5b ab10 	vmov	sl, fp, d0
 8007fde:	e67b      	b.n	8007cd8 <_strtod_l+0x88>
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	9807      	ldr	r0, [sp, #28]
 8007fe4:	1af3      	subs	r3, r6, r3
 8007fe6:	2f00      	cmp	r7, #0
 8007fe8:	bf08      	it	eq
 8007fea:	462f      	moveq	r7, r5
 8007fec:	2d10      	cmp	r5, #16
 8007fee:	9306      	str	r3, [sp, #24]
 8007ff0:	46a8      	mov	r8, r5
 8007ff2:	bfa8      	it	ge
 8007ff4:	f04f 0810 	movge.w	r8, #16
 8007ff8:	f7f8 fa84 	bl	8000504 <__aeabi_ui2d>
 8007ffc:	2d09      	cmp	r5, #9
 8007ffe:	4682      	mov	sl, r0
 8008000:	468b      	mov	fp, r1
 8008002:	dd13      	ble.n	800802c <_strtod_l+0x3dc>
 8008004:	4b7b      	ldr	r3, [pc, #492]	; (80081f4 <_strtod_l+0x5a4>)
 8008006:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800800a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800800e:	f7f8 faf3 	bl	80005f8 <__aeabi_dmul>
 8008012:	4682      	mov	sl, r0
 8008014:	4648      	mov	r0, r9
 8008016:	468b      	mov	fp, r1
 8008018:	f7f8 fa74 	bl	8000504 <__aeabi_ui2d>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4650      	mov	r0, sl
 8008022:	4659      	mov	r1, fp
 8008024:	f7f8 f932 	bl	800028c <__adddf3>
 8008028:	4682      	mov	sl, r0
 800802a:	468b      	mov	fp, r1
 800802c:	2d0f      	cmp	r5, #15
 800802e:	dc38      	bgt.n	80080a2 <_strtod_l+0x452>
 8008030:	9b06      	ldr	r3, [sp, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	f43f ae50 	beq.w	8007cd8 <_strtod_l+0x88>
 8008038:	dd24      	ble.n	8008084 <_strtod_l+0x434>
 800803a:	2b16      	cmp	r3, #22
 800803c:	dc0b      	bgt.n	8008056 <_strtod_l+0x406>
 800803e:	496d      	ldr	r1, [pc, #436]	; (80081f4 <_strtod_l+0x5a4>)
 8008040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008048:	4652      	mov	r2, sl
 800804a:	465b      	mov	r3, fp
 800804c:	f7f8 fad4 	bl	80005f8 <__aeabi_dmul>
 8008050:	4682      	mov	sl, r0
 8008052:	468b      	mov	fp, r1
 8008054:	e640      	b.n	8007cd8 <_strtod_l+0x88>
 8008056:	9a06      	ldr	r2, [sp, #24]
 8008058:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800805c:	4293      	cmp	r3, r2
 800805e:	db20      	blt.n	80080a2 <_strtod_l+0x452>
 8008060:	4c64      	ldr	r4, [pc, #400]	; (80081f4 <_strtod_l+0x5a4>)
 8008062:	f1c5 050f 	rsb	r5, r5, #15
 8008066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800806a:	4652      	mov	r2, sl
 800806c:	465b      	mov	r3, fp
 800806e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008072:	f7f8 fac1 	bl	80005f8 <__aeabi_dmul>
 8008076:	9b06      	ldr	r3, [sp, #24]
 8008078:	1b5d      	subs	r5, r3, r5
 800807a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800807e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008082:	e7e3      	b.n	800804c <_strtod_l+0x3fc>
 8008084:	9b06      	ldr	r3, [sp, #24]
 8008086:	3316      	adds	r3, #22
 8008088:	db0b      	blt.n	80080a2 <_strtod_l+0x452>
 800808a:	9b05      	ldr	r3, [sp, #20]
 800808c:	1b9e      	subs	r6, r3, r6
 800808e:	4b59      	ldr	r3, [pc, #356]	; (80081f4 <_strtod_l+0x5a4>)
 8008090:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008094:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008098:	4650      	mov	r0, sl
 800809a:	4659      	mov	r1, fp
 800809c:	f7f8 fbd6 	bl	800084c <__aeabi_ddiv>
 80080a0:	e7d6      	b.n	8008050 <_strtod_l+0x400>
 80080a2:	9b06      	ldr	r3, [sp, #24]
 80080a4:	eba5 0808 	sub.w	r8, r5, r8
 80080a8:	4498      	add	r8, r3
 80080aa:	f1b8 0f00 	cmp.w	r8, #0
 80080ae:	dd74      	ble.n	800819a <_strtod_l+0x54a>
 80080b0:	f018 030f 	ands.w	r3, r8, #15
 80080b4:	d00a      	beq.n	80080cc <_strtod_l+0x47c>
 80080b6:	494f      	ldr	r1, [pc, #316]	; (80081f4 <_strtod_l+0x5a4>)
 80080b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080bc:	4652      	mov	r2, sl
 80080be:	465b      	mov	r3, fp
 80080c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c4:	f7f8 fa98 	bl	80005f8 <__aeabi_dmul>
 80080c8:	4682      	mov	sl, r0
 80080ca:	468b      	mov	fp, r1
 80080cc:	f038 080f 	bics.w	r8, r8, #15
 80080d0:	d04f      	beq.n	8008172 <_strtod_l+0x522>
 80080d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80080d6:	dd22      	ble.n	800811e <_strtod_l+0x4ce>
 80080d8:	2500      	movs	r5, #0
 80080da:	462e      	mov	r6, r5
 80080dc:	9507      	str	r5, [sp, #28]
 80080de:	9505      	str	r5, [sp, #20]
 80080e0:	2322      	movs	r3, #34	; 0x22
 80080e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80081fc <_strtod_l+0x5ac>
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	f04f 0a00 	mov.w	sl, #0
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f43f adf2 	beq.w	8007cd8 <_strtod_l+0x88>
 80080f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 ff7e 	bl	8008ff8 <_Bfree>
 80080fc:	9905      	ldr	r1, [sp, #20]
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 ff7a 	bl	8008ff8 <_Bfree>
 8008104:	4631      	mov	r1, r6
 8008106:	4620      	mov	r0, r4
 8008108:	f000 ff76 	bl	8008ff8 <_Bfree>
 800810c:	9907      	ldr	r1, [sp, #28]
 800810e:	4620      	mov	r0, r4
 8008110:	f000 ff72 	bl	8008ff8 <_Bfree>
 8008114:	4629      	mov	r1, r5
 8008116:	4620      	mov	r0, r4
 8008118:	f000 ff6e 	bl	8008ff8 <_Bfree>
 800811c:	e5dc      	b.n	8007cd8 <_strtod_l+0x88>
 800811e:	4b36      	ldr	r3, [pc, #216]	; (80081f8 <_strtod_l+0x5a8>)
 8008120:	9304      	str	r3, [sp, #16]
 8008122:	2300      	movs	r3, #0
 8008124:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008128:	4650      	mov	r0, sl
 800812a:	4659      	mov	r1, fp
 800812c:	4699      	mov	r9, r3
 800812e:	f1b8 0f01 	cmp.w	r8, #1
 8008132:	dc21      	bgt.n	8008178 <_strtod_l+0x528>
 8008134:	b10b      	cbz	r3, 800813a <_strtod_l+0x4ea>
 8008136:	4682      	mov	sl, r0
 8008138:	468b      	mov	fp, r1
 800813a:	4b2f      	ldr	r3, [pc, #188]	; (80081f8 <_strtod_l+0x5a8>)
 800813c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008140:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008144:	4652      	mov	r2, sl
 8008146:	465b      	mov	r3, fp
 8008148:	e9d9 0100 	ldrd	r0, r1, [r9]
 800814c:	f7f8 fa54 	bl	80005f8 <__aeabi_dmul>
 8008150:	4b2a      	ldr	r3, [pc, #168]	; (80081fc <_strtod_l+0x5ac>)
 8008152:	460a      	mov	r2, r1
 8008154:	400b      	ands	r3, r1
 8008156:	492a      	ldr	r1, [pc, #168]	; (8008200 <_strtod_l+0x5b0>)
 8008158:	428b      	cmp	r3, r1
 800815a:	4682      	mov	sl, r0
 800815c:	d8bc      	bhi.n	80080d8 <_strtod_l+0x488>
 800815e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008162:	428b      	cmp	r3, r1
 8008164:	bf86      	itte	hi
 8008166:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008204 <_strtod_l+0x5b4>
 800816a:	f04f 3aff 	movhi.w	sl, #4294967295
 800816e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008172:	2300      	movs	r3, #0
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	e084      	b.n	8008282 <_strtod_l+0x632>
 8008178:	f018 0f01 	tst.w	r8, #1
 800817c:	d005      	beq.n	800818a <_strtod_l+0x53a>
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f7f8 fa38 	bl	80005f8 <__aeabi_dmul>
 8008188:	2301      	movs	r3, #1
 800818a:	9a04      	ldr	r2, [sp, #16]
 800818c:	3208      	adds	r2, #8
 800818e:	f109 0901 	add.w	r9, r9, #1
 8008192:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008196:	9204      	str	r2, [sp, #16]
 8008198:	e7c9      	b.n	800812e <_strtod_l+0x4de>
 800819a:	d0ea      	beq.n	8008172 <_strtod_l+0x522>
 800819c:	f1c8 0800 	rsb	r8, r8, #0
 80081a0:	f018 020f 	ands.w	r2, r8, #15
 80081a4:	d00a      	beq.n	80081bc <_strtod_l+0x56c>
 80081a6:	4b13      	ldr	r3, [pc, #76]	; (80081f4 <_strtod_l+0x5a4>)
 80081a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ac:	4650      	mov	r0, sl
 80081ae:	4659      	mov	r1, fp
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f7f8 fb4a 	bl	800084c <__aeabi_ddiv>
 80081b8:	4682      	mov	sl, r0
 80081ba:	468b      	mov	fp, r1
 80081bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80081c0:	d0d7      	beq.n	8008172 <_strtod_l+0x522>
 80081c2:	f1b8 0f1f 	cmp.w	r8, #31
 80081c6:	dd1f      	ble.n	8008208 <_strtod_l+0x5b8>
 80081c8:	2500      	movs	r5, #0
 80081ca:	462e      	mov	r6, r5
 80081cc:	9507      	str	r5, [sp, #28]
 80081ce:	9505      	str	r5, [sp, #20]
 80081d0:	2322      	movs	r3, #34	; 0x22
 80081d2:	f04f 0a00 	mov.w	sl, #0
 80081d6:	f04f 0b00 	mov.w	fp, #0
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	e786      	b.n	80080ec <_strtod_l+0x49c>
 80081de:	bf00      	nop
 80081e0:	0800aa81 	.word	0x0800aa81
 80081e4:	0800aa98 	.word	0x0800aa98
 80081e8:	0800aa78 	.word	0x0800aa78
 80081ec:	0800aa7b 	.word	0x0800aa7b
 80081f0:	0800ad0f 	.word	0x0800ad0f
 80081f4:	0800ac00 	.word	0x0800ac00
 80081f8:	0800abd8 	.word	0x0800abd8
 80081fc:	7ff00000 	.word	0x7ff00000
 8008200:	7ca00000 	.word	0x7ca00000
 8008204:	7fefffff 	.word	0x7fefffff
 8008208:	f018 0310 	ands.w	r3, r8, #16
 800820c:	bf18      	it	ne
 800820e:	236a      	movne	r3, #106	; 0x6a
 8008210:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80085c0 <_strtod_l+0x970>
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	4650      	mov	r0, sl
 8008218:	4659      	mov	r1, fp
 800821a:	2300      	movs	r3, #0
 800821c:	f018 0f01 	tst.w	r8, #1
 8008220:	d004      	beq.n	800822c <_strtod_l+0x5dc>
 8008222:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008226:	f7f8 f9e7 	bl	80005f8 <__aeabi_dmul>
 800822a:	2301      	movs	r3, #1
 800822c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008230:	f109 0908 	add.w	r9, r9, #8
 8008234:	d1f2      	bne.n	800821c <_strtod_l+0x5cc>
 8008236:	b10b      	cbz	r3, 800823c <_strtod_l+0x5ec>
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	b1c3      	cbz	r3, 8008272 <_strtod_l+0x622>
 8008240:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008244:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008248:	2b00      	cmp	r3, #0
 800824a:	4659      	mov	r1, fp
 800824c:	dd11      	ble.n	8008272 <_strtod_l+0x622>
 800824e:	2b1f      	cmp	r3, #31
 8008250:	f340 8124 	ble.w	800849c <_strtod_l+0x84c>
 8008254:	2b34      	cmp	r3, #52	; 0x34
 8008256:	bfde      	ittt	le
 8008258:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800825c:	f04f 33ff 	movle.w	r3, #4294967295
 8008260:	fa03 f202 	lslle.w	r2, r3, r2
 8008264:	f04f 0a00 	mov.w	sl, #0
 8008268:	bfcc      	ite	gt
 800826a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800826e:	ea02 0b01 	andle.w	fp, r2, r1
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	4650      	mov	r0, sl
 8008278:	4659      	mov	r1, fp
 800827a:	f7f8 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800827e:	2800      	cmp	r0, #0
 8008280:	d1a2      	bne.n	80081c8 <_strtod_l+0x578>
 8008282:	9b07      	ldr	r3, [sp, #28]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	9908      	ldr	r1, [sp, #32]
 8008288:	462b      	mov	r3, r5
 800828a:	463a      	mov	r2, r7
 800828c:	4620      	mov	r0, r4
 800828e:	f000 ff1b 	bl	80090c8 <__s2b>
 8008292:	9007      	str	r0, [sp, #28]
 8008294:	2800      	cmp	r0, #0
 8008296:	f43f af1f 	beq.w	80080d8 <_strtod_l+0x488>
 800829a:	9b05      	ldr	r3, [sp, #20]
 800829c:	1b9e      	subs	r6, r3, r6
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfb4      	ite	lt
 80082a4:	4633      	movlt	r3, r6
 80082a6:	2300      	movge	r3, #0
 80082a8:	930c      	str	r3, [sp, #48]	; 0x30
 80082aa:	9b06      	ldr	r3, [sp, #24]
 80082ac:	2500      	movs	r5, #0
 80082ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80082b2:	9312      	str	r3, [sp, #72]	; 0x48
 80082b4:	462e      	mov	r6, r5
 80082b6:	9b07      	ldr	r3, [sp, #28]
 80082b8:	4620      	mov	r0, r4
 80082ba:	6859      	ldr	r1, [r3, #4]
 80082bc:	f000 fe5c 	bl	8008f78 <_Balloc>
 80082c0:	9005      	str	r0, [sp, #20]
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f43f af0c 	beq.w	80080e0 <_strtod_l+0x490>
 80082c8:	9b07      	ldr	r3, [sp, #28]
 80082ca:	691a      	ldr	r2, [r3, #16]
 80082cc:	3202      	adds	r2, #2
 80082ce:	f103 010c 	add.w	r1, r3, #12
 80082d2:	0092      	lsls	r2, r2, #2
 80082d4:	300c      	adds	r0, #12
 80082d6:	f7ff fc89 	bl	8007bec <memcpy>
 80082da:	ec4b ab10 	vmov	d0, sl, fp
 80082de:	aa1a      	add	r2, sp, #104	; 0x68
 80082e0:	a919      	add	r1, sp, #100	; 0x64
 80082e2:	4620      	mov	r0, r4
 80082e4:	f001 fa36 	bl	8009754 <__d2b>
 80082e8:	ec4b ab18 	vmov	d8, sl, fp
 80082ec:	9018      	str	r0, [sp, #96]	; 0x60
 80082ee:	2800      	cmp	r0, #0
 80082f0:	f43f aef6 	beq.w	80080e0 <_strtod_l+0x490>
 80082f4:	2101      	movs	r1, #1
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 ff80 	bl	80091fc <__i2b>
 80082fc:	4606      	mov	r6, r0
 80082fe:	2800      	cmp	r0, #0
 8008300:	f43f aeee 	beq.w	80080e0 <_strtod_l+0x490>
 8008304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008306:	9904      	ldr	r1, [sp, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	bfab      	itete	ge
 800830c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800830e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008310:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008312:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008316:	bfac      	ite	ge
 8008318:	eb03 0902 	addge.w	r9, r3, r2
 800831c:	1ad7      	sublt	r7, r2, r3
 800831e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008320:	eba3 0801 	sub.w	r8, r3, r1
 8008324:	4490      	add	r8, r2
 8008326:	4ba1      	ldr	r3, [pc, #644]	; (80085ac <_strtod_l+0x95c>)
 8008328:	f108 38ff 	add.w	r8, r8, #4294967295
 800832c:	4598      	cmp	r8, r3
 800832e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008332:	f280 80c7 	bge.w	80084c4 <_strtod_l+0x874>
 8008336:	eba3 0308 	sub.w	r3, r3, r8
 800833a:	2b1f      	cmp	r3, #31
 800833c:	eba2 0203 	sub.w	r2, r2, r3
 8008340:	f04f 0101 	mov.w	r1, #1
 8008344:	f300 80b1 	bgt.w	80084aa <_strtod_l+0x85a>
 8008348:	fa01 f303 	lsl.w	r3, r1, r3
 800834c:	930d      	str	r3, [sp, #52]	; 0x34
 800834e:	2300      	movs	r3, #0
 8008350:	9308      	str	r3, [sp, #32]
 8008352:	eb09 0802 	add.w	r8, r9, r2
 8008356:	9b04      	ldr	r3, [sp, #16]
 8008358:	45c1      	cmp	r9, r8
 800835a:	4417      	add	r7, r2
 800835c:	441f      	add	r7, r3
 800835e:	464b      	mov	r3, r9
 8008360:	bfa8      	it	ge
 8008362:	4643      	movge	r3, r8
 8008364:	42bb      	cmp	r3, r7
 8008366:	bfa8      	it	ge
 8008368:	463b      	movge	r3, r7
 800836a:	2b00      	cmp	r3, #0
 800836c:	bfc2      	ittt	gt
 800836e:	eba8 0803 	subgt.w	r8, r8, r3
 8008372:	1aff      	subgt	r7, r7, r3
 8008374:	eba9 0903 	subgt.w	r9, r9, r3
 8008378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd17      	ble.n	80083ae <_strtod_l+0x75e>
 800837e:	4631      	mov	r1, r6
 8008380:	461a      	mov	r2, r3
 8008382:	4620      	mov	r0, r4
 8008384:	f000 fffa 	bl	800937c <__pow5mult>
 8008388:	4606      	mov	r6, r0
 800838a:	2800      	cmp	r0, #0
 800838c:	f43f aea8 	beq.w	80080e0 <_strtod_l+0x490>
 8008390:	4601      	mov	r1, r0
 8008392:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008394:	4620      	mov	r0, r4
 8008396:	f000 ff47 	bl	8009228 <__multiply>
 800839a:	900b      	str	r0, [sp, #44]	; 0x2c
 800839c:	2800      	cmp	r0, #0
 800839e:	f43f ae9f 	beq.w	80080e0 <_strtod_l+0x490>
 80083a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 fe27 	bl	8008ff8 <_Bfree>
 80083aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ac:	9318      	str	r3, [sp, #96]	; 0x60
 80083ae:	f1b8 0f00 	cmp.w	r8, #0
 80083b2:	f300 808c 	bgt.w	80084ce <_strtod_l+0x87e>
 80083b6:	9b06      	ldr	r3, [sp, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	dd08      	ble.n	80083ce <_strtod_l+0x77e>
 80083bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083be:	9905      	ldr	r1, [sp, #20]
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 ffdb 	bl	800937c <__pow5mult>
 80083c6:	9005      	str	r0, [sp, #20]
 80083c8:	2800      	cmp	r0, #0
 80083ca:	f43f ae89 	beq.w	80080e0 <_strtod_l+0x490>
 80083ce:	2f00      	cmp	r7, #0
 80083d0:	dd08      	ble.n	80083e4 <_strtod_l+0x794>
 80083d2:	9905      	ldr	r1, [sp, #20]
 80083d4:	463a      	mov	r2, r7
 80083d6:	4620      	mov	r0, r4
 80083d8:	f001 f82a 	bl	8009430 <__lshift>
 80083dc:	9005      	str	r0, [sp, #20]
 80083de:	2800      	cmp	r0, #0
 80083e0:	f43f ae7e 	beq.w	80080e0 <_strtod_l+0x490>
 80083e4:	f1b9 0f00 	cmp.w	r9, #0
 80083e8:	dd08      	ble.n	80083fc <_strtod_l+0x7ac>
 80083ea:	4631      	mov	r1, r6
 80083ec:	464a      	mov	r2, r9
 80083ee:	4620      	mov	r0, r4
 80083f0:	f001 f81e 	bl	8009430 <__lshift>
 80083f4:	4606      	mov	r6, r0
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f43f ae72 	beq.w	80080e0 <_strtod_l+0x490>
 80083fc:	9a05      	ldr	r2, [sp, #20]
 80083fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008400:	4620      	mov	r0, r4
 8008402:	f001 f8a1 	bl	8009548 <__mdiff>
 8008406:	4605      	mov	r5, r0
 8008408:	2800      	cmp	r0, #0
 800840a:	f43f ae69 	beq.w	80080e0 <_strtod_l+0x490>
 800840e:	68c3      	ldr	r3, [r0, #12]
 8008410:	930b      	str	r3, [sp, #44]	; 0x2c
 8008412:	2300      	movs	r3, #0
 8008414:	60c3      	str	r3, [r0, #12]
 8008416:	4631      	mov	r1, r6
 8008418:	f001 f87a 	bl	8009510 <__mcmp>
 800841c:	2800      	cmp	r0, #0
 800841e:	da60      	bge.n	80084e2 <_strtod_l+0x892>
 8008420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008422:	ea53 030a 	orrs.w	r3, r3, sl
 8008426:	f040 8082 	bne.w	800852e <_strtod_l+0x8de>
 800842a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800842e:	2b00      	cmp	r3, #0
 8008430:	d17d      	bne.n	800852e <_strtod_l+0x8de>
 8008432:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008436:	0d1b      	lsrs	r3, r3, #20
 8008438:	051b      	lsls	r3, r3, #20
 800843a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800843e:	d976      	bls.n	800852e <_strtod_l+0x8de>
 8008440:	696b      	ldr	r3, [r5, #20]
 8008442:	b913      	cbnz	r3, 800844a <_strtod_l+0x7fa>
 8008444:	692b      	ldr	r3, [r5, #16]
 8008446:	2b01      	cmp	r3, #1
 8008448:	dd71      	ble.n	800852e <_strtod_l+0x8de>
 800844a:	4629      	mov	r1, r5
 800844c:	2201      	movs	r2, #1
 800844e:	4620      	mov	r0, r4
 8008450:	f000 ffee 	bl	8009430 <__lshift>
 8008454:	4631      	mov	r1, r6
 8008456:	4605      	mov	r5, r0
 8008458:	f001 f85a 	bl	8009510 <__mcmp>
 800845c:	2800      	cmp	r0, #0
 800845e:	dd66      	ble.n	800852e <_strtod_l+0x8de>
 8008460:	9904      	ldr	r1, [sp, #16]
 8008462:	4a53      	ldr	r2, [pc, #332]	; (80085b0 <_strtod_l+0x960>)
 8008464:	465b      	mov	r3, fp
 8008466:	2900      	cmp	r1, #0
 8008468:	f000 8081 	beq.w	800856e <_strtod_l+0x91e>
 800846c:	ea02 010b 	and.w	r1, r2, fp
 8008470:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008474:	dc7b      	bgt.n	800856e <_strtod_l+0x91e>
 8008476:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800847a:	f77f aea9 	ble.w	80081d0 <_strtod_l+0x580>
 800847e:	4b4d      	ldr	r3, [pc, #308]	; (80085b4 <_strtod_l+0x964>)
 8008480:	4650      	mov	r0, sl
 8008482:	4659      	mov	r1, fp
 8008484:	2200      	movs	r2, #0
 8008486:	f7f8 f8b7 	bl	80005f8 <__aeabi_dmul>
 800848a:	460b      	mov	r3, r1
 800848c:	4303      	orrs	r3, r0
 800848e:	bf08      	it	eq
 8008490:	2322      	moveq	r3, #34	; 0x22
 8008492:	4682      	mov	sl, r0
 8008494:	468b      	mov	fp, r1
 8008496:	bf08      	it	eq
 8008498:	6023      	streq	r3, [r4, #0]
 800849a:	e62b      	b.n	80080f4 <_strtod_l+0x4a4>
 800849c:	f04f 32ff 	mov.w	r2, #4294967295
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	ea03 0a0a 	and.w	sl, r3, sl
 80084a8:	e6e3      	b.n	8008272 <_strtod_l+0x622>
 80084aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80084ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80084b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80084b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80084ba:	fa01 f308 	lsl.w	r3, r1, r8
 80084be:	9308      	str	r3, [sp, #32]
 80084c0:	910d      	str	r1, [sp, #52]	; 0x34
 80084c2:	e746      	b.n	8008352 <_strtod_l+0x702>
 80084c4:	2300      	movs	r3, #0
 80084c6:	9308      	str	r3, [sp, #32]
 80084c8:	2301      	movs	r3, #1
 80084ca:	930d      	str	r3, [sp, #52]	; 0x34
 80084cc:	e741      	b.n	8008352 <_strtod_l+0x702>
 80084ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80084d0:	4642      	mov	r2, r8
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 ffac 	bl	8009430 <__lshift>
 80084d8:	9018      	str	r0, [sp, #96]	; 0x60
 80084da:	2800      	cmp	r0, #0
 80084dc:	f47f af6b 	bne.w	80083b6 <_strtod_l+0x766>
 80084e0:	e5fe      	b.n	80080e0 <_strtod_l+0x490>
 80084e2:	465f      	mov	r7, fp
 80084e4:	d16e      	bne.n	80085c4 <_strtod_l+0x974>
 80084e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084ec:	b342      	cbz	r2, 8008540 <_strtod_l+0x8f0>
 80084ee:	4a32      	ldr	r2, [pc, #200]	; (80085b8 <_strtod_l+0x968>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d128      	bne.n	8008546 <_strtod_l+0x8f6>
 80084f4:	9b04      	ldr	r3, [sp, #16]
 80084f6:	4651      	mov	r1, sl
 80084f8:	b1eb      	cbz	r3, 8008536 <_strtod_l+0x8e6>
 80084fa:	4b2d      	ldr	r3, [pc, #180]	; (80085b0 <_strtod_l+0x960>)
 80084fc:	403b      	ands	r3, r7
 80084fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008502:	f04f 32ff 	mov.w	r2, #4294967295
 8008506:	d819      	bhi.n	800853c <_strtod_l+0x8ec>
 8008508:	0d1b      	lsrs	r3, r3, #20
 800850a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800850e:	fa02 f303 	lsl.w	r3, r2, r3
 8008512:	4299      	cmp	r1, r3
 8008514:	d117      	bne.n	8008546 <_strtod_l+0x8f6>
 8008516:	4b29      	ldr	r3, [pc, #164]	; (80085bc <_strtod_l+0x96c>)
 8008518:	429f      	cmp	r7, r3
 800851a:	d102      	bne.n	8008522 <_strtod_l+0x8d2>
 800851c:	3101      	adds	r1, #1
 800851e:	f43f addf 	beq.w	80080e0 <_strtod_l+0x490>
 8008522:	4b23      	ldr	r3, [pc, #140]	; (80085b0 <_strtod_l+0x960>)
 8008524:	403b      	ands	r3, r7
 8008526:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800852a:	f04f 0a00 	mov.w	sl, #0
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1a4      	bne.n	800847e <_strtod_l+0x82e>
 8008534:	e5de      	b.n	80080f4 <_strtod_l+0x4a4>
 8008536:	f04f 33ff 	mov.w	r3, #4294967295
 800853a:	e7ea      	b.n	8008512 <_strtod_l+0x8c2>
 800853c:	4613      	mov	r3, r2
 800853e:	e7e8      	b.n	8008512 <_strtod_l+0x8c2>
 8008540:	ea53 030a 	orrs.w	r3, r3, sl
 8008544:	d08c      	beq.n	8008460 <_strtod_l+0x810>
 8008546:	9b08      	ldr	r3, [sp, #32]
 8008548:	b1db      	cbz	r3, 8008582 <_strtod_l+0x932>
 800854a:	423b      	tst	r3, r7
 800854c:	d0ef      	beq.n	800852e <_strtod_l+0x8de>
 800854e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008550:	9a04      	ldr	r2, [sp, #16]
 8008552:	4650      	mov	r0, sl
 8008554:	4659      	mov	r1, fp
 8008556:	b1c3      	cbz	r3, 800858a <_strtod_l+0x93a>
 8008558:	f7ff fb5e 	bl	8007c18 <sulp>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	ec51 0b18 	vmov	r0, r1, d8
 8008564:	f7f7 fe92 	bl	800028c <__adddf3>
 8008568:	4682      	mov	sl, r0
 800856a:	468b      	mov	fp, r1
 800856c:	e7df      	b.n	800852e <_strtod_l+0x8de>
 800856e:	4013      	ands	r3, r2
 8008570:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008574:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008578:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800857c:	f04f 3aff 	mov.w	sl, #4294967295
 8008580:	e7d5      	b.n	800852e <_strtod_l+0x8de>
 8008582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008584:	ea13 0f0a 	tst.w	r3, sl
 8008588:	e7e0      	b.n	800854c <_strtod_l+0x8fc>
 800858a:	f7ff fb45 	bl	8007c18 <sulp>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	ec51 0b18 	vmov	r0, r1, d8
 8008596:	f7f7 fe77 	bl	8000288 <__aeabi_dsub>
 800859a:	2200      	movs	r2, #0
 800859c:	2300      	movs	r3, #0
 800859e:	4682      	mov	sl, r0
 80085a0:	468b      	mov	fp, r1
 80085a2:	f7f8 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d0c1      	beq.n	800852e <_strtod_l+0x8de>
 80085aa:	e611      	b.n	80081d0 <_strtod_l+0x580>
 80085ac:	fffffc02 	.word	0xfffffc02
 80085b0:	7ff00000 	.word	0x7ff00000
 80085b4:	39500000 	.word	0x39500000
 80085b8:	000fffff 	.word	0x000fffff
 80085bc:	7fefffff 	.word	0x7fefffff
 80085c0:	0800aab0 	.word	0x0800aab0
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	f001 f920 	bl	800980c <__ratio>
 80085cc:	ec59 8b10 	vmov	r8, r9, d0
 80085d0:	ee10 0a10 	vmov	r0, s0
 80085d4:	2200      	movs	r2, #0
 80085d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085da:	4649      	mov	r1, r9
 80085dc:	f7f8 fa88 	bl	8000af0 <__aeabi_dcmple>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d07a      	beq.n	80086da <_strtod_l+0xa8a>
 80085e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d04a      	beq.n	8008680 <_strtod_l+0xa30>
 80085ea:	4b95      	ldr	r3, [pc, #596]	; (8008840 <_strtod_l+0xbf0>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008840 <_strtod_l+0xbf0>
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	4b92      	ldr	r3, [pc, #584]	; (8008844 <_strtod_l+0xbf4>)
 80085fc:	403b      	ands	r3, r7
 80085fe:	930d      	str	r3, [sp, #52]	; 0x34
 8008600:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008602:	4b91      	ldr	r3, [pc, #580]	; (8008848 <_strtod_l+0xbf8>)
 8008604:	429a      	cmp	r2, r3
 8008606:	f040 80b0 	bne.w	800876a <_strtod_l+0xb1a>
 800860a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800860e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008612:	ec4b ab10 	vmov	d0, sl, fp
 8008616:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800861a:	f001 f81f 	bl	800965c <__ulp>
 800861e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008622:	ec53 2b10 	vmov	r2, r3, d0
 8008626:	f7f7 ffe7 	bl	80005f8 <__aeabi_dmul>
 800862a:	4652      	mov	r2, sl
 800862c:	465b      	mov	r3, fp
 800862e:	f7f7 fe2d 	bl	800028c <__adddf3>
 8008632:	460b      	mov	r3, r1
 8008634:	4983      	ldr	r1, [pc, #524]	; (8008844 <_strtod_l+0xbf4>)
 8008636:	4a85      	ldr	r2, [pc, #532]	; (800884c <_strtod_l+0xbfc>)
 8008638:	4019      	ands	r1, r3
 800863a:	4291      	cmp	r1, r2
 800863c:	4682      	mov	sl, r0
 800863e:	d960      	bls.n	8008702 <_strtod_l+0xab2>
 8008640:	ee18 3a90 	vmov	r3, s17
 8008644:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008648:	4293      	cmp	r3, r2
 800864a:	d104      	bne.n	8008656 <_strtod_l+0xa06>
 800864c:	ee18 3a10 	vmov	r3, s16
 8008650:	3301      	adds	r3, #1
 8008652:	f43f ad45 	beq.w	80080e0 <_strtod_l+0x490>
 8008656:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008858 <_strtod_l+0xc08>
 800865a:	f04f 3aff 	mov.w	sl, #4294967295
 800865e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fcc9 	bl	8008ff8 <_Bfree>
 8008666:	9905      	ldr	r1, [sp, #20]
 8008668:	4620      	mov	r0, r4
 800866a:	f000 fcc5 	bl	8008ff8 <_Bfree>
 800866e:	4631      	mov	r1, r6
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fcc1 	bl	8008ff8 <_Bfree>
 8008676:	4629      	mov	r1, r5
 8008678:	4620      	mov	r0, r4
 800867a:	f000 fcbd 	bl	8008ff8 <_Bfree>
 800867e:	e61a      	b.n	80082b6 <_strtod_l+0x666>
 8008680:	f1ba 0f00 	cmp.w	sl, #0
 8008684:	d11b      	bne.n	80086be <_strtod_l+0xa6e>
 8008686:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800868a:	b9f3      	cbnz	r3, 80086ca <_strtod_l+0xa7a>
 800868c:	4b6c      	ldr	r3, [pc, #432]	; (8008840 <_strtod_l+0xbf0>)
 800868e:	2200      	movs	r2, #0
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	f7f8 fa22 	bl	8000adc <__aeabi_dcmplt>
 8008698:	b9d0      	cbnz	r0, 80086d0 <_strtod_l+0xa80>
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	4b6c      	ldr	r3, [pc, #432]	; (8008850 <_strtod_l+0xc00>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	f7f7 ffa9 	bl	80005f8 <__aeabi_dmul>
 80086a6:	4680      	mov	r8, r0
 80086a8:	4689      	mov	r9, r1
 80086aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80086ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80086b2:	9315      	str	r3, [sp, #84]	; 0x54
 80086b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80086b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086bc:	e79d      	b.n	80085fa <_strtod_l+0x9aa>
 80086be:	f1ba 0f01 	cmp.w	sl, #1
 80086c2:	d102      	bne.n	80086ca <_strtod_l+0xa7a>
 80086c4:	2f00      	cmp	r7, #0
 80086c6:	f43f ad83 	beq.w	80081d0 <_strtod_l+0x580>
 80086ca:	4b62      	ldr	r3, [pc, #392]	; (8008854 <_strtod_l+0xc04>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	e78e      	b.n	80085ee <_strtod_l+0x99e>
 80086d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008850 <_strtod_l+0xc00>
 80086d4:	f04f 0800 	mov.w	r8, #0
 80086d8:	e7e7      	b.n	80086aa <_strtod_l+0xa5a>
 80086da:	4b5d      	ldr	r3, [pc, #372]	; (8008850 <_strtod_l+0xc00>)
 80086dc:	4640      	mov	r0, r8
 80086de:	4649      	mov	r1, r9
 80086e0:	2200      	movs	r2, #0
 80086e2:	f7f7 ff89 	bl	80005f8 <__aeabi_dmul>
 80086e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086e8:	4680      	mov	r8, r0
 80086ea:	4689      	mov	r9, r1
 80086ec:	b933      	cbnz	r3, 80086fc <_strtod_l+0xaac>
 80086ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086f2:	900e      	str	r0, [sp, #56]	; 0x38
 80086f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80086f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80086fa:	e7dd      	b.n	80086b8 <_strtod_l+0xa68>
 80086fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008700:	e7f9      	b.n	80086f6 <_strtod_l+0xaa6>
 8008702:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008706:	9b04      	ldr	r3, [sp, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1a8      	bne.n	800865e <_strtod_l+0xa0e>
 800870c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008712:	0d1b      	lsrs	r3, r3, #20
 8008714:	051b      	lsls	r3, r3, #20
 8008716:	429a      	cmp	r2, r3
 8008718:	d1a1      	bne.n	800865e <_strtod_l+0xa0e>
 800871a:	4640      	mov	r0, r8
 800871c:	4649      	mov	r1, r9
 800871e:	f7f8 fa8d 	bl	8000c3c <__aeabi_d2lz>
 8008722:	f7f7 ff3b 	bl	800059c <__aeabi_l2d>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4640      	mov	r0, r8
 800872c:	4649      	mov	r1, r9
 800872e:	f7f7 fdab 	bl	8000288 <__aeabi_dsub>
 8008732:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008738:	ea43 030a 	orr.w	r3, r3, sl
 800873c:	4313      	orrs	r3, r2
 800873e:	4680      	mov	r8, r0
 8008740:	4689      	mov	r9, r1
 8008742:	d055      	beq.n	80087f0 <_strtod_l+0xba0>
 8008744:	a336      	add	r3, pc, #216	; (adr r3, 8008820 <_strtod_l+0xbd0>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f8 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800874e:	2800      	cmp	r0, #0
 8008750:	f47f acd0 	bne.w	80080f4 <_strtod_l+0x4a4>
 8008754:	a334      	add	r3, pc, #208	; (adr r3, 8008828 <_strtod_l+0xbd8>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	f7f8 f9db 	bl	8000b18 <__aeabi_dcmpgt>
 8008762:	2800      	cmp	r0, #0
 8008764:	f43f af7b 	beq.w	800865e <_strtod_l+0xa0e>
 8008768:	e4c4      	b.n	80080f4 <_strtod_l+0x4a4>
 800876a:	9b04      	ldr	r3, [sp, #16]
 800876c:	b333      	cbz	r3, 80087bc <_strtod_l+0xb6c>
 800876e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008770:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008774:	d822      	bhi.n	80087bc <_strtod_l+0xb6c>
 8008776:	a32e      	add	r3, pc, #184	; (adr r3, 8008830 <_strtod_l+0xbe0>)
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f8 f9b6 	bl	8000af0 <__aeabi_dcmple>
 8008784:	b1a0      	cbz	r0, 80087b0 <_strtod_l+0xb60>
 8008786:	4649      	mov	r1, r9
 8008788:	4640      	mov	r0, r8
 800878a:	f7f8 f9cf 	bl	8000b2c <__aeabi_d2uiz>
 800878e:	2801      	cmp	r0, #1
 8008790:	bf38      	it	cc
 8008792:	2001      	movcc	r0, #1
 8008794:	f7f7 feb6 	bl	8000504 <__aeabi_ui2d>
 8008798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800879a:	4680      	mov	r8, r0
 800879c:	4689      	mov	r9, r1
 800879e:	bb23      	cbnz	r3, 80087ea <_strtod_l+0xb9a>
 80087a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087a4:	9010      	str	r0, [sp, #64]	; 0x40
 80087a6:	9311      	str	r3, [sp, #68]	; 0x44
 80087a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	9309      	str	r3, [sp, #36]	; 0x24
 80087bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087c0:	eeb0 0a48 	vmov.f32	s0, s16
 80087c4:	eef0 0a68 	vmov.f32	s1, s17
 80087c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80087cc:	f000 ff46 	bl	800965c <__ulp>
 80087d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087d4:	ec53 2b10 	vmov	r2, r3, d0
 80087d8:	f7f7 ff0e 	bl	80005f8 <__aeabi_dmul>
 80087dc:	ec53 2b18 	vmov	r2, r3, d8
 80087e0:	f7f7 fd54 	bl	800028c <__adddf3>
 80087e4:	4682      	mov	sl, r0
 80087e6:	468b      	mov	fp, r1
 80087e8:	e78d      	b.n	8008706 <_strtod_l+0xab6>
 80087ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80087ee:	e7db      	b.n	80087a8 <_strtod_l+0xb58>
 80087f0:	a311      	add	r3, pc, #68	; (adr r3, 8008838 <_strtod_l+0xbe8>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f7f8 f971 	bl	8000adc <__aeabi_dcmplt>
 80087fa:	e7b2      	b.n	8008762 <_strtod_l+0xb12>
 80087fc:	2300      	movs	r3, #0
 80087fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	f7ff ba6b 	b.w	8007ce0 <_strtod_l+0x90>
 800880a:	2a65      	cmp	r2, #101	; 0x65
 800880c:	f43f ab5f 	beq.w	8007ece <_strtod_l+0x27e>
 8008810:	2a45      	cmp	r2, #69	; 0x45
 8008812:	f43f ab5c 	beq.w	8007ece <_strtod_l+0x27e>
 8008816:	2301      	movs	r3, #1
 8008818:	f7ff bb94 	b.w	8007f44 <_strtod_l+0x2f4>
 800881c:	f3af 8000 	nop.w
 8008820:	94a03595 	.word	0x94a03595
 8008824:	3fdfffff 	.word	0x3fdfffff
 8008828:	35afe535 	.word	0x35afe535
 800882c:	3fe00000 	.word	0x3fe00000
 8008830:	ffc00000 	.word	0xffc00000
 8008834:	41dfffff 	.word	0x41dfffff
 8008838:	94a03595 	.word	0x94a03595
 800883c:	3fcfffff 	.word	0x3fcfffff
 8008840:	3ff00000 	.word	0x3ff00000
 8008844:	7ff00000 	.word	0x7ff00000
 8008848:	7fe00000 	.word	0x7fe00000
 800884c:	7c9fffff 	.word	0x7c9fffff
 8008850:	3fe00000 	.word	0x3fe00000
 8008854:	bff00000 	.word	0xbff00000
 8008858:	7fefffff 	.word	0x7fefffff

0800885c <strtod>:
 800885c:	460a      	mov	r2, r1
 800885e:	4601      	mov	r1, r0
 8008860:	4802      	ldr	r0, [pc, #8]	; (800886c <strtod+0x10>)
 8008862:	4b03      	ldr	r3, [pc, #12]	; (8008870 <strtod+0x14>)
 8008864:	6800      	ldr	r0, [r0, #0]
 8008866:	f7ff b9f3 	b.w	8007c50 <_strtod_l>
 800886a:	bf00      	nop
 800886c:	200001a8 	.word	0x200001a8
 8008870:	20000210 	.word	0x20000210

08008874 <rshift>:
 8008874:	6903      	ldr	r3, [r0, #16]
 8008876:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800887a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800887e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008882:	f100 0414 	add.w	r4, r0, #20
 8008886:	dd45      	ble.n	8008914 <rshift+0xa0>
 8008888:	f011 011f 	ands.w	r1, r1, #31
 800888c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008890:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008894:	d10c      	bne.n	80088b0 <rshift+0x3c>
 8008896:	f100 0710 	add.w	r7, r0, #16
 800889a:	4629      	mov	r1, r5
 800889c:	42b1      	cmp	r1, r6
 800889e:	d334      	bcc.n	800890a <rshift+0x96>
 80088a0:	1a9b      	subs	r3, r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	1eea      	subs	r2, r5, #3
 80088a6:	4296      	cmp	r6, r2
 80088a8:	bf38      	it	cc
 80088aa:	2300      	movcc	r3, #0
 80088ac:	4423      	add	r3, r4
 80088ae:	e015      	b.n	80088dc <rshift+0x68>
 80088b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088b4:	f1c1 0820 	rsb	r8, r1, #32
 80088b8:	40cf      	lsrs	r7, r1
 80088ba:	f105 0e04 	add.w	lr, r5, #4
 80088be:	46a1      	mov	r9, r4
 80088c0:	4576      	cmp	r6, lr
 80088c2:	46f4      	mov	ip, lr
 80088c4:	d815      	bhi.n	80088f2 <rshift+0x7e>
 80088c6:	1a9a      	subs	r2, r3, r2
 80088c8:	0092      	lsls	r2, r2, #2
 80088ca:	3a04      	subs	r2, #4
 80088cc:	3501      	adds	r5, #1
 80088ce:	42ae      	cmp	r6, r5
 80088d0:	bf38      	it	cc
 80088d2:	2200      	movcc	r2, #0
 80088d4:	18a3      	adds	r3, r4, r2
 80088d6:	50a7      	str	r7, [r4, r2]
 80088d8:	b107      	cbz	r7, 80088dc <rshift+0x68>
 80088da:	3304      	adds	r3, #4
 80088dc:	1b1a      	subs	r2, r3, r4
 80088de:	42a3      	cmp	r3, r4
 80088e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088e4:	bf08      	it	eq
 80088e6:	2300      	moveq	r3, #0
 80088e8:	6102      	str	r2, [r0, #16]
 80088ea:	bf08      	it	eq
 80088ec:	6143      	streq	r3, [r0, #20]
 80088ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088f2:	f8dc c000 	ldr.w	ip, [ip]
 80088f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80088fa:	ea4c 0707 	orr.w	r7, ip, r7
 80088fe:	f849 7b04 	str.w	r7, [r9], #4
 8008902:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008906:	40cf      	lsrs	r7, r1
 8008908:	e7da      	b.n	80088c0 <rshift+0x4c>
 800890a:	f851 cb04 	ldr.w	ip, [r1], #4
 800890e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008912:	e7c3      	b.n	800889c <rshift+0x28>
 8008914:	4623      	mov	r3, r4
 8008916:	e7e1      	b.n	80088dc <rshift+0x68>

08008918 <__hexdig_fun>:
 8008918:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800891c:	2b09      	cmp	r3, #9
 800891e:	d802      	bhi.n	8008926 <__hexdig_fun+0xe>
 8008920:	3820      	subs	r0, #32
 8008922:	b2c0      	uxtb	r0, r0
 8008924:	4770      	bx	lr
 8008926:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800892a:	2b05      	cmp	r3, #5
 800892c:	d801      	bhi.n	8008932 <__hexdig_fun+0x1a>
 800892e:	3847      	subs	r0, #71	; 0x47
 8008930:	e7f7      	b.n	8008922 <__hexdig_fun+0xa>
 8008932:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008936:	2b05      	cmp	r3, #5
 8008938:	d801      	bhi.n	800893e <__hexdig_fun+0x26>
 800893a:	3827      	subs	r0, #39	; 0x27
 800893c:	e7f1      	b.n	8008922 <__hexdig_fun+0xa>
 800893e:	2000      	movs	r0, #0
 8008940:	4770      	bx	lr
	...

08008944 <__gethex>:
 8008944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008948:	ed2d 8b02 	vpush	{d8}
 800894c:	b089      	sub	sp, #36	; 0x24
 800894e:	ee08 0a10 	vmov	s16, r0
 8008952:	9304      	str	r3, [sp, #16]
 8008954:	4bb4      	ldr	r3, [pc, #720]	; (8008c28 <__gethex+0x2e4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	4618      	mov	r0, r3
 800895c:	468b      	mov	fp, r1
 800895e:	4690      	mov	r8, r2
 8008960:	f7f7 fc36 	bl	80001d0 <strlen>
 8008964:	9b01      	ldr	r3, [sp, #4]
 8008966:	f8db 2000 	ldr.w	r2, [fp]
 800896a:	4403      	add	r3, r0
 800896c:	4682      	mov	sl, r0
 800896e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008972:	9305      	str	r3, [sp, #20]
 8008974:	1c93      	adds	r3, r2, #2
 8008976:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800897a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800897e:	32fe      	adds	r2, #254	; 0xfe
 8008980:	18d1      	adds	r1, r2, r3
 8008982:	461f      	mov	r7, r3
 8008984:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008988:	9100      	str	r1, [sp, #0]
 800898a:	2830      	cmp	r0, #48	; 0x30
 800898c:	d0f8      	beq.n	8008980 <__gethex+0x3c>
 800898e:	f7ff ffc3 	bl	8008918 <__hexdig_fun>
 8008992:	4604      	mov	r4, r0
 8008994:	2800      	cmp	r0, #0
 8008996:	d13a      	bne.n	8008a0e <__gethex+0xca>
 8008998:	9901      	ldr	r1, [sp, #4]
 800899a:	4652      	mov	r2, sl
 800899c:	4638      	mov	r0, r7
 800899e:	f001 f86f 	bl	8009a80 <strncmp>
 80089a2:	4605      	mov	r5, r0
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d168      	bne.n	8008a7a <__gethex+0x136>
 80089a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80089ac:	eb07 060a 	add.w	r6, r7, sl
 80089b0:	f7ff ffb2 	bl	8008918 <__hexdig_fun>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d062      	beq.n	8008a7e <__gethex+0x13a>
 80089b8:	4633      	mov	r3, r6
 80089ba:	7818      	ldrb	r0, [r3, #0]
 80089bc:	2830      	cmp	r0, #48	; 0x30
 80089be:	461f      	mov	r7, r3
 80089c0:	f103 0301 	add.w	r3, r3, #1
 80089c4:	d0f9      	beq.n	80089ba <__gethex+0x76>
 80089c6:	f7ff ffa7 	bl	8008918 <__hexdig_fun>
 80089ca:	2301      	movs	r3, #1
 80089cc:	fab0 f480 	clz	r4, r0
 80089d0:	0964      	lsrs	r4, r4, #5
 80089d2:	4635      	mov	r5, r6
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	463a      	mov	r2, r7
 80089d8:	4616      	mov	r6, r2
 80089da:	3201      	adds	r2, #1
 80089dc:	7830      	ldrb	r0, [r6, #0]
 80089de:	f7ff ff9b 	bl	8008918 <__hexdig_fun>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d1f8      	bne.n	80089d8 <__gethex+0x94>
 80089e6:	9901      	ldr	r1, [sp, #4]
 80089e8:	4652      	mov	r2, sl
 80089ea:	4630      	mov	r0, r6
 80089ec:	f001 f848 	bl	8009a80 <strncmp>
 80089f0:	b980      	cbnz	r0, 8008a14 <__gethex+0xd0>
 80089f2:	b94d      	cbnz	r5, 8008a08 <__gethex+0xc4>
 80089f4:	eb06 050a 	add.w	r5, r6, sl
 80089f8:	462a      	mov	r2, r5
 80089fa:	4616      	mov	r6, r2
 80089fc:	3201      	adds	r2, #1
 80089fe:	7830      	ldrb	r0, [r6, #0]
 8008a00:	f7ff ff8a 	bl	8008918 <__hexdig_fun>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d1f8      	bne.n	80089fa <__gethex+0xb6>
 8008a08:	1bad      	subs	r5, r5, r6
 8008a0a:	00ad      	lsls	r5, r5, #2
 8008a0c:	e004      	b.n	8008a18 <__gethex+0xd4>
 8008a0e:	2400      	movs	r4, #0
 8008a10:	4625      	mov	r5, r4
 8008a12:	e7e0      	b.n	80089d6 <__gethex+0x92>
 8008a14:	2d00      	cmp	r5, #0
 8008a16:	d1f7      	bne.n	8008a08 <__gethex+0xc4>
 8008a18:	7833      	ldrb	r3, [r6, #0]
 8008a1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a1e:	2b50      	cmp	r3, #80	; 0x50
 8008a20:	d13b      	bne.n	8008a9a <__gethex+0x156>
 8008a22:	7873      	ldrb	r3, [r6, #1]
 8008a24:	2b2b      	cmp	r3, #43	; 0x2b
 8008a26:	d02c      	beq.n	8008a82 <__gethex+0x13e>
 8008a28:	2b2d      	cmp	r3, #45	; 0x2d
 8008a2a:	d02e      	beq.n	8008a8a <__gethex+0x146>
 8008a2c:	1c71      	adds	r1, r6, #1
 8008a2e:	f04f 0900 	mov.w	r9, #0
 8008a32:	7808      	ldrb	r0, [r1, #0]
 8008a34:	f7ff ff70 	bl	8008918 <__hexdig_fun>
 8008a38:	1e43      	subs	r3, r0, #1
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b18      	cmp	r3, #24
 8008a3e:	d82c      	bhi.n	8008a9a <__gethex+0x156>
 8008a40:	f1a0 0210 	sub.w	r2, r0, #16
 8008a44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a48:	f7ff ff66 	bl	8008918 <__hexdig_fun>
 8008a4c:	1e43      	subs	r3, r0, #1
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b18      	cmp	r3, #24
 8008a52:	d91d      	bls.n	8008a90 <__gethex+0x14c>
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	d000      	beq.n	8008a5c <__gethex+0x118>
 8008a5a:	4252      	negs	r2, r2
 8008a5c:	4415      	add	r5, r2
 8008a5e:	f8cb 1000 	str.w	r1, [fp]
 8008a62:	b1e4      	cbz	r4, 8008a9e <__gethex+0x15a>
 8008a64:	9b00      	ldr	r3, [sp, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	bf14      	ite	ne
 8008a6a:	2700      	movne	r7, #0
 8008a6c:	2706      	moveq	r7, #6
 8008a6e:	4638      	mov	r0, r7
 8008a70:	b009      	add	sp, #36	; 0x24
 8008a72:	ecbd 8b02 	vpop	{d8}
 8008a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7a:	463e      	mov	r6, r7
 8008a7c:	4625      	mov	r5, r4
 8008a7e:	2401      	movs	r4, #1
 8008a80:	e7ca      	b.n	8008a18 <__gethex+0xd4>
 8008a82:	f04f 0900 	mov.w	r9, #0
 8008a86:	1cb1      	adds	r1, r6, #2
 8008a88:	e7d3      	b.n	8008a32 <__gethex+0xee>
 8008a8a:	f04f 0901 	mov.w	r9, #1
 8008a8e:	e7fa      	b.n	8008a86 <__gethex+0x142>
 8008a90:	230a      	movs	r3, #10
 8008a92:	fb03 0202 	mla	r2, r3, r2, r0
 8008a96:	3a10      	subs	r2, #16
 8008a98:	e7d4      	b.n	8008a44 <__gethex+0x100>
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	e7df      	b.n	8008a5e <__gethex+0x11a>
 8008a9e:	1bf3      	subs	r3, r6, r7
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	2b07      	cmp	r3, #7
 8008aa6:	dc0b      	bgt.n	8008ac0 <__gethex+0x17c>
 8008aa8:	ee18 0a10 	vmov	r0, s16
 8008aac:	f000 fa64 	bl	8008f78 <_Balloc>
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	b940      	cbnz	r0, 8008ac6 <__gethex+0x182>
 8008ab4:	4b5d      	ldr	r3, [pc, #372]	; (8008c2c <__gethex+0x2e8>)
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	21de      	movs	r1, #222	; 0xde
 8008aba:	485d      	ldr	r0, [pc, #372]	; (8008c30 <__gethex+0x2ec>)
 8008abc:	f001 f802 	bl	8009ac4 <__assert_func>
 8008ac0:	3101      	adds	r1, #1
 8008ac2:	105b      	asrs	r3, r3, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__gethex+0x160>
 8008ac6:	f100 0914 	add.w	r9, r0, #20
 8008aca:	f04f 0b00 	mov.w	fp, #0
 8008ace:	f1ca 0301 	rsb	r3, sl, #1
 8008ad2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ad6:	f8cd b000 	str.w	fp, [sp]
 8008ada:	9306      	str	r3, [sp, #24]
 8008adc:	42b7      	cmp	r7, r6
 8008ade:	d340      	bcc.n	8008b62 <__gethex+0x21e>
 8008ae0:	9802      	ldr	r0, [sp, #8]
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	f840 3b04 	str.w	r3, [r0], #4
 8008ae8:	eba0 0009 	sub.w	r0, r0, r9
 8008aec:	1080      	asrs	r0, r0, #2
 8008aee:	0146      	lsls	r6, r0, #5
 8008af0:	6120      	str	r0, [r4, #16]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fb32 	bl	800915c <__hi0bits>
 8008af8:	1a30      	subs	r0, r6, r0
 8008afa:	f8d8 6000 	ldr.w	r6, [r8]
 8008afe:	42b0      	cmp	r0, r6
 8008b00:	dd63      	ble.n	8008bca <__gethex+0x286>
 8008b02:	1b87      	subs	r7, r0, r6
 8008b04:	4639      	mov	r1, r7
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 fed6 	bl	80098b8 <__any_on>
 8008b0c:	4682      	mov	sl, r0
 8008b0e:	b1a8      	cbz	r0, 8008b3c <__gethex+0x1f8>
 8008b10:	1e7b      	subs	r3, r7, #1
 8008b12:	1159      	asrs	r1, r3, #5
 8008b14:	f003 021f 	and.w	r2, r3, #31
 8008b18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b1c:	f04f 0a01 	mov.w	sl, #1
 8008b20:	fa0a f202 	lsl.w	r2, sl, r2
 8008b24:	420a      	tst	r2, r1
 8008b26:	d009      	beq.n	8008b3c <__gethex+0x1f8>
 8008b28:	4553      	cmp	r3, sl
 8008b2a:	dd05      	ble.n	8008b38 <__gethex+0x1f4>
 8008b2c:	1eb9      	subs	r1, r7, #2
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 fec2 	bl	80098b8 <__any_on>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d145      	bne.n	8008bc4 <__gethex+0x280>
 8008b38:	f04f 0a02 	mov.w	sl, #2
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f7ff fe98 	bl	8008874 <rshift>
 8008b44:	443d      	add	r5, r7
 8008b46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b4a:	42ab      	cmp	r3, r5
 8008b4c:	da4c      	bge.n	8008be8 <__gethex+0x2a4>
 8008b4e:	ee18 0a10 	vmov	r0, s16
 8008b52:	4621      	mov	r1, r4
 8008b54:	f000 fa50 	bl	8008ff8 <_Bfree>
 8008b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	27a3      	movs	r7, #163	; 0xa3
 8008b60:	e785      	b.n	8008a6e <__gethex+0x12a>
 8008b62:	1e73      	subs	r3, r6, #1
 8008b64:	9a05      	ldr	r2, [sp, #20]
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d019      	beq.n	8008ba4 <__gethex+0x260>
 8008b70:	f1bb 0f20 	cmp.w	fp, #32
 8008b74:	d107      	bne.n	8008b86 <__gethex+0x242>
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	9a00      	ldr	r2, [sp, #0]
 8008b7a:	f843 2b04 	str.w	r2, [r3], #4
 8008b7e:	9302      	str	r3, [sp, #8]
 8008b80:	2300      	movs	r3, #0
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	469b      	mov	fp, r3
 8008b86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008b8a:	f7ff fec5 	bl	8008918 <__hexdig_fun>
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	f000 000f 	and.w	r0, r0, #15
 8008b94:	fa00 f00b 	lsl.w	r0, r0, fp
 8008b98:	4303      	orrs	r3, r0
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	f10b 0b04 	add.w	fp, fp, #4
 8008ba0:	9b03      	ldr	r3, [sp, #12]
 8008ba2:	e00d      	b.n	8008bc0 <__gethex+0x27c>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	9a06      	ldr	r2, [sp, #24]
 8008ba8:	4413      	add	r3, r2
 8008baa:	42bb      	cmp	r3, r7
 8008bac:	d3e0      	bcc.n	8008b70 <__gethex+0x22c>
 8008bae:	4618      	mov	r0, r3
 8008bb0:	9901      	ldr	r1, [sp, #4]
 8008bb2:	9307      	str	r3, [sp, #28]
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	f000 ff63 	bl	8009a80 <strncmp>
 8008bba:	9b07      	ldr	r3, [sp, #28]
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d1d7      	bne.n	8008b70 <__gethex+0x22c>
 8008bc0:	461e      	mov	r6, r3
 8008bc2:	e78b      	b.n	8008adc <__gethex+0x198>
 8008bc4:	f04f 0a03 	mov.w	sl, #3
 8008bc8:	e7b8      	b.n	8008b3c <__gethex+0x1f8>
 8008bca:	da0a      	bge.n	8008be2 <__gethex+0x29e>
 8008bcc:	1a37      	subs	r7, r6, r0
 8008bce:	4621      	mov	r1, r4
 8008bd0:	ee18 0a10 	vmov	r0, s16
 8008bd4:	463a      	mov	r2, r7
 8008bd6:	f000 fc2b 	bl	8009430 <__lshift>
 8008bda:	1bed      	subs	r5, r5, r7
 8008bdc:	4604      	mov	r4, r0
 8008bde:	f100 0914 	add.w	r9, r0, #20
 8008be2:	f04f 0a00 	mov.w	sl, #0
 8008be6:	e7ae      	b.n	8008b46 <__gethex+0x202>
 8008be8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008bec:	42a8      	cmp	r0, r5
 8008bee:	dd72      	ble.n	8008cd6 <__gethex+0x392>
 8008bf0:	1b45      	subs	r5, r0, r5
 8008bf2:	42ae      	cmp	r6, r5
 8008bf4:	dc36      	bgt.n	8008c64 <__gethex+0x320>
 8008bf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d02a      	beq.n	8008c54 <__gethex+0x310>
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d02c      	beq.n	8008c5c <__gethex+0x318>
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d11c      	bne.n	8008c40 <__gethex+0x2fc>
 8008c06:	42ae      	cmp	r6, r5
 8008c08:	d11a      	bne.n	8008c40 <__gethex+0x2fc>
 8008c0a:	2e01      	cmp	r6, #1
 8008c0c:	d112      	bne.n	8008c34 <__gethex+0x2f0>
 8008c0e:	9a04      	ldr	r2, [sp, #16]
 8008c10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	2301      	movs	r3, #1
 8008c18:	6123      	str	r3, [r4, #16]
 8008c1a:	f8c9 3000 	str.w	r3, [r9]
 8008c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c20:	2762      	movs	r7, #98	; 0x62
 8008c22:	601c      	str	r4, [r3, #0]
 8008c24:	e723      	b.n	8008a6e <__gethex+0x12a>
 8008c26:	bf00      	nop
 8008c28:	0800ab50 	.word	0x0800ab50
 8008c2c:	0800aad8 	.word	0x0800aad8
 8008c30:	0800aae9 	.word	0x0800aae9
 8008c34:	1e71      	subs	r1, r6, #1
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 fe3e 	bl	80098b8 <__any_on>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d1e6      	bne.n	8008c0e <__gethex+0x2ca>
 8008c40:	ee18 0a10 	vmov	r0, s16
 8008c44:	4621      	mov	r1, r4
 8008c46:	f000 f9d7 	bl	8008ff8 <_Bfree>
 8008c4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	2750      	movs	r7, #80	; 0x50
 8008c52:	e70c      	b.n	8008a6e <__gethex+0x12a>
 8008c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1f2      	bne.n	8008c40 <__gethex+0x2fc>
 8008c5a:	e7d8      	b.n	8008c0e <__gethex+0x2ca>
 8008c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1d5      	bne.n	8008c0e <__gethex+0x2ca>
 8008c62:	e7ed      	b.n	8008c40 <__gethex+0x2fc>
 8008c64:	1e6f      	subs	r7, r5, #1
 8008c66:	f1ba 0f00 	cmp.w	sl, #0
 8008c6a:	d131      	bne.n	8008cd0 <__gethex+0x38c>
 8008c6c:	b127      	cbz	r7, 8008c78 <__gethex+0x334>
 8008c6e:	4639      	mov	r1, r7
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fe21 	bl	80098b8 <__any_on>
 8008c76:	4682      	mov	sl, r0
 8008c78:	117b      	asrs	r3, r7, #5
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008c80:	f007 071f 	and.w	r7, r7, #31
 8008c84:	fa01 f707 	lsl.w	r7, r1, r7
 8008c88:	421f      	tst	r7, r3
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	bf18      	it	ne
 8008c90:	f04a 0a02 	orrne.w	sl, sl, #2
 8008c94:	1b76      	subs	r6, r6, r5
 8008c96:	f7ff fded 	bl	8008874 <rshift>
 8008c9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c9e:	2702      	movs	r7, #2
 8008ca0:	f1ba 0f00 	cmp.w	sl, #0
 8008ca4:	d048      	beq.n	8008d38 <__gethex+0x3f4>
 8008ca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d015      	beq.n	8008cda <__gethex+0x396>
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d017      	beq.n	8008ce2 <__gethex+0x39e>
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d109      	bne.n	8008cca <__gethex+0x386>
 8008cb6:	f01a 0f02 	tst.w	sl, #2
 8008cba:	d006      	beq.n	8008cca <__gethex+0x386>
 8008cbc:	f8d9 0000 	ldr.w	r0, [r9]
 8008cc0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008cc4:	f01a 0f01 	tst.w	sl, #1
 8008cc8:	d10e      	bne.n	8008ce8 <__gethex+0x3a4>
 8008cca:	f047 0710 	orr.w	r7, r7, #16
 8008cce:	e033      	b.n	8008d38 <__gethex+0x3f4>
 8008cd0:	f04f 0a01 	mov.w	sl, #1
 8008cd4:	e7d0      	b.n	8008c78 <__gethex+0x334>
 8008cd6:	2701      	movs	r7, #1
 8008cd8:	e7e2      	b.n	8008ca0 <__gethex+0x35c>
 8008cda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cdc:	f1c3 0301 	rsb	r3, r3, #1
 8008ce0:	9315      	str	r3, [sp, #84]	; 0x54
 8008ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0f0      	beq.n	8008cca <__gethex+0x386>
 8008ce8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008cec:	f104 0314 	add.w	r3, r4, #20
 8008cf0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008cf4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008cf8:	f04f 0c00 	mov.w	ip, #0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d02:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d06:	d01c      	beq.n	8008d42 <__gethex+0x3fe>
 8008d08:	3201      	adds	r2, #1
 8008d0a:	6002      	str	r2, [r0, #0]
 8008d0c:	2f02      	cmp	r7, #2
 8008d0e:	f104 0314 	add.w	r3, r4, #20
 8008d12:	d13f      	bne.n	8008d94 <__gethex+0x450>
 8008d14:	f8d8 2000 	ldr.w	r2, [r8]
 8008d18:	3a01      	subs	r2, #1
 8008d1a:	42b2      	cmp	r2, r6
 8008d1c:	d10a      	bne.n	8008d34 <__gethex+0x3f0>
 8008d1e:	1171      	asrs	r1, r6, #5
 8008d20:	2201      	movs	r2, #1
 8008d22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d26:	f006 061f 	and.w	r6, r6, #31
 8008d2a:	fa02 f606 	lsl.w	r6, r2, r6
 8008d2e:	421e      	tst	r6, r3
 8008d30:	bf18      	it	ne
 8008d32:	4617      	movne	r7, r2
 8008d34:	f047 0720 	orr.w	r7, r7, #32
 8008d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d3a:	601c      	str	r4, [r3, #0]
 8008d3c:	9b04      	ldr	r3, [sp, #16]
 8008d3e:	601d      	str	r5, [r3, #0]
 8008d40:	e695      	b.n	8008a6e <__gethex+0x12a>
 8008d42:	4299      	cmp	r1, r3
 8008d44:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d48:	d8d8      	bhi.n	8008cfc <__gethex+0x3b8>
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	459b      	cmp	fp, r3
 8008d4e:	db19      	blt.n	8008d84 <__gethex+0x440>
 8008d50:	6861      	ldr	r1, [r4, #4]
 8008d52:	ee18 0a10 	vmov	r0, s16
 8008d56:	3101      	adds	r1, #1
 8008d58:	f000 f90e 	bl	8008f78 <_Balloc>
 8008d5c:	4681      	mov	r9, r0
 8008d5e:	b918      	cbnz	r0, 8008d68 <__gethex+0x424>
 8008d60:	4b1a      	ldr	r3, [pc, #104]	; (8008dcc <__gethex+0x488>)
 8008d62:	4602      	mov	r2, r0
 8008d64:	2184      	movs	r1, #132	; 0x84
 8008d66:	e6a8      	b.n	8008aba <__gethex+0x176>
 8008d68:	6922      	ldr	r2, [r4, #16]
 8008d6a:	3202      	adds	r2, #2
 8008d6c:	f104 010c 	add.w	r1, r4, #12
 8008d70:	0092      	lsls	r2, r2, #2
 8008d72:	300c      	adds	r0, #12
 8008d74:	f7fe ff3a 	bl	8007bec <memcpy>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	ee18 0a10 	vmov	r0, s16
 8008d7e:	f000 f93b 	bl	8008ff8 <_Bfree>
 8008d82:	464c      	mov	r4, r9
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	1c5a      	adds	r2, r3, #1
 8008d88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d8c:	6122      	str	r2, [r4, #16]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	615a      	str	r2, [r3, #20]
 8008d92:	e7bb      	b.n	8008d0c <__gethex+0x3c8>
 8008d94:	6922      	ldr	r2, [r4, #16]
 8008d96:	455a      	cmp	r2, fp
 8008d98:	dd0b      	ble.n	8008db2 <__gethex+0x46e>
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f7ff fd69 	bl	8008874 <rshift>
 8008da2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008da6:	3501      	adds	r5, #1
 8008da8:	42ab      	cmp	r3, r5
 8008daa:	f6ff aed0 	blt.w	8008b4e <__gethex+0x20a>
 8008dae:	2701      	movs	r7, #1
 8008db0:	e7c0      	b.n	8008d34 <__gethex+0x3f0>
 8008db2:	f016 061f 	ands.w	r6, r6, #31
 8008db6:	d0fa      	beq.n	8008dae <__gethex+0x46a>
 8008db8:	4453      	add	r3, sl
 8008dba:	f1c6 0620 	rsb	r6, r6, #32
 8008dbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008dc2:	f000 f9cb 	bl	800915c <__hi0bits>
 8008dc6:	42b0      	cmp	r0, r6
 8008dc8:	dbe7      	blt.n	8008d9a <__gethex+0x456>
 8008dca:	e7f0      	b.n	8008dae <__gethex+0x46a>
 8008dcc:	0800aad8 	.word	0x0800aad8

08008dd0 <L_shift>:
 8008dd0:	f1c2 0208 	rsb	r2, r2, #8
 8008dd4:	0092      	lsls	r2, r2, #2
 8008dd6:	b570      	push	{r4, r5, r6, lr}
 8008dd8:	f1c2 0620 	rsb	r6, r2, #32
 8008ddc:	6843      	ldr	r3, [r0, #4]
 8008dde:	6804      	ldr	r4, [r0, #0]
 8008de0:	fa03 f506 	lsl.w	r5, r3, r6
 8008de4:	432c      	orrs	r4, r5
 8008de6:	40d3      	lsrs	r3, r2
 8008de8:	6004      	str	r4, [r0, #0]
 8008dea:	f840 3f04 	str.w	r3, [r0, #4]!
 8008dee:	4288      	cmp	r0, r1
 8008df0:	d3f4      	bcc.n	8008ddc <L_shift+0xc>
 8008df2:	bd70      	pop	{r4, r5, r6, pc}

08008df4 <__match>:
 8008df4:	b530      	push	{r4, r5, lr}
 8008df6:	6803      	ldr	r3, [r0, #0]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dfe:	b914      	cbnz	r4, 8008e06 <__match+0x12>
 8008e00:	6003      	str	r3, [r0, #0]
 8008e02:	2001      	movs	r0, #1
 8008e04:	bd30      	pop	{r4, r5, pc}
 8008e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e0e:	2d19      	cmp	r5, #25
 8008e10:	bf98      	it	ls
 8008e12:	3220      	addls	r2, #32
 8008e14:	42a2      	cmp	r2, r4
 8008e16:	d0f0      	beq.n	8008dfa <__match+0x6>
 8008e18:	2000      	movs	r0, #0
 8008e1a:	e7f3      	b.n	8008e04 <__match+0x10>

08008e1c <__hexnan>:
 8008e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e20:	680b      	ldr	r3, [r1, #0]
 8008e22:	115e      	asrs	r6, r3, #5
 8008e24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e28:	f013 031f 	ands.w	r3, r3, #31
 8008e2c:	b087      	sub	sp, #28
 8008e2e:	bf18      	it	ne
 8008e30:	3604      	addne	r6, #4
 8008e32:	2500      	movs	r5, #0
 8008e34:	1f37      	subs	r7, r6, #4
 8008e36:	4690      	mov	r8, r2
 8008e38:	6802      	ldr	r2, [r0, #0]
 8008e3a:	9301      	str	r3, [sp, #4]
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e42:	46b9      	mov	r9, r7
 8008e44:	463c      	mov	r4, r7
 8008e46:	9502      	str	r5, [sp, #8]
 8008e48:	46ab      	mov	fp, r5
 8008e4a:	7851      	ldrb	r1, [r2, #1]
 8008e4c:	1c53      	adds	r3, r2, #1
 8008e4e:	9303      	str	r3, [sp, #12]
 8008e50:	b341      	cbz	r1, 8008ea4 <__hexnan+0x88>
 8008e52:	4608      	mov	r0, r1
 8008e54:	9205      	str	r2, [sp, #20]
 8008e56:	9104      	str	r1, [sp, #16]
 8008e58:	f7ff fd5e 	bl	8008918 <__hexdig_fun>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d14f      	bne.n	8008f00 <__hexnan+0xe4>
 8008e60:	9904      	ldr	r1, [sp, #16]
 8008e62:	9a05      	ldr	r2, [sp, #20]
 8008e64:	2920      	cmp	r1, #32
 8008e66:	d818      	bhi.n	8008e9a <__hexnan+0x7e>
 8008e68:	9b02      	ldr	r3, [sp, #8]
 8008e6a:	459b      	cmp	fp, r3
 8008e6c:	dd13      	ble.n	8008e96 <__hexnan+0x7a>
 8008e6e:	454c      	cmp	r4, r9
 8008e70:	d206      	bcs.n	8008e80 <__hexnan+0x64>
 8008e72:	2d07      	cmp	r5, #7
 8008e74:	dc04      	bgt.n	8008e80 <__hexnan+0x64>
 8008e76:	462a      	mov	r2, r5
 8008e78:	4649      	mov	r1, r9
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7ff ffa8 	bl	8008dd0 <L_shift>
 8008e80:	4544      	cmp	r4, r8
 8008e82:	d950      	bls.n	8008f26 <__hexnan+0x10a>
 8008e84:	2300      	movs	r3, #0
 8008e86:	f1a4 0904 	sub.w	r9, r4, #4
 8008e8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e8e:	f8cd b008 	str.w	fp, [sp, #8]
 8008e92:	464c      	mov	r4, r9
 8008e94:	461d      	mov	r5, r3
 8008e96:	9a03      	ldr	r2, [sp, #12]
 8008e98:	e7d7      	b.n	8008e4a <__hexnan+0x2e>
 8008e9a:	2929      	cmp	r1, #41	; 0x29
 8008e9c:	d156      	bne.n	8008f4c <__hexnan+0x130>
 8008e9e:	3202      	adds	r2, #2
 8008ea0:	f8ca 2000 	str.w	r2, [sl]
 8008ea4:	f1bb 0f00 	cmp.w	fp, #0
 8008ea8:	d050      	beq.n	8008f4c <__hexnan+0x130>
 8008eaa:	454c      	cmp	r4, r9
 8008eac:	d206      	bcs.n	8008ebc <__hexnan+0xa0>
 8008eae:	2d07      	cmp	r5, #7
 8008eb0:	dc04      	bgt.n	8008ebc <__hexnan+0xa0>
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f7ff ff8a 	bl	8008dd0 <L_shift>
 8008ebc:	4544      	cmp	r4, r8
 8008ebe:	d934      	bls.n	8008f2a <__hexnan+0x10e>
 8008ec0:	f1a8 0204 	sub.w	r2, r8, #4
 8008ec4:	4623      	mov	r3, r4
 8008ec6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008eca:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ece:	429f      	cmp	r7, r3
 8008ed0:	d2f9      	bcs.n	8008ec6 <__hexnan+0xaa>
 8008ed2:	1b3b      	subs	r3, r7, r4
 8008ed4:	f023 0303 	bic.w	r3, r3, #3
 8008ed8:	3304      	adds	r3, #4
 8008eda:	3401      	adds	r4, #1
 8008edc:	3e03      	subs	r6, #3
 8008ede:	42b4      	cmp	r4, r6
 8008ee0:	bf88      	it	hi
 8008ee2:	2304      	movhi	r3, #4
 8008ee4:	4443      	add	r3, r8
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f843 2b04 	str.w	r2, [r3], #4
 8008eec:	429f      	cmp	r7, r3
 8008eee:	d2fb      	bcs.n	8008ee8 <__hexnan+0xcc>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	b91b      	cbnz	r3, 8008efc <__hexnan+0xe0>
 8008ef4:	4547      	cmp	r7, r8
 8008ef6:	d127      	bne.n	8008f48 <__hexnan+0x12c>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	2005      	movs	r0, #5
 8008efe:	e026      	b.n	8008f4e <__hexnan+0x132>
 8008f00:	3501      	adds	r5, #1
 8008f02:	2d08      	cmp	r5, #8
 8008f04:	f10b 0b01 	add.w	fp, fp, #1
 8008f08:	dd06      	ble.n	8008f18 <__hexnan+0xfc>
 8008f0a:	4544      	cmp	r4, r8
 8008f0c:	d9c3      	bls.n	8008e96 <__hexnan+0x7a>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f14:	2501      	movs	r5, #1
 8008f16:	3c04      	subs	r4, #4
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	f000 000f 	and.w	r0, r0, #15
 8008f1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f22:	6022      	str	r2, [r4, #0]
 8008f24:	e7b7      	b.n	8008e96 <__hexnan+0x7a>
 8008f26:	2508      	movs	r5, #8
 8008f28:	e7b5      	b.n	8008e96 <__hexnan+0x7a>
 8008f2a:	9b01      	ldr	r3, [sp, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0df      	beq.n	8008ef0 <__hexnan+0xd4>
 8008f30:	f04f 32ff 	mov.w	r2, #4294967295
 8008f34:	f1c3 0320 	rsb	r3, r3, #32
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f40:	401a      	ands	r2, r3
 8008f42:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f46:	e7d3      	b.n	8008ef0 <__hexnan+0xd4>
 8008f48:	3f04      	subs	r7, #4
 8008f4a:	e7d1      	b.n	8008ef0 <__hexnan+0xd4>
 8008f4c:	2004      	movs	r0, #4
 8008f4e:	b007      	add	sp, #28
 8008f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f54 <__ascii_mbtowc>:
 8008f54:	b082      	sub	sp, #8
 8008f56:	b901      	cbnz	r1, 8008f5a <__ascii_mbtowc+0x6>
 8008f58:	a901      	add	r1, sp, #4
 8008f5a:	b142      	cbz	r2, 8008f6e <__ascii_mbtowc+0x1a>
 8008f5c:	b14b      	cbz	r3, 8008f72 <__ascii_mbtowc+0x1e>
 8008f5e:	7813      	ldrb	r3, [r2, #0]
 8008f60:	600b      	str	r3, [r1, #0]
 8008f62:	7812      	ldrb	r2, [r2, #0]
 8008f64:	1e10      	subs	r0, r2, #0
 8008f66:	bf18      	it	ne
 8008f68:	2001      	movne	r0, #1
 8008f6a:	b002      	add	sp, #8
 8008f6c:	4770      	bx	lr
 8008f6e:	4610      	mov	r0, r2
 8008f70:	e7fb      	b.n	8008f6a <__ascii_mbtowc+0x16>
 8008f72:	f06f 0001 	mvn.w	r0, #1
 8008f76:	e7f8      	b.n	8008f6a <__ascii_mbtowc+0x16>

08008f78 <_Balloc>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	460d      	mov	r5, r1
 8008f80:	b976      	cbnz	r6, 8008fa0 <_Balloc+0x28>
 8008f82:	2010      	movs	r0, #16
 8008f84:	f000 fdce 	bl	8009b24 <malloc>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	6260      	str	r0, [r4, #36]	; 0x24
 8008f8c:	b920      	cbnz	r0, 8008f98 <_Balloc+0x20>
 8008f8e:	4b18      	ldr	r3, [pc, #96]	; (8008ff0 <_Balloc+0x78>)
 8008f90:	4818      	ldr	r0, [pc, #96]	; (8008ff4 <_Balloc+0x7c>)
 8008f92:	2166      	movs	r1, #102	; 0x66
 8008f94:	f000 fd96 	bl	8009ac4 <__assert_func>
 8008f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f9c:	6006      	str	r6, [r0, #0]
 8008f9e:	60c6      	str	r6, [r0, #12]
 8008fa0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fa2:	68f3      	ldr	r3, [r6, #12]
 8008fa4:	b183      	cbz	r3, 8008fc8 <_Balloc+0x50>
 8008fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fae:	b9b8      	cbnz	r0, 8008fe0 <_Balloc+0x68>
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	fa01 f605 	lsl.w	r6, r1, r5
 8008fb6:	1d72      	adds	r2, r6, #5
 8008fb8:	0092      	lsls	r2, r2, #2
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 fc9d 	bl	80098fa <_calloc_r>
 8008fc0:	b160      	cbz	r0, 8008fdc <_Balloc+0x64>
 8008fc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fc6:	e00e      	b.n	8008fe6 <_Balloc+0x6e>
 8008fc8:	2221      	movs	r2, #33	; 0x21
 8008fca:	2104      	movs	r1, #4
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fc94 	bl	80098fa <_calloc_r>
 8008fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd4:	60f0      	str	r0, [r6, #12]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e4      	bne.n	8008fa6 <_Balloc+0x2e>
 8008fdc:	2000      	movs	r0, #0
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	6802      	ldr	r2, [r0, #0]
 8008fe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fec:	e7f7      	b.n	8008fde <_Balloc+0x66>
 8008fee:	bf00      	nop
 8008ff0:	0800ab64 	.word	0x0800ab64
 8008ff4:	0800ab7b 	.word	0x0800ab7b

08008ff8 <_Bfree>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	b976      	cbnz	r6, 8009020 <_Bfree+0x28>
 8009002:	2010      	movs	r0, #16
 8009004:	f000 fd8e 	bl	8009b24 <malloc>
 8009008:	4602      	mov	r2, r0
 800900a:	6268      	str	r0, [r5, #36]	; 0x24
 800900c:	b920      	cbnz	r0, 8009018 <_Bfree+0x20>
 800900e:	4b09      	ldr	r3, [pc, #36]	; (8009034 <_Bfree+0x3c>)
 8009010:	4809      	ldr	r0, [pc, #36]	; (8009038 <_Bfree+0x40>)
 8009012:	218a      	movs	r1, #138	; 0x8a
 8009014:	f000 fd56 	bl	8009ac4 <__assert_func>
 8009018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800901c:	6006      	str	r6, [r0, #0]
 800901e:	60c6      	str	r6, [r0, #12]
 8009020:	b13c      	cbz	r4, 8009032 <_Bfree+0x3a>
 8009022:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009024:	6862      	ldr	r2, [r4, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800902c:	6021      	str	r1, [r4, #0]
 800902e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009032:	bd70      	pop	{r4, r5, r6, pc}
 8009034:	0800ab64 	.word	0x0800ab64
 8009038:	0800ab7b 	.word	0x0800ab7b

0800903c <__multadd>:
 800903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009040:	690d      	ldr	r5, [r1, #16]
 8009042:	4607      	mov	r7, r0
 8009044:	460c      	mov	r4, r1
 8009046:	461e      	mov	r6, r3
 8009048:	f101 0c14 	add.w	ip, r1, #20
 800904c:	2000      	movs	r0, #0
 800904e:	f8dc 3000 	ldr.w	r3, [ip]
 8009052:	b299      	uxth	r1, r3
 8009054:	fb02 6101 	mla	r1, r2, r1, r6
 8009058:	0c1e      	lsrs	r6, r3, #16
 800905a:	0c0b      	lsrs	r3, r1, #16
 800905c:	fb02 3306 	mla	r3, r2, r6, r3
 8009060:	b289      	uxth	r1, r1
 8009062:	3001      	adds	r0, #1
 8009064:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009068:	4285      	cmp	r5, r0
 800906a:	f84c 1b04 	str.w	r1, [ip], #4
 800906e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009072:	dcec      	bgt.n	800904e <__multadd+0x12>
 8009074:	b30e      	cbz	r6, 80090ba <__multadd+0x7e>
 8009076:	68a3      	ldr	r3, [r4, #8]
 8009078:	42ab      	cmp	r3, r5
 800907a:	dc19      	bgt.n	80090b0 <__multadd+0x74>
 800907c:	6861      	ldr	r1, [r4, #4]
 800907e:	4638      	mov	r0, r7
 8009080:	3101      	adds	r1, #1
 8009082:	f7ff ff79 	bl	8008f78 <_Balloc>
 8009086:	4680      	mov	r8, r0
 8009088:	b928      	cbnz	r0, 8009096 <__multadd+0x5a>
 800908a:	4602      	mov	r2, r0
 800908c:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <__multadd+0x84>)
 800908e:	480d      	ldr	r0, [pc, #52]	; (80090c4 <__multadd+0x88>)
 8009090:	21b5      	movs	r1, #181	; 0xb5
 8009092:	f000 fd17 	bl	8009ac4 <__assert_func>
 8009096:	6922      	ldr	r2, [r4, #16]
 8009098:	3202      	adds	r2, #2
 800909a:	f104 010c 	add.w	r1, r4, #12
 800909e:	0092      	lsls	r2, r2, #2
 80090a0:	300c      	adds	r0, #12
 80090a2:	f7fe fda3 	bl	8007bec <memcpy>
 80090a6:	4621      	mov	r1, r4
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7ff ffa5 	bl	8008ff8 <_Bfree>
 80090ae:	4644      	mov	r4, r8
 80090b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090b4:	3501      	adds	r5, #1
 80090b6:	615e      	str	r6, [r3, #20]
 80090b8:	6125      	str	r5, [r4, #16]
 80090ba:	4620      	mov	r0, r4
 80090bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c0:	0800aad8 	.word	0x0800aad8
 80090c4:	0800ab7b 	.word	0x0800ab7b

080090c8 <__s2b>:
 80090c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090cc:	460c      	mov	r4, r1
 80090ce:	4615      	mov	r5, r2
 80090d0:	461f      	mov	r7, r3
 80090d2:	2209      	movs	r2, #9
 80090d4:	3308      	adds	r3, #8
 80090d6:	4606      	mov	r6, r0
 80090d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80090dc:	2100      	movs	r1, #0
 80090de:	2201      	movs	r2, #1
 80090e0:	429a      	cmp	r2, r3
 80090e2:	db09      	blt.n	80090f8 <__s2b+0x30>
 80090e4:	4630      	mov	r0, r6
 80090e6:	f7ff ff47 	bl	8008f78 <_Balloc>
 80090ea:	b940      	cbnz	r0, 80090fe <__s2b+0x36>
 80090ec:	4602      	mov	r2, r0
 80090ee:	4b19      	ldr	r3, [pc, #100]	; (8009154 <__s2b+0x8c>)
 80090f0:	4819      	ldr	r0, [pc, #100]	; (8009158 <__s2b+0x90>)
 80090f2:	21ce      	movs	r1, #206	; 0xce
 80090f4:	f000 fce6 	bl	8009ac4 <__assert_func>
 80090f8:	0052      	lsls	r2, r2, #1
 80090fa:	3101      	adds	r1, #1
 80090fc:	e7f0      	b.n	80090e0 <__s2b+0x18>
 80090fe:	9b08      	ldr	r3, [sp, #32]
 8009100:	6143      	str	r3, [r0, #20]
 8009102:	2d09      	cmp	r5, #9
 8009104:	f04f 0301 	mov.w	r3, #1
 8009108:	6103      	str	r3, [r0, #16]
 800910a:	dd16      	ble.n	800913a <__s2b+0x72>
 800910c:	f104 0909 	add.w	r9, r4, #9
 8009110:	46c8      	mov	r8, r9
 8009112:	442c      	add	r4, r5
 8009114:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009118:	4601      	mov	r1, r0
 800911a:	3b30      	subs	r3, #48	; 0x30
 800911c:	220a      	movs	r2, #10
 800911e:	4630      	mov	r0, r6
 8009120:	f7ff ff8c 	bl	800903c <__multadd>
 8009124:	45a0      	cmp	r8, r4
 8009126:	d1f5      	bne.n	8009114 <__s2b+0x4c>
 8009128:	f1a5 0408 	sub.w	r4, r5, #8
 800912c:	444c      	add	r4, r9
 800912e:	1b2d      	subs	r5, r5, r4
 8009130:	1963      	adds	r3, r4, r5
 8009132:	42bb      	cmp	r3, r7
 8009134:	db04      	blt.n	8009140 <__s2b+0x78>
 8009136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800913a:	340a      	adds	r4, #10
 800913c:	2509      	movs	r5, #9
 800913e:	e7f6      	b.n	800912e <__s2b+0x66>
 8009140:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009144:	4601      	mov	r1, r0
 8009146:	3b30      	subs	r3, #48	; 0x30
 8009148:	220a      	movs	r2, #10
 800914a:	4630      	mov	r0, r6
 800914c:	f7ff ff76 	bl	800903c <__multadd>
 8009150:	e7ee      	b.n	8009130 <__s2b+0x68>
 8009152:	bf00      	nop
 8009154:	0800aad8 	.word	0x0800aad8
 8009158:	0800ab7b 	.word	0x0800ab7b

0800915c <__hi0bits>:
 800915c:	0c03      	lsrs	r3, r0, #16
 800915e:	041b      	lsls	r3, r3, #16
 8009160:	b9d3      	cbnz	r3, 8009198 <__hi0bits+0x3c>
 8009162:	0400      	lsls	r0, r0, #16
 8009164:	2310      	movs	r3, #16
 8009166:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800916a:	bf04      	itt	eq
 800916c:	0200      	lsleq	r0, r0, #8
 800916e:	3308      	addeq	r3, #8
 8009170:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009174:	bf04      	itt	eq
 8009176:	0100      	lsleq	r0, r0, #4
 8009178:	3304      	addeq	r3, #4
 800917a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800917e:	bf04      	itt	eq
 8009180:	0080      	lsleq	r0, r0, #2
 8009182:	3302      	addeq	r3, #2
 8009184:	2800      	cmp	r0, #0
 8009186:	db05      	blt.n	8009194 <__hi0bits+0x38>
 8009188:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800918c:	f103 0301 	add.w	r3, r3, #1
 8009190:	bf08      	it	eq
 8009192:	2320      	moveq	r3, #32
 8009194:	4618      	mov	r0, r3
 8009196:	4770      	bx	lr
 8009198:	2300      	movs	r3, #0
 800919a:	e7e4      	b.n	8009166 <__hi0bits+0xa>

0800919c <__lo0bits>:
 800919c:	6803      	ldr	r3, [r0, #0]
 800919e:	f013 0207 	ands.w	r2, r3, #7
 80091a2:	4601      	mov	r1, r0
 80091a4:	d00b      	beq.n	80091be <__lo0bits+0x22>
 80091a6:	07da      	lsls	r2, r3, #31
 80091a8:	d423      	bmi.n	80091f2 <__lo0bits+0x56>
 80091aa:	0798      	lsls	r0, r3, #30
 80091ac:	bf49      	itett	mi
 80091ae:	085b      	lsrmi	r3, r3, #1
 80091b0:	089b      	lsrpl	r3, r3, #2
 80091b2:	2001      	movmi	r0, #1
 80091b4:	600b      	strmi	r3, [r1, #0]
 80091b6:	bf5c      	itt	pl
 80091b8:	600b      	strpl	r3, [r1, #0]
 80091ba:	2002      	movpl	r0, #2
 80091bc:	4770      	bx	lr
 80091be:	b298      	uxth	r0, r3
 80091c0:	b9a8      	cbnz	r0, 80091ee <__lo0bits+0x52>
 80091c2:	0c1b      	lsrs	r3, r3, #16
 80091c4:	2010      	movs	r0, #16
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	b90a      	cbnz	r2, 80091ce <__lo0bits+0x32>
 80091ca:	3008      	adds	r0, #8
 80091cc:	0a1b      	lsrs	r3, r3, #8
 80091ce:	071a      	lsls	r2, r3, #28
 80091d0:	bf04      	itt	eq
 80091d2:	091b      	lsreq	r3, r3, #4
 80091d4:	3004      	addeq	r0, #4
 80091d6:	079a      	lsls	r2, r3, #30
 80091d8:	bf04      	itt	eq
 80091da:	089b      	lsreq	r3, r3, #2
 80091dc:	3002      	addeq	r0, #2
 80091de:	07da      	lsls	r2, r3, #31
 80091e0:	d403      	bmi.n	80091ea <__lo0bits+0x4e>
 80091e2:	085b      	lsrs	r3, r3, #1
 80091e4:	f100 0001 	add.w	r0, r0, #1
 80091e8:	d005      	beq.n	80091f6 <__lo0bits+0x5a>
 80091ea:	600b      	str	r3, [r1, #0]
 80091ec:	4770      	bx	lr
 80091ee:	4610      	mov	r0, r2
 80091f0:	e7e9      	b.n	80091c6 <__lo0bits+0x2a>
 80091f2:	2000      	movs	r0, #0
 80091f4:	4770      	bx	lr
 80091f6:	2020      	movs	r0, #32
 80091f8:	4770      	bx	lr
	...

080091fc <__i2b>:
 80091fc:	b510      	push	{r4, lr}
 80091fe:	460c      	mov	r4, r1
 8009200:	2101      	movs	r1, #1
 8009202:	f7ff feb9 	bl	8008f78 <_Balloc>
 8009206:	4602      	mov	r2, r0
 8009208:	b928      	cbnz	r0, 8009216 <__i2b+0x1a>
 800920a:	4b05      	ldr	r3, [pc, #20]	; (8009220 <__i2b+0x24>)
 800920c:	4805      	ldr	r0, [pc, #20]	; (8009224 <__i2b+0x28>)
 800920e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009212:	f000 fc57 	bl	8009ac4 <__assert_func>
 8009216:	2301      	movs	r3, #1
 8009218:	6144      	str	r4, [r0, #20]
 800921a:	6103      	str	r3, [r0, #16]
 800921c:	bd10      	pop	{r4, pc}
 800921e:	bf00      	nop
 8009220:	0800aad8 	.word	0x0800aad8
 8009224:	0800ab7b 	.word	0x0800ab7b

08009228 <__multiply>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	4691      	mov	r9, r2
 800922e:	690a      	ldr	r2, [r1, #16]
 8009230:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009234:	429a      	cmp	r2, r3
 8009236:	bfb8      	it	lt
 8009238:	460b      	movlt	r3, r1
 800923a:	460c      	mov	r4, r1
 800923c:	bfbc      	itt	lt
 800923e:	464c      	movlt	r4, r9
 8009240:	4699      	movlt	r9, r3
 8009242:	6927      	ldr	r7, [r4, #16]
 8009244:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009248:	68a3      	ldr	r3, [r4, #8]
 800924a:	6861      	ldr	r1, [r4, #4]
 800924c:	eb07 060a 	add.w	r6, r7, sl
 8009250:	42b3      	cmp	r3, r6
 8009252:	b085      	sub	sp, #20
 8009254:	bfb8      	it	lt
 8009256:	3101      	addlt	r1, #1
 8009258:	f7ff fe8e 	bl	8008f78 <_Balloc>
 800925c:	b930      	cbnz	r0, 800926c <__multiply+0x44>
 800925e:	4602      	mov	r2, r0
 8009260:	4b44      	ldr	r3, [pc, #272]	; (8009374 <__multiply+0x14c>)
 8009262:	4845      	ldr	r0, [pc, #276]	; (8009378 <__multiply+0x150>)
 8009264:	f240 115d 	movw	r1, #349	; 0x15d
 8009268:	f000 fc2c 	bl	8009ac4 <__assert_func>
 800926c:	f100 0514 	add.w	r5, r0, #20
 8009270:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009274:	462b      	mov	r3, r5
 8009276:	2200      	movs	r2, #0
 8009278:	4543      	cmp	r3, r8
 800927a:	d321      	bcc.n	80092c0 <__multiply+0x98>
 800927c:	f104 0314 	add.w	r3, r4, #20
 8009280:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009284:	f109 0314 	add.w	r3, r9, #20
 8009288:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800928c:	9202      	str	r2, [sp, #8]
 800928e:	1b3a      	subs	r2, r7, r4
 8009290:	3a15      	subs	r2, #21
 8009292:	f022 0203 	bic.w	r2, r2, #3
 8009296:	3204      	adds	r2, #4
 8009298:	f104 0115 	add.w	r1, r4, #21
 800929c:	428f      	cmp	r7, r1
 800929e:	bf38      	it	cc
 80092a0:	2204      	movcc	r2, #4
 80092a2:	9201      	str	r2, [sp, #4]
 80092a4:	9a02      	ldr	r2, [sp, #8]
 80092a6:	9303      	str	r3, [sp, #12]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d80c      	bhi.n	80092c6 <__multiply+0x9e>
 80092ac:	2e00      	cmp	r6, #0
 80092ae:	dd03      	ble.n	80092b8 <__multiply+0x90>
 80092b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d05a      	beq.n	800936e <__multiply+0x146>
 80092b8:	6106      	str	r6, [r0, #16]
 80092ba:	b005      	add	sp, #20
 80092bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c0:	f843 2b04 	str.w	r2, [r3], #4
 80092c4:	e7d8      	b.n	8009278 <__multiply+0x50>
 80092c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80092ca:	f1ba 0f00 	cmp.w	sl, #0
 80092ce:	d024      	beq.n	800931a <__multiply+0xf2>
 80092d0:	f104 0e14 	add.w	lr, r4, #20
 80092d4:	46a9      	mov	r9, r5
 80092d6:	f04f 0c00 	mov.w	ip, #0
 80092da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80092de:	f8d9 1000 	ldr.w	r1, [r9]
 80092e2:	fa1f fb82 	uxth.w	fp, r2
 80092e6:	b289      	uxth	r1, r1
 80092e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80092ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80092f0:	f8d9 2000 	ldr.w	r2, [r9]
 80092f4:	4461      	add	r1, ip
 80092f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80092fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009302:	b289      	uxth	r1, r1
 8009304:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009308:	4577      	cmp	r7, lr
 800930a:	f849 1b04 	str.w	r1, [r9], #4
 800930e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009312:	d8e2      	bhi.n	80092da <__multiply+0xb2>
 8009314:	9a01      	ldr	r2, [sp, #4]
 8009316:	f845 c002 	str.w	ip, [r5, r2]
 800931a:	9a03      	ldr	r2, [sp, #12]
 800931c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009320:	3304      	adds	r3, #4
 8009322:	f1b9 0f00 	cmp.w	r9, #0
 8009326:	d020      	beq.n	800936a <__multiply+0x142>
 8009328:	6829      	ldr	r1, [r5, #0]
 800932a:	f104 0c14 	add.w	ip, r4, #20
 800932e:	46ae      	mov	lr, r5
 8009330:	f04f 0a00 	mov.w	sl, #0
 8009334:	f8bc b000 	ldrh.w	fp, [ip]
 8009338:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800933c:	fb09 220b 	mla	r2, r9, fp, r2
 8009340:	4492      	add	sl, r2
 8009342:	b289      	uxth	r1, r1
 8009344:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009348:	f84e 1b04 	str.w	r1, [lr], #4
 800934c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009350:	f8be 1000 	ldrh.w	r1, [lr]
 8009354:	0c12      	lsrs	r2, r2, #16
 8009356:	fb09 1102 	mla	r1, r9, r2, r1
 800935a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800935e:	4567      	cmp	r7, ip
 8009360:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009364:	d8e6      	bhi.n	8009334 <__multiply+0x10c>
 8009366:	9a01      	ldr	r2, [sp, #4]
 8009368:	50a9      	str	r1, [r5, r2]
 800936a:	3504      	adds	r5, #4
 800936c:	e79a      	b.n	80092a4 <__multiply+0x7c>
 800936e:	3e01      	subs	r6, #1
 8009370:	e79c      	b.n	80092ac <__multiply+0x84>
 8009372:	bf00      	nop
 8009374:	0800aad8 	.word	0x0800aad8
 8009378:	0800ab7b 	.word	0x0800ab7b

0800937c <__pow5mult>:
 800937c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009380:	4615      	mov	r5, r2
 8009382:	f012 0203 	ands.w	r2, r2, #3
 8009386:	4606      	mov	r6, r0
 8009388:	460f      	mov	r7, r1
 800938a:	d007      	beq.n	800939c <__pow5mult+0x20>
 800938c:	4c25      	ldr	r4, [pc, #148]	; (8009424 <__pow5mult+0xa8>)
 800938e:	3a01      	subs	r2, #1
 8009390:	2300      	movs	r3, #0
 8009392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009396:	f7ff fe51 	bl	800903c <__multadd>
 800939a:	4607      	mov	r7, r0
 800939c:	10ad      	asrs	r5, r5, #2
 800939e:	d03d      	beq.n	800941c <__pow5mult+0xa0>
 80093a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093a2:	b97c      	cbnz	r4, 80093c4 <__pow5mult+0x48>
 80093a4:	2010      	movs	r0, #16
 80093a6:	f000 fbbd 	bl	8009b24 <malloc>
 80093aa:	4602      	mov	r2, r0
 80093ac:	6270      	str	r0, [r6, #36]	; 0x24
 80093ae:	b928      	cbnz	r0, 80093bc <__pow5mult+0x40>
 80093b0:	4b1d      	ldr	r3, [pc, #116]	; (8009428 <__pow5mult+0xac>)
 80093b2:	481e      	ldr	r0, [pc, #120]	; (800942c <__pow5mult+0xb0>)
 80093b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093b8:	f000 fb84 	bl	8009ac4 <__assert_func>
 80093bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093c0:	6004      	str	r4, [r0, #0]
 80093c2:	60c4      	str	r4, [r0, #12]
 80093c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093cc:	b94c      	cbnz	r4, 80093e2 <__pow5mult+0x66>
 80093ce:	f240 2171 	movw	r1, #625	; 0x271
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7ff ff12 	bl	80091fc <__i2b>
 80093d8:	2300      	movs	r3, #0
 80093da:	f8c8 0008 	str.w	r0, [r8, #8]
 80093de:	4604      	mov	r4, r0
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	f04f 0900 	mov.w	r9, #0
 80093e6:	07eb      	lsls	r3, r5, #31
 80093e8:	d50a      	bpl.n	8009400 <__pow5mult+0x84>
 80093ea:	4639      	mov	r1, r7
 80093ec:	4622      	mov	r2, r4
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7ff ff1a 	bl	8009228 <__multiply>
 80093f4:	4639      	mov	r1, r7
 80093f6:	4680      	mov	r8, r0
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff fdfd 	bl	8008ff8 <_Bfree>
 80093fe:	4647      	mov	r7, r8
 8009400:	106d      	asrs	r5, r5, #1
 8009402:	d00b      	beq.n	800941c <__pow5mult+0xa0>
 8009404:	6820      	ldr	r0, [r4, #0]
 8009406:	b938      	cbnz	r0, 8009418 <__pow5mult+0x9c>
 8009408:	4622      	mov	r2, r4
 800940a:	4621      	mov	r1, r4
 800940c:	4630      	mov	r0, r6
 800940e:	f7ff ff0b 	bl	8009228 <__multiply>
 8009412:	6020      	str	r0, [r4, #0]
 8009414:	f8c0 9000 	str.w	r9, [r0]
 8009418:	4604      	mov	r4, r0
 800941a:	e7e4      	b.n	80093e6 <__pow5mult+0x6a>
 800941c:	4638      	mov	r0, r7
 800941e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009422:	bf00      	nop
 8009424:	0800acc8 	.word	0x0800acc8
 8009428:	0800ab64 	.word	0x0800ab64
 800942c:	0800ab7b 	.word	0x0800ab7b

08009430 <__lshift>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	460c      	mov	r4, r1
 8009436:	6849      	ldr	r1, [r1, #4]
 8009438:	6923      	ldr	r3, [r4, #16]
 800943a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	4607      	mov	r7, r0
 8009442:	4691      	mov	r9, r2
 8009444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009448:	f108 0601 	add.w	r6, r8, #1
 800944c:	42b3      	cmp	r3, r6
 800944e:	db0b      	blt.n	8009468 <__lshift+0x38>
 8009450:	4638      	mov	r0, r7
 8009452:	f7ff fd91 	bl	8008f78 <_Balloc>
 8009456:	4605      	mov	r5, r0
 8009458:	b948      	cbnz	r0, 800946e <__lshift+0x3e>
 800945a:	4602      	mov	r2, r0
 800945c:	4b2a      	ldr	r3, [pc, #168]	; (8009508 <__lshift+0xd8>)
 800945e:	482b      	ldr	r0, [pc, #172]	; (800950c <__lshift+0xdc>)
 8009460:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009464:	f000 fb2e 	bl	8009ac4 <__assert_func>
 8009468:	3101      	adds	r1, #1
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	e7ee      	b.n	800944c <__lshift+0x1c>
 800946e:	2300      	movs	r3, #0
 8009470:	f100 0114 	add.w	r1, r0, #20
 8009474:	f100 0210 	add.w	r2, r0, #16
 8009478:	4618      	mov	r0, r3
 800947a:	4553      	cmp	r3, sl
 800947c:	db37      	blt.n	80094ee <__lshift+0xbe>
 800947e:	6920      	ldr	r0, [r4, #16]
 8009480:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009484:	f104 0314 	add.w	r3, r4, #20
 8009488:	f019 091f 	ands.w	r9, r9, #31
 800948c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009490:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009494:	d02f      	beq.n	80094f6 <__lshift+0xc6>
 8009496:	f1c9 0e20 	rsb	lr, r9, #32
 800949a:	468a      	mov	sl, r1
 800949c:	f04f 0c00 	mov.w	ip, #0
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	fa02 f209 	lsl.w	r2, r2, r9
 80094a6:	ea42 020c 	orr.w	r2, r2, ip
 80094aa:	f84a 2b04 	str.w	r2, [sl], #4
 80094ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b2:	4298      	cmp	r0, r3
 80094b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80094b8:	d8f2      	bhi.n	80094a0 <__lshift+0x70>
 80094ba:	1b03      	subs	r3, r0, r4
 80094bc:	3b15      	subs	r3, #21
 80094be:	f023 0303 	bic.w	r3, r3, #3
 80094c2:	3304      	adds	r3, #4
 80094c4:	f104 0215 	add.w	r2, r4, #21
 80094c8:	4290      	cmp	r0, r2
 80094ca:	bf38      	it	cc
 80094cc:	2304      	movcc	r3, #4
 80094ce:	f841 c003 	str.w	ip, [r1, r3]
 80094d2:	f1bc 0f00 	cmp.w	ip, #0
 80094d6:	d001      	beq.n	80094dc <__lshift+0xac>
 80094d8:	f108 0602 	add.w	r6, r8, #2
 80094dc:	3e01      	subs	r6, #1
 80094de:	4638      	mov	r0, r7
 80094e0:	612e      	str	r6, [r5, #16]
 80094e2:	4621      	mov	r1, r4
 80094e4:	f7ff fd88 	bl	8008ff8 <_Bfree>
 80094e8:	4628      	mov	r0, r5
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80094f2:	3301      	adds	r3, #1
 80094f4:	e7c1      	b.n	800947a <__lshift+0x4a>
 80094f6:	3904      	subs	r1, #4
 80094f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009500:	4298      	cmp	r0, r3
 8009502:	d8f9      	bhi.n	80094f8 <__lshift+0xc8>
 8009504:	e7ea      	b.n	80094dc <__lshift+0xac>
 8009506:	bf00      	nop
 8009508:	0800aad8 	.word	0x0800aad8
 800950c:	0800ab7b 	.word	0x0800ab7b

08009510 <__mcmp>:
 8009510:	b530      	push	{r4, r5, lr}
 8009512:	6902      	ldr	r2, [r0, #16]
 8009514:	690c      	ldr	r4, [r1, #16]
 8009516:	1b12      	subs	r2, r2, r4
 8009518:	d10e      	bne.n	8009538 <__mcmp+0x28>
 800951a:	f100 0314 	add.w	r3, r0, #20
 800951e:	3114      	adds	r1, #20
 8009520:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009524:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009528:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800952c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009530:	42a5      	cmp	r5, r4
 8009532:	d003      	beq.n	800953c <__mcmp+0x2c>
 8009534:	d305      	bcc.n	8009542 <__mcmp+0x32>
 8009536:	2201      	movs	r2, #1
 8009538:	4610      	mov	r0, r2
 800953a:	bd30      	pop	{r4, r5, pc}
 800953c:	4283      	cmp	r3, r0
 800953e:	d3f3      	bcc.n	8009528 <__mcmp+0x18>
 8009540:	e7fa      	b.n	8009538 <__mcmp+0x28>
 8009542:	f04f 32ff 	mov.w	r2, #4294967295
 8009546:	e7f7      	b.n	8009538 <__mcmp+0x28>

08009548 <__mdiff>:
 8009548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	460c      	mov	r4, r1
 800954e:	4606      	mov	r6, r0
 8009550:	4611      	mov	r1, r2
 8009552:	4620      	mov	r0, r4
 8009554:	4690      	mov	r8, r2
 8009556:	f7ff ffdb 	bl	8009510 <__mcmp>
 800955a:	1e05      	subs	r5, r0, #0
 800955c:	d110      	bne.n	8009580 <__mdiff+0x38>
 800955e:	4629      	mov	r1, r5
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff fd09 	bl	8008f78 <_Balloc>
 8009566:	b930      	cbnz	r0, 8009576 <__mdiff+0x2e>
 8009568:	4b3a      	ldr	r3, [pc, #232]	; (8009654 <__mdiff+0x10c>)
 800956a:	4602      	mov	r2, r0
 800956c:	f240 2132 	movw	r1, #562	; 0x232
 8009570:	4839      	ldr	r0, [pc, #228]	; (8009658 <__mdiff+0x110>)
 8009572:	f000 faa7 	bl	8009ac4 <__assert_func>
 8009576:	2301      	movs	r3, #1
 8009578:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800957c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009580:	bfa4      	itt	ge
 8009582:	4643      	movge	r3, r8
 8009584:	46a0      	movge	r8, r4
 8009586:	4630      	mov	r0, r6
 8009588:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800958c:	bfa6      	itte	ge
 800958e:	461c      	movge	r4, r3
 8009590:	2500      	movge	r5, #0
 8009592:	2501      	movlt	r5, #1
 8009594:	f7ff fcf0 	bl	8008f78 <_Balloc>
 8009598:	b920      	cbnz	r0, 80095a4 <__mdiff+0x5c>
 800959a:	4b2e      	ldr	r3, [pc, #184]	; (8009654 <__mdiff+0x10c>)
 800959c:	4602      	mov	r2, r0
 800959e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095a2:	e7e5      	b.n	8009570 <__mdiff+0x28>
 80095a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095a8:	6926      	ldr	r6, [r4, #16]
 80095aa:	60c5      	str	r5, [r0, #12]
 80095ac:	f104 0914 	add.w	r9, r4, #20
 80095b0:	f108 0514 	add.w	r5, r8, #20
 80095b4:	f100 0e14 	add.w	lr, r0, #20
 80095b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80095bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095c0:	f108 0210 	add.w	r2, r8, #16
 80095c4:	46f2      	mov	sl, lr
 80095c6:	2100      	movs	r1, #0
 80095c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80095cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095d0:	fa1f f883 	uxth.w	r8, r3
 80095d4:	fa11 f18b 	uxtah	r1, r1, fp
 80095d8:	0c1b      	lsrs	r3, r3, #16
 80095da:	eba1 0808 	sub.w	r8, r1, r8
 80095de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095e6:	fa1f f888 	uxth.w	r8, r8
 80095ea:	1419      	asrs	r1, r3, #16
 80095ec:	454e      	cmp	r6, r9
 80095ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80095f2:	f84a 3b04 	str.w	r3, [sl], #4
 80095f6:	d8e7      	bhi.n	80095c8 <__mdiff+0x80>
 80095f8:	1b33      	subs	r3, r6, r4
 80095fa:	3b15      	subs	r3, #21
 80095fc:	f023 0303 	bic.w	r3, r3, #3
 8009600:	3304      	adds	r3, #4
 8009602:	3415      	adds	r4, #21
 8009604:	42a6      	cmp	r6, r4
 8009606:	bf38      	it	cc
 8009608:	2304      	movcc	r3, #4
 800960a:	441d      	add	r5, r3
 800960c:	4473      	add	r3, lr
 800960e:	469e      	mov	lr, r3
 8009610:	462e      	mov	r6, r5
 8009612:	4566      	cmp	r6, ip
 8009614:	d30e      	bcc.n	8009634 <__mdiff+0xec>
 8009616:	f10c 0203 	add.w	r2, ip, #3
 800961a:	1b52      	subs	r2, r2, r5
 800961c:	f022 0203 	bic.w	r2, r2, #3
 8009620:	3d03      	subs	r5, #3
 8009622:	45ac      	cmp	ip, r5
 8009624:	bf38      	it	cc
 8009626:	2200      	movcc	r2, #0
 8009628:	441a      	add	r2, r3
 800962a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800962e:	b17b      	cbz	r3, 8009650 <__mdiff+0x108>
 8009630:	6107      	str	r7, [r0, #16]
 8009632:	e7a3      	b.n	800957c <__mdiff+0x34>
 8009634:	f856 8b04 	ldr.w	r8, [r6], #4
 8009638:	fa11 f288 	uxtah	r2, r1, r8
 800963c:	1414      	asrs	r4, r2, #16
 800963e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009642:	b292      	uxth	r2, r2
 8009644:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009648:	f84e 2b04 	str.w	r2, [lr], #4
 800964c:	1421      	asrs	r1, r4, #16
 800964e:	e7e0      	b.n	8009612 <__mdiff+0xca>
 8009650:	3f01      	subs	r7, #1
 8009652:	e7ea      	b.n	800962a <__mdiff+0xe2>
 8009654:	0800aad8 	.word	0x0800aad8
 8009658:	0800ab7b 	.word	0x0800ab7b

0800965c <__ulp>:
 800965c:	b082      	sub	sp, #8
 800965e:	ed8d 0b00 	vstr	d0, [sp]
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	4912      	ldr	r1, [pc, #72]	; (80096b0 <__ulp+0x54>)
 8009666:	4019      	ands	r1, r3
 8009668:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800966c:	2900      	cmp	r1, #0
 800966e:	dd05      	ble.n	800967c <__ulp+0x20>
 8009670:	2200      	movs	r2, #0
 8009672:	460b      	mov	r3, r1
 8009674:	ec43 2b10 	vmov	d0, r2, r3
 8009678:	b002      	add	sp, #8
 800967a:	4770      	bx	lr
 800967c:	4249      	negs	r1, r1
 800967e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009682:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	da04      	bge.n	800969a <__ulp+0x3e>
 8009690:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009694:	fa41 f300 	asr.w	r3, r1, r0
 8009698:	e7ec      	b.n	8009674 <__ulp+0x18>
 800969a:	f1a0 0114 	sub.w	r1, r0, #20
 800969e:	291e      	cmp	r1, #30
 80096a0:	bfda      	itte	le
 80096a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80096a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80096aa:	2101      	movgt	r1, #1
 80096ac:	460a      	mov	r2, r1
 80096ae:	e7e1      	b.n	8009674 <__ulp+0x18>
 80096b0:	7ff00000 	.word	0x7ff00000

080096b4 <__b2d>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	6905      	ldr	r5, [r0, #16]
 80096b8:	f100 0714 	add.w	r7, r0, #20
 80096bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80096c0:	1f2e      	subs	r6, r5, #4
 80096c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80096c6:	4620      	mov	r0, r4
 80096c8:	f7ff fd48 	bl	800915c <__hi0bits>
 80096cc:	f1c0 0320 	rsb	r3, r0, #32
 80096d0:	280a      	cmp	r0, #10
 80096d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009750 <__b2d+0x9c>
 80096d6:	600b      	str	r3, [r1, #0]
 80096d8:	dc14      	bgt.n	8009704 <__b2d+0x50>
 80096da:	f1c0 0e0b 	rsb	lr, r0, #11
 80096de:	fa24 f10e 	lsr.w	r1, r4, lr
 80096e2:	42b7      	cmp	r7, r6
 80096e4:	ea41 030c 	orr.w	r3, r1, ip
 80096e8:	bf34      	ite	cc
 80096ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80096ee:	2100      	movcs	r1, #0
 80096f0:	3015      	adds	r0, #21
 80096f2:	fa04 f000 	lsl.w	r0, r4, r0
 80096f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80096fa:	ea40 0201 	orr.w	r2, r0, r1
 80096fe:	ec43 2b10 	vmov	d0, r2, r3
 8009702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009704:	42b7      	cmp	r7, r6
 8009706:	bf3a      	itte	cc
 8009708:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800970c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009710:	2100      	movcs	r1, #0
 8009712:	380b      	subs	r0, #11
 8009714:	d017      	beq.n	8009746 <__b2d+0x92>
 8009716:	f1c0 0c20 	rsb	ip, r0, #32
 800971a:	fa04 f500 	lsl.w	r5, r4, r0
 800971e:	42be      	cmp	r6, r7
 8009720:	fa21 f40c 	lsr.w	r4, r1, ip
 8009724:	ea45 0504 	orr.w	r5, r5, r4
 8009728:	bf8c      	ite	hi
 800972a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800972e:	2400      	movls	r4, #0
 8009730:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009734:	fa01 f000 	lsl.w	r0, r1, r0
 8009738:	fa24 f40c 	lsr.w	r4, r4, ip
 800973c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009740:	ea40 0204 	orr.w	r2, r0, r4
 8009744:	e7db      	b.n	80096fe <__b2d+0x4a>
 8009746:	ea44 030c 	orr.w	r3, r4, ip
 800974a:	460a      	mov	r2, r1
 800974c:	e7d7      	b.n	80096fe <__b2d+0x4a>
 800974e:	bf00      	nop
 8009750:	3ff00000 	.word	0x3ff00000

08009754 <__d2b>:
 8009754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009758:	4689      	mov	r9, r1
 800975a:	2101      	movs	r1, #1
 800975c:	ec57 6b10 	vmov	r6, r7, d0
 8009760:	4690      	mov	r8, r2
 8009762:	f7ff fc09 	bl	8008f78 <_Balloc>
 8009766:	4604      	mov	r4, r0
 8009768:	b930      	cbnz	r0, 8009778 <__d2b+0x24>
 800976a:	4602      	mov	r2, r0
 800976c:	4b25      	ldr	r3, [pc, #148]	; (8009804 <__d2b+0xb0>)
 800976e:	4826      	ldr	r0, [pc, #152]	; (8009808 <__d2b+0xb4>)
 8009770:	f240 310a 	movw	r1, #778	; 0x30a
 8009774:	f000 f9a6 	bl	8009ac4 <__assert_func>
 8009778:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800977c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009780:	bb35      	cbnz	r5, 80097d0 <__d2b+0x7c>
 8009782:	2e00      	cmp	r6, #0
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	d028      	beq.n	80097da <__d2b+0x86>
 8009788:	4668      	mov	r0, sp
 800978a:	9600      	str	r6, [sp, #0]
 800978c:	f7ff fd06 	bl	800919c <__lo0bits>
 8009790:	9900      	ldr	r1, [sp, #0]
 8009792:	b300      	cbz	r0, 80097d6 <__d2b+0x82>
 8009794:	9a01      	ldr	r2, [sp, #4]
 8009796:	f1c0 0320 	rsb	r3, r0, #32
 800979a:	fa02 f303 	lsl.w	r3, r2, r3
 800979e:	430b      	orrs	r3, r1
 80097a0:	40c2      	lsrs	r2, r0
 80097a2:	6163      	str	r3, [r4, #20]
 80097a4:	9201      	str	r2, [sp, #4]
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	61a3      	str	r3, [r4, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bf14      	ite	ne
 80097ae:	2202      	movne	r2, #2
 80097b0:	2201      	moveq	r2, #1
 80097b2:	6122      	str	r2, [r4, #16]
 80097b4:	b1d5      	cbz	r5, 80097ec <__d2b+0x98>
 80097b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097ba:	4405      	add	r5, r0
 80097bc:	f8c9 5000 	str.w	r5, [r9]
 80097c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097c4:	f8c8 0000 	str.w	r0, [r8]
 80097c8:	4620      	mov	r0, r4
 80097ca:	b003      	add	sp, #12
 80097cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097d4:	e7d5      	b.n	8009782 <__d2b+0x2e>
 80097d6:	6161      	str	r1, [r4, #20]
 80097d8:	e7e5      	b.n	80097a6 <__d2b+0x52>
 80097da:	a801      	add	r0, sp, #4
 80097dc:	f7ff fcde 	bl	800919c <__lo0bits>
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	6163      	str	r3, [r4, #20]
 80097e4:	2201      	movs	r2, #1
 80097e6:	6122      	str	r2, [r4, #16]
 80097e8:	3020      	adds	r0, #32
 80097ea:	e7e3      	b.n	80097b4 <__d2b+0x60>
 80097ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097f4:	f8c9 0000 	str.w	r0, [r9]
 80097f8:	6918      	ldr	r0, [r3, #16]
 80097fa:	f7ff fcaf 	bl	800915c <__hi0bits>
 80097fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009802:	e7df      	b.n	80097c4 <__d2b+0x70>
 8009804:	0800aad8 	.word	0x0800aad8
 8009808:	0800ab7b 	.word	0x0800ab7b

0800980c <__ratio>:
 800980c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4688      	mov	r8, r1
 8009812:	4669      	mov	r1, sp
 8009814:	4681      	mov	r9, r0
 8009816:	f7ff ff4d 	bl	80096b4 <__b2d>
 800981a:	a901      	add	r1, sp, #4
 800981c:	4640      	mov	r0, r8
 800981e:	ec55 4b10 	vmov	r4, r5, d0
 8009822:	f7ff ff47 	bl	80096b4 <__b2d>
 8009826:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800982a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800982e:	eba3 0c02 	sub.w	ip, r3, r2
 8009832:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009836:	1a9b      	subs	r3, r3, r2
 8009838:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800983c:	ec51 0b10 	vmov	r0, r1, d0
 8009840:	2b00      	cmp	r3, #0
 8009842:	bfd6      	itet	le
 8009844:	460a      	movle	r2, r1
 8009846:	462a      	movgt	r2, r5
 8009848:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800984c:	468b      	mov	fp, r1
 800984e:	462f      	mov	r7, r5
 8009850:	bfd4      	ite	le
 8009852:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009856:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800985a:	4620      	mov	r0, r4
 800985c:	ee10 2a10 	vmov	r2, s0
 8009860:	465b      	mov	r3, fp
 8009862:	4639      	mov	r1, r7
 8009864:	f7f6 fff2 	bl	800084c <__aeabi_ddiv>
 8009868:	ec41 0b10 	vmov	d0, r0, r1
 800986c:	b003      	add	sp, #12
 800986e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009872 <__copybits>:
 8009872:	3901      	subs	r1, #1
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	1149      	asrs	r1, r1, #5
 8009878:	6914      	ldr	r4, [r2, #16]
 800987a:	3101      	adds	r1, #1
 800987c:	f102 0314 	add.w	r3, r2, #20
 8009880:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009884:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009888:	1f05      	subs	r5, r0, #4
 800988a:	42a3      	cmp	r3, r4
 800988c:	d30c      	bcc.n	80098a8 <__copybits+0x36>
 800988e:	1aa3      	subs	r3, r4, r2
 8009890:	3b11      	subs	r3, #17
 8009892:	f023 0303 	bic.w	r3, r3, #3
 8009896:	3211      	adds	r2, #17
 8009898:	42a2      	cmp	r2, r4
 800989a:	bf88      	it	hi
 800989c:	2300      	movhi	r3, #0
 800989e:	4418      	add	r0, r3
 80098a0:	2300      	movs	r3, #0
 80098a2:	4288      	cmp	r0, r1
 80098a4:	d305      	bcc.n	80098b2 <__copybits+0x40>
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80098ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80098b0:	e7eb      	b.n	800988a <__copybits+0x18>
 80098b2:	f840 3b04 	str.w	r3, [r0], #4
 80098b6:	e7f4      	b.n	80098a2 <__copybits+0x30>

080098b8 <__any_on>:
 80098b8:	f100 0214 	add.w	r2, r0, #20
 80098bc:	6900      	ldr	r0, [r0, #16]
 80098be:	114b      	asrs	r3, r1, #5
 80098c0:	4298      	cmp	r0, r3
 80098c2:	b510      	push	{r4, lr}
 80098c4:	db11      	blt.n	80098ea <__any_on+0x32>
 80098c6:	dd0a      	ble.n	80098de <__any_on+0x26>
 80098c8:	f011 011f 	ands.w	r1, r1, #31
 80098cc:	d007      	beq.n	80098de <__any_on+0x26>
 80098ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098d2:	fa24 f001 	lsr.w	r0, r4, r1
 80098d6:	fa00 f101 	lsl.w	r1, r0, r1
 80098da:	428c      	cmp	r4, r1
 80098dc:	d10b      	bne.n	80098f6 <__any_on+0x3e>
 80098de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d803      	bhi.n	80098ee <__any_on+0x36>
 80098e6:	2000      	movs	r0, #0
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	4603      	mov	r3, r0
 80098ec:	e7f7      	b.n	80098de <__any_on+0x26>
 80098ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098f2:	2900      	cmp	r1, #0
 80098f4:	d0f5      	beq.n	80098e2 <__any_on+0x2a>
 80098f6:	2001      	movs	r0, #1
 80098f8:	e7f6      	b.n	80098e8 <__any_on+0x30>

080098fa <_calloc_r>:
 80098fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098fc:	fba1 2402 	umull	r2, r4, r1, r2
 8009900:	b94c      	cbnz	r4, 8009916 <_calloc_r+0x1c>
 8009902:	4611      	mov	r1, r2
 8009904:	9201      	str	r2, [sp, #4]
 8009906:	f000 f82f 	bl	8009968 <_malloc_r>
 800990a:	9a01      	ldr	r2, [sp, #4]
 800990c:	4605      	mov	r5, r0
 800990e:	b930      	cbnz	r0, 800991e <_calloc_r+0x24>
 8009910:	4628      	mov	r0, r5
 8009912:	b003      	add	sp, #12
 8009914:	bd30      	pop	{r4, r5, pc}
 8009916:	220c      	movs	r2, #12
 8009918:	6002      	str	r2, [r0, #0]
 800991a:	2500      	movs	r5, #0
 800991c:	e7f8      	b.n	8009910 <_calloc_r+0x16>
 800991e:	4621      	mov	r1, r4
 8009920:	f7fe f972 	bl	8007c08 <memset>
 8009924:	e7f4      	b.n	8009910 <_calloc_r+0x16>
	...

08009928 <sbrk_aligned>:
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	4e0e      	ldr	r6, [pc, #56]	; (8009964 <sbrk_aligned+0x3c>)
 800992c:	460c      	mov	r4, r1
 800992e:	6831      	ldr	r1, [r6, #0]
 8009930:	4605      	mov	r5, r0
 8009932:	b911      	cbnz	r1, 800993a <sbrk_aligned+0x12>
 8009934:	f000 f894 	bl	8009a60 <_sbrk_r>
 8009938:	6030      	str	r0, [r6, #0]
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f000 f88f 	bl	8009a60 <_sbrk_r>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	d00a      	beq.n	800995c <sbrk_aligned+0x34>
 8009946:	1cc4      	adds	r4, r0, #3
 8009948:	f024 0403 	bic.w	r4, r4, #3
 800994c:	42a0      	cmp	r0, r4
 800994e:	d007      	beq.n	8009960 <sbrk_aligned+0x38>
 8009950:	1a21      	subs	r1, r4, r0
 8009952:	4628      	mov	r0, r5
 8009954:	f000 f884 	bl	8009a60 <_sbrk_r>
 8009958:	3001      	adds	r0, #1
 800995a:	d101      	bne.n	8009960 <sbrk_aligned+0x38>
 800995c:	f04f 34ff 	mov.w	r4, #4294967295
 8009960:	4620      	mov	r0, r4
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	200016f0 	.word	0x200016f0

08009968 <_malloc_r>:
 8009968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996c:	1ccd      	adds	r5, r1, #3
 800996e:	f025 0503 	bic.w	r5, r5, #3
 8009972:	3508      	adds	r5, #8
 8009974:	2d0c      	cmp	r5, #12
 8009976:	bf38      	it	cc
 8009978:	250c      	movcc	r5, #12
 800997a:	2d00      	cmp	r5, #0
 800997c:	4607      	mov	r7, r0
 800997e:	db01      	blt.n	8009984 <_malloc_r+0x1c>
 8009980:	42a9      	cmp	r1, r5
 8009982:	d905      	bls.n	8009990 <_malloc_r+0x28>
 8009984:	230c      	movs	r3, #12
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	2600      	movs	r6, #0
 800998a:	4630      	mov	r0, r6
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	4e2e      	ldr	r6, [pc, #184]	; (8009a4c <_malloc_r+0xe4>)
 8009992:	f000 f8cf 	bl	8009b34 <__malloc_lock>
 8009996:	6833      	ldr	r3, [r6, #0]
 8009998:	461c      	mov	r4, r3
 800999a:	bb34      	cbnz	r4, 80099ea <_malloc_r+0x82>
 800999c:	4629      	mov	r1, r5
 800999e:	4638      	mov	r0, r7
 80099a0:	f7ff ffc2 	bl	8009928 <sbrk_aligned>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	4604      	mov	r4, r0
 80099a8:	d14d      	bne.n	8009a46 <_malloc_r+0xde>
 80099aa:	6834      	ldr	r4, [r6, #0]
 80099ac:	4626      	mov	r6, r4
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	d140      	bne.n	8009a34 <_malloc_r+0xcc>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	4631      	mov	r1, r6
 80099b6:	4638      	mov	r0, r7
 80099b8:	eb04 0803 	add.w	r8, r4, r3
 80099bc:	f000 f850 	bl	8009a60 <_sbrk_r>
 80099c0:	4580      	cmp	r8, r0
 80099c2:	d13a      	bne.n	8009a3a <_malloc_r+0xd2>
 80099c4:	6821      	ldr	r1, [r4, #0]
 80099c6:	3503      	adds	r5, #3
 80099c8:	1a6d      	subs	r5, r5, r1
 80099ca:	f025 0503 	bic.w	r5, r5, #3
 80099ce:	3508      	adds	r5, #8
 80099d0:	2d0c      	cmp	r5, #12
 80099d2:	bf38      	it	cc
 80099d4:	250c      	movcc	r5, #12
 80099d6:	4629      	mov	r1, r5
 80099d8:	4638      	mov	r0, r7
 80099da:	f7ff ffa5 	bl	8009928 <sbrk_aligned>
 80099de:	3001      	adds	r0, #1
 80099e0:	d02b      	beq.n	8009a3a <_malloc_r+0xd2>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	442b      	add	r3, r5
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	e00e      	b.n	8009a08 <_malloc_r+0xa0>
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	1b52      	subs	r2, r2, r5
 80099ee:	d41e      	bmi.n	8009a2e <_malloc_r+0xc6>
 80099f0:	2a0b      	cmp	r2, #11
 80099f2:	d916      	bls.n	8009a22 <_malloc_r+0xba>
 80099f4:	1961      	adds	r1, r4, r5
 80099f6:	42a3      	cmp	r3, r4
 80099f8:	6025      	str	r5, [r4, #0]
 80099fa:	bf18      	it	ne
 80099fc:	6059      	strne	r1, [r3, #4]
 80099fe:	6863      	ldr	r3, [r4, #4]
 8009a00:	bf08      	it	eq
 8009a02:	6031      	streq	r1, [r6, #0]
 8009a04:	5162      	str	r2, [r4, r5]
 8009a06:	604b      	str	r3, [r1, #4]
 8009a08:	4638      	mov	r0, r7
 8009a0a:	f104 060b 	add.w	r6, r4, #11
 8009a0e:	f000 f897 	bl	8009b40 <__malloc_unlock>
 8009a12:	f026 0607 	bic.w	r6, r6, #7
 8009a16:	1d23      	adds	r3, r4, #4
 8009a18:	1af2      	subs	r2, r6, r3
 8009a1a:	d0b6      	beq.n	800998a <_malloc_r+0x22>
 8009a1c:	1b9b      	subs	r3, r3, r6
 8009a1e:	50a3      	str	r3, [r4, r2]
 8009a20:	e7b3      	b.n	800998a <_malloc_r+0x22>
 8009a22:	6862      	ldr	r2, [r4, #4]
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	bf0c      	ite	eq
 8009a28:	6032      	streq	r2, [r6, #0]
 8009a2a:	605a      	strne	r2, [r3, #4]
 8009a2c:	e7ec      	b.n	8009a08 <_malloc_r+0xa0>
 8009a2e:	4623      	mov	r3, r4
 8009a30:	6864      	ldr	r4, [r4, #4]
 8009a32:	e7b2      	b.n	800999a <_malloc_r+0x32>
 8009a34:	4634      	mov	r4, r6
 8009a36:	6876      	ldr	r6, [r6, #4]
 8009a38:	e7b9      	b.n	80099ae <_malloc_r+0x46>
 8009a3a:	230c      	movs	r3, #12
 8009a3c:	603b      	str	r3, [r7, #0]
 8009a3e:	4638      	mov	r0, r7
 8009a40:	f000 f87e 	bl	8009b40 <__malloc_unlock>
 8009a44:	e7a1      	b.n	800998a <_malloc_r+0x22>
 8009a46:	6025      	str	r5, [r4, #0]
 8009a48:	e7de      	b.n	8009a08 <_malloc_r+0xa0>
 8009a4a:	bf00      	nop
 8009a4c:	200016ec 	.word	0x200016ec

08009a50 <nan>:
 8009a50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a58 <nan+0x8>
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	00000000 	.word	0x00000000
 8009a5c:	7ff80000 	.word	0x7ff80000

08009a60 <_sbrk_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d06      	ldr	r5, [pc, #24]	; (8009a7c <_sbrk_r+0x1c>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	f7f7 fffe 	bl	8001a6c <_sbrk>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_sbrk_r+0x1a>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_sbrk_r+0x1a>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	200016f4 	.word	0x200016f4

08009a80 <strncmp>:
 8009a80:	b510      	push	{r4, lr}
 8009a82:	b17a      	cbz	r2, 8009aa4 <strncmp+0x24>
 8009a84:	4603      	mov	r3, r0
 8009a86:	3901      	subs	r1, #1
 8009a88:	1884      	adds	r4, r0, r2
 8009a8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009a92:	4290      	cmp	r0, r2
 8009a94:	d101      	bne.n	8009a9a <strncmp+0x1a>
 8009a96:	42a3      	cmp	r3, r4
 8009a98:	d101      	bne.n	8009a9e <strncmp+0x1e>
 8009a9a:	1a80      	subs	r0, r0, r2
 8009a9c:	bd10      	pop	{r4, pc}
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d1f3      	bne.n	8009a8a <strncmp+0xa>
 8009aa2:	e7fa      	b.n	8009a9a <strncmp+0x1a>
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	e7f9      	b.n	8009a9c <strncmp+0x1c>

08009aa8 <__ascii_wctomb>:
 8009aa8:	b149      	cbz	r1, 8009abe <__ascii_wctomb+0x16>
 8009aaa:	2aff      	cmp	r2, #255	; 0xff
 8009aac:	bf85      	ittet	hi
 8009aae:	238a      	movhi	r3, #138	; 0x8a
 8009ab0:	6003      	strhi	r3, [r0, #0]
 8009ab2:	700a      	strbls	r2, [r1, #0]
 8009ab4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ab8:	bf98      	it	ls
 8009aba:	2001      	movls	r0, #1
 8009abc:	4770      	bx	lr
 8009abe:	4608      	mov	r0, r1
 8009ac0:	4770      	bx	lr
	...

08009ac4 <__assert_func>:
 8009ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ac6:	4614      	mov	r4, r2
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <__assert_func+0x2c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4605      	mov	r5, r0
 8009ad0:	68d8      	ldr	r0, [r3, #12]
 8009ad2:	b14c      	cbz	r4, 8009ae8 <__assert_func+0x24>
 8009ad4:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <__assert_func+0x30>)
 8009ad6:	9100      	str	r1, [sp, #0]
 8009ad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009adc:	4906      	ldr	r1, [pc, #24]	; (8009af8 <__assert_func+0x34>)
 8009ade:	462b      	mov	r3, r5
 8009ae0:	f000 f80e 	bl	8009b00 <fiprintf>
 8009ae4:	f000 fc2c 	bl	800a340 <abort>
 8009ae8:	4b04      	ldr	r3, [pc, #16]	; (8009afc <__assert_func+0x38>)
 8009aea:	461c      	mov	r4, r3
 8009aec:	e7f3      	b.n	8009ad6 <__assert_func+0x12>
 8009aee:	bf00      	nop
 8009af0:	200001a8 	.word	0x200001a8
 8009af4:	0800acd4 	.word	0x0800acd4
 8009af8:	0800ace1 	.word	0x0800ace1
 8009afc:	0800ad0f 	.word	0x0800ad0f

08009b00 <fiprintf>:
 8009b00:	b40e      	push	{r1, r2, r3}
 8009b02:	b503      	push	{r0, r1, lr}
 8009b04:	4601      	mov	r1, r0
 8009b06:	ab03      	add	r3, sp, #12
 8009b08:	4805      	ldr	r0, [pc, #20]	; (8009b20 <fiprintf+0x20>)
 8009b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0e:	6800      	ldr	r0, [r0, #0]
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	f000 f891 	bl	8009c38 <_vfiprintf_r>
 8009b16:	b002      	add	sp, #8
 8009b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b1c:	b003      	add	sp, #12
 8009b1e:	4770      	bx	lr
 8009b20:	200001a8 	.word	0x200001a8

08009b24 <malloc>:
 8009b24:	4b02      	ldr	r3, [pc, #8]	; (8009b30 <malloc+0xc>)
 8009b26:	4601      	mov	r1, r0
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	f7ff bf1d 	b.w	8009968 <_malloc_r>
 8009b2e:	bf00      	nop
 8009b30:	200001a8 	.word	0x200001a8

08009b34 <__malloc_lock>:
 8009b34:	4801      	ldr	r0, [pc, #4]	; (8009b3c <__malloc_lock+0x8>)
 8009b36:	f000 bdc3 	b.w	800a6c0 <__retarget_lock_acquire_recursive>
 8009b3a:	bf00      	nop
 8009b3c:	200016f8 	.word	0x200016f8

08009b40 <__malloc_unlock>:
 8009b40:	4801      	ldr	r0, [pc, #4]	; (8009b48 <__malloc_unlock+0x8>)
 8009b42:	f000 bdbe 	b.w	800a6c2 <__retarget_lock_release_recursive>
 8009b46:	bf00      	nop
 8009b48:	200016f8 	.word	0x200016f8

08009b4c <_free_r>:
 8009b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b4e:	2900      	cmp	r1, #0
 8009b50:	d044      	beq.n	8009bdc <_free_r+0x90>
 8009b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b56:	9001      	str	r0, [sp, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b5e:	bfb8      	it	lt
 8009b60:	18e4      	addlt	r4, r4, r3
 8009b62:	f7ff ffe7 	bl	8009b34 <__malloc_lock>
 8009b66:	4a1e      	ldr	r2, [pc, #120]	; (8009be0 <_free_r+0x94>)
 8009b68:	9801      	ldr	r0, [sp, #4]
 8009b6a:	6813      	ldr	r3, [r2, #0]
 8009b6c:	b933      	cbnz	r3, 8009b7c <_free_r+0x30>
 8009b6e:	6063      	str	r3, [r4, #4]
 8009b70:	6014      	str	r4, [r2, #0]
 8009b72:	b003      	add	sp, #12
 8009b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b78:	f7ff bfe2 	b.w	8009b40 <__malloc_unlock>
 8009b7c:	42a3      	cmp	r3, r4
 8009b7e:	d908      	bls.n	8009b92 <_free_r+0x46>
 8009b80:	6825      	ldr	r5, [r4, #0]
 8009b82:	1961      	adds	r1, r4, r5
 8009b84:	428b      	cmp	r3, r1
 8009b86:	bf01      	itttt	eq
 8009b88:	6819      	ldreq	r1, [r3, #0]
 8009b8a:	685b      	ldreq	r3, [r3, #4]
 8009b8c:	1949      	addeq	r1, r1, r5
 8009b8e:	6021      	streq	r1, [r4, #0]
 8009b90:	e7ed      	b.n	8009b6e <_free_r+0x22>
 8009b92:	461a      	mov	r2, r3
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	b10b      	cbz	r3, 8009b9c <_free_r+0x50>
 8009b98:	42a3      	cmp	r3, r4
 8009b9a:	d9fa      	bls.n	8009b92 <_free_r+0x46>
 8009b9c:	6811      	ldr	r1, [r2, #0]
 8009b9e:	1855      	adds	r5, r2, r1
 8009ba0:	42a5      	cmp	r5, r4
 8009ba2:	d10b      	bne.n	8009bbc <_free_r+0x70>
 8009ba4:	6824      	ldr	r4, [r4, #0]
 8009ba6:	4421      	add	r1, r4
 8009ba8:	1854      	adds	r4, r2, r1
 8009baa:	42a3      	cmp	r3, r4
 8009bac:	6011      	str	r1, [r2, #0]
 8009bae:	d1e0      	bne.n	8009b72 <_free_r+0x26>
 8009bb0:	681c      	ldr	r4, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	6053      	str	r3, [r2, #4]
 8009bb6:	4421      	add	r1, r4
 8009bb8:	6011      	str	r1, [r2, #0]
 8009bba:	e7da      	b.n	8009b72 <_free_r+0x26>
 8009bbc:	d902      	bls.n	8009bc4 <_free_r+0x78>
 8009bbe:	230c      	movs	r3, #12
 8009bc0:	6003      	str	r3, [r0, #0]
 8009bc2:	e7d6      	b.n	8009b72 <_free_r+0x26>
 8009bc4:	6825      	ldr	r5, [r4, #0]
 8009bc6:	1961      	adds	r1, r4, r5
 8009bc8:	428b      	cmp	r3, r1
 8009bca:	bf04      	itt	eq
 8009bcc:	6819      	ldreq	r1, [r3, #0]
 8009bce:	685b      	ldreq	r3, [r3, #4]
 8009bd0:	6063      	str	r3, [r4, #4]
 8009bd2:	bf04      	itt	eq
 8009bd4:	1949      	addeq	r1, r1, r5
 8009bd6:	6021      	streq	r1, [r4, #0]
 8009bd8:	6054      	str	r4, [r2, #4]
 8009bda:	e7ca      	b.n	8009b72 <_free_r+0x26>
 8009bdc:	b003      	add	sp, #12
 8009bde:	bd30      	pop	{r4, r5, pc}
 8009be0:	200016ec 	.word	0x200016ec

08009be4 <__sfputc_r>:
 8009be4:	6893      	ldr	r3, [r2, #8]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	b410      	push	{r4}
 8009bec:	6093      	str	r3, [r2, #8]
 8009bee:	da08      	bge.n	8009c02 <__sfputc_r+0x1e>
 8009bf0:	6994      	ldr	r4, [r2, #24]
 8009bf2:	42a3      	cmp	r3, r4
 8009bf4:	db01      	blt.n	8009bfa <__sfputc_r+0x16>
 8009bf6:	290a      	cmp	r1, #10
 8009bf8:	d103      	bne.n	8009c02 <__sfputc_r+0x1e>
 8009bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bfe:	f000 badf 	b.w	800a1c0 <__swbuf_r>
 8009c02:	6813      	ldr	r3, [r2, #0]
 8009c04:	1c58      	adds	r0, r3, #1
 8009c06:	6010      	str	r0, [r2, #0]
 8009c08:	7019      	strb	r1, [r3, #0]
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <__sfputs_r>:
 8009c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c14:	4606      	mov	r6, r0
 8009c16:	460f      	mov	r7, r1
 8009c18:	4614      	mov	r4, r2
 8009c1a:	18d5      	adds	r5, r2, r3
 8009c1c:	42ac      	cmp	r4, r5
 8009c1e:	d101      	bne.n	8009c24 <__sfputs_r+0x12>
 8009c20:	2000      	movs	r0, #0
 8009c22:	e007      	b.n	8009c34 <__sfputs_r+0x22>
 8009c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c28:	463a      	mov	r2, r7
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f7ff ffda 	bl	8009be4 <__sfputc_r>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d1f3      	bne.n	8009c1c <__sfputs_r+0xa>
 8009c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c38 <_vfiprintf_r>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	b09d      	sub	sp, #116	; 0x74
 8009c40:	4614      	mov	r4, r2
 8009c42:	4698      	mov	r8, r3
 8009c44:	4606      	mov	r6, r0
 8009c46:	b118      	cbz	r0, 8009c50 <_vfiprintf_r+0x18>
 8009c48:	6983      	ldr	r3, [r0, #24]
 8009c4a:	b90b      	cbnz	r3, 8009c50 <_vfiprintf_r+0x18>
 8009c4c:	f000 fc9a 	bl	800a584 <__sinit>
 8009c50:	4b89      	ldr	r3, [pc, #548]	; (8009e78 <_vfiprintf_r+0x240>)
 8009c52:	429d      	cmp	r5, r3
 8009c54:	d11b      	bne.n	8009c8e <_vfiprintf_r+0x56>
 8009c56:	6875      	ldr	r5, [r6, #4]
 8009c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c5a:	07d9      	lsls	r1, r3, #31
 8009c5c:	d405      	bmi.n	8009c6a <_vfiprintf_r+0x32>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	059a      	lsls	r2, r3, #22
 8009c62:	d402      	bmi.n	8009c6a <_vfiprintf_r+0x32>
 8009c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c66:	f000 fd2b 	bl	800a6c0 <__retarget_lock_acquire_recursive>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	071b      	lsls	r3, r3, #28
 8009c6e:	d501      	bpl.n	8009c74 <_vfiprintf_r+0x3c>
 8009c70:	692b      	ldr	r3, [r5, #16]
 8009c72:	b9eb      	cbnz	r3, 8009cb0 <_vfiprintf_r+0x78>
 8009c74:	4629      	mov	r1, r5
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 faf4 	bl	800a264 <__swsetup_r>
 8009c7c:	b1c0      	cbz	r0, 8009cb0 <_vfiprintf_r+0x78>
 8009c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c80:	07dc      	lsls	r4, r3, #31
 8009c82:	d50e      	bpl.n	8009ca2 <_vfiprintf_r+0x6a>
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	b01d      	add	sp, #116	; 0x74
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8e:	4b7b      	ldr	r3, [pc, #492]	; (8009e7c <_vfiprintf_r+0x244>)
 8009c90:	429d      	cmp	r5, r3
 8009c92:	d101      	bne.n	8009c98 <_vfiprintf_r+0x60>
 8009c94:	68b5      	ldr	r5, [r6, #8]
 8009c96:	e7df      	b.n	8009c58 <_vfiprintf_r+0x20>
 8009c98:	4b79      	ldr	r3, [pc, #484]	; (8009e80 <_vfiprintf_r+0x248>)
 8009c9a:	429d      	cmp	r5, r3
 8009c9c:	bf08      	it	eq
 8009c9e:	68f5      	ldreq	r5, [r6, #12]
 8009ca0:	e7da      	b.n	8009c58 <_vfiprintf_r+0x20>
 8009ca2:	89ab      	ldrh	r3, [r5, #12]
 8009ca4:	0598      	lsls	r0, r3, #22
 8009ca6:	d4ed      	bmi.n	8009c84 <_vfiprintf_r+0x4c>
 8009ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009caa:	f000 fd0a 	bl	800a6c2 <__retarget_lock_release_recursive>
 8009cae:	e7e9      	b.n	8009c84 <_vfiprintf_r+0x4c>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb4:	2320      	movs	r3, #32
 8009cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cbe:	2330      	movs	r3, #48	; 0x30
 8009cc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e84 <_vfiprintf_r+0x24c>
 8009cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cc8:	f04f 0901 	mov.w	r9, #1
 8009ccc:	4623      	mov	r3, r4
 8009cce:	469a      	mov	sl, r3
 8009cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd4:	b10a      	cbz	r2, 8009cda <_vfiprintf_r+0xa2>
 8009cd6:	2a25      	cmp	r2, #37	; 0x25
 8009cd8:	d1f9      	bne.n	8009cce <_vfiprintf_r+0x96>
 8009cda:	ebba 0b04 	subs.w	fp, sl, r4
 8009cde:	d00b      	beq.n	8009cf8 <_vfiprintf_r+0xc0>
 8009ce0:	465b      	mov	r3, fp
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff ff93 	bl	8009c12 <__sfputs_r>
 8009cec:	3001      	adds	r0, #1
 8009cee:	f000 80aa 	beq.w	8009e46 <_vfiprintf_r+0x20e>
 8009cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf4:	445a      	add	r2, fp
 8009cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8009cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80a2 	beq.w	8009e46 <_vfiprintf_r+0x20e>
 8009d02:	2300      	movs	r3, #0
 8009d04:	f04f 32ff 	mov.w	r2, #4294967295
 8009d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d0c:	f10a 0a01 	add.w	sl, sl, #1
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	9307      	str	r3, [sp, #28]
 8009d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d18:	931a      	str	r3, [sp, #104]	; 0x68
 8009d1a:	4654      	mov	r4, sl
 8009d1c:	2205      	movs	r2, #5
 8009d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d22:	4858      	ldr	r0, [pc, #352]	; (8009e84 <_vfiprintf_r+0x24c>)
 8009d24:	f7f6 fa5c 	bl	80001e0 <memchr>
 8009d28:	9a04      	ldr	r2, [sp, #16]
 8009d2a:	b9d8      	cbnz	r0, 8009d64 <_vfiprintf_r+0x12c>
 8009d2c:	06d1      	lsls	r1, r2, #27
 8009d2e:	bf44      	itt	mi
 8009d30:	2320      	movmi	r3, #32
 8009d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d36:	0713      	lsls	r3, r2, #28
 8009d38:	bf44      	itt	mi
 8009d3a:	232b      	movmi	r3, #43	; 0x2b
 8009d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d40:	f89a 3000 	ldrb.w	r3, [sl]
 8009d44:	2b2a      	cmp	r3, #42	; 0x2a
 8009d46:	d015      	beq.n	8009d74 <_vfiprintf_r+0x13c>
 8009d48:	9a07      	ldr	r2, [sp, #28]
 8009d4a:	4654      	mov	r4, sl
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	f04f 0c0a 	mov.w	ip, #10
 8009d52:	4621      	mov	r1, r4
 8009d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d58:	3b30      	subs	r3, #48	; 0x30
 8009d5a:	2b09      	cmp	r3, #9
 8009d5c:	d94e      	bls.n	8009dfc <_vfiprintf_r+0x1c4>
 8009d5e:	b1b0      	cbz	r0, 8009d8e <_vfiprintf_r+0x156>
 8009d60:	9207      	str	r2, [sp, #28]
 8009d62:	e014      	b.n	8009d8e <_vfiprintf_r+0x156>
 8009d64:	eba0 0308 	sub.w	r3, r0, r8
 8009d68:	fa09 f303 	lsl.w	r3, r9, r3
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	9304      	str	r3, [sp, #16]
 8009d70:	46a2      	mov	sl, r4
 8009d72:	e7d2      	b.n	8009d1a <_vfiprintf_r+0xe2>
 8009d74:	9b03      	ldr	r3, [sp, #12]
 8009d76:	1d19      	adds	r1, r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	9103      	str	r1, [sp, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	bfbb      	ittet	lt
 8009d80:	425b      	neglt	r3, r3
 8009d82:	f042 0202 	orrlt.w	r2, r2, #2
 8009d86:	9307      	strge	r3, [sp, #28]
 8009d88:	9307      	strlt	r3, [sp, #28]
 8009d8a:	bfb8      	it	lt
 8009d8c:	9204      	strlt	r2, [sp, #16]
 8009d8e:	7823      	ldrb	r3, [r4, #0]
 8009d90:	2b2e      	cmp	r3, #46	; 0x2e
 8009d92:	d10c      	bne.n	8009dae <_vfiprintf_r+0x176>
 8009d94:	7863      	ldrb	r3, [r4, #1]
 8009d96:	2b2a      	cmp	r3, #42	; 0x2a
 8009d98:	d135      	bne.n	8009e06 <_vfiprintf_r+0x1ce>
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	1d1a      	adds	r2, r3, #4
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	9203      	str	r2, [sp, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bfb8      	it	lt
 8009da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009daa:	3402      	adds	r4, #2
 8009dac:	9305      	str	r3, [sp, #20]
 8009dae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e94 <_vfiprintf_r+0x25c>
 8009db2:	7821      	ldrb	r1, [r4, #0]
 8009db4:	2203      	movs	r2, #3
 8009db6:	4650      	mov	r0, sl
 8009db8:	f7f6 fa12 	bl	80001e0 <memchr>
 8009dbc:	b140      	cbz	r0, 8009dd0 <_vfiprintf_r+0x198>
 8009dbe:	2340      	movs	r3, #64	; 0x40
 8009dc0:	eba0 000a 	sub.w	r0, r0, sl
 8009dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8009dc8:	9b04      	ldr	r3, [sp, #16]
 8009dca:	4303      	orrs	r3, r0
 8009dcc:	3401      	adds	r4, #1
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd4:	482c      	ldr	r0, [pc, #176]	; (8009e88 <_vfiprintf_r+0x250>)
 8009dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dda:	2206      	movs	r2, #6
 8009ddc:	f7f6 fa00 	bl	80001e0 <memchr>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d03f      	beq.n	8009e64 <_vfiprintf_r+0x22c>
 8009de4:	4b29      	ldr	r3, [pc, #164]	; (8009e8c <_vfiprintf_r+0x254>)
 8009de6:	bb1b      	cbnz	r3, 8009e30 <_vfiprintf_r+0x1f8>
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	3307      	adds	r3, #7
 8009dec:	f023 0307 	bic.w	r3, r3, #7
 8009df0:	3308      	adds	r3, #8
 8009df2:	9303      	str	r3, [sp, #12]
 8009df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df6:	443b      	add	r3, r7
 8009df8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfa:	e767      	b.n	8009ccc <_vfiprintf_r+0x94>
 8009dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e00:	460c      	mov	r4, r1
 8009e02:	2001      	movs	r0, #1
 8009e04:	e7a5      	b.n	8009d52 <_vfiprintf_r+0x11a>
 8009e06:	2300      	movs	r3, #0
 8009e08:	3401      	adds	r4, #1
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	f04f 0c0a 	mov.w	ip, #10
 8009e12:	4620      	mov	r0, r4
 8009e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e18:	3a30      	subs	r2, #48	; 0x30
 8009e1a:	2a09      	cmp	r2, #9
 8009e1c:	d903      	bls.n	8009e26 <_vfiprintf_r+0x1ee>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0c5      	beq.n	8009dae <_vfiprintf_r+0x176>
 8009e22:	9105      	str	r1, [sp, #20]
 8009e24:	e7c3      	b.n	8009dae <_vfiprintf_r+0x176>
 8009e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e7f0      	b.n	8009e12 <_vfiprintf_r+0x1da>
 8009e30:	ab03      	add	r3, sp, #12
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	462a      	mov	r2, r5
 8009e36:	4b16      	ldr	r3, [pc, #88]	; (8009e90 <_vfiprintf_r+0x258>)
 8009e38:	a904      	add	r1, sp, #16
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f3af 8000 	nop.w
 8009e40:	4607      	mov	r7, r0
 8009e42:	1c78      	adds	r0, r7, #1
 8009e44:	d1d6      	bne.n	8009df4 <_vfiprintf_r+0x1bc>
 8009e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e48:	07d9      	lsls	r1, r3, #31
 8009e4a:	d405      	bmi.n	8009e58 <_vfiprintf_r+0x220>
 8009e4c:	89ab      	ldrh	r3, [r5, #12]
 8009e4e:	059a      	lsls	r2, r3, #22
 8009e50:	d402      	bmi.n	8009e58 <_vfiprintf_r+0x220>
 8009e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e54:	f000 fc35 	bl	800a6c2 <__retarget_lock_release_recursive>
 8009e58:	89ab      	ldrh	r3, [r5, #12]
 8009e5a:	065b      	lsls	r3, r3, #25
 8009e5c:	f53f af12 	bmi.w	8009c84 <_vfiprintf_r+0x4c>
 8009e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e62:	e711      	b.n	8009c88 <_vfiprintf_r+0x50>
 8009e64:	ab03      	add	r3, sp, #12
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	462a      	mov	r2, r5
 8009e6a:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <_vfiprintf_r+0x258>)
 8009e6c:	a904      	add	r1, sp, #16
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f000 f880 	bl	8009f74 <_printf_i>
 8009e74:	e7e4      	b.n	8009e40 <_vfiprintf_r+0x208>
 8009e76:	bf00      	nop
 8009e78:	0800ae64 	.word	0x0800ae64
 8009e7c:	0800ae84 	.word	0x0800ae84
 8009e80:	0800ae44 	.word	0x0800ae44
 8009e84:	0800ae11 	.word	0x0800ae11
 8009e88:	0800ae1b 	.word	0x0800ae1b
 8009e8c:	00000000 	.word	0x00000000
 8009e90:	08009c13 	.word	0x08009c13
 8009e94:	0800ae17 	.word	0x0800ae17

08009e98 <_printf_common>:
 8009e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e9c:	4616      	mov	r6, r2
 8009e9e:	4699      	mov	r9, r3
 8009ea0:	688a      	ldr	r2, [r1, #8]
 8009ea2:	690b      	ldr	r3, [r1, #16]
 8009ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	bfb8      	it	lt
 8009eac:	4613      	movlt	r3, r2
 8009eae:	6033      	str	r3, [r6, #0]
 8009eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	b10a      	cbz	r2, 8009ebe <_printf_common+0x26>
 8009eba:	3301      	adds	r3, #1
 8009ebc:	6033      	str	r3, [r6, #0]
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	0699      	lsls	r1, r3, #26
 8009ec2:	bf42      	ittt	mi
 8009ec4:	6833      	ldrmi	r3, [r6, #0]
 8009ec6:	3302      	addmi	r3, #2
 8009ec8:	6033      	strmi	r3, [r6, #0]
 8009eca:	6825      	ldr	r5, [r4, #0]
 8009ecc:	f015 0506 	ands.w	r5, r5, #6
 8009ed0:	d106      	bne.n	8009ee0 <_printf_common+0x48>
 8009ed2:	f104 0a19 	add.w	sl, r4, #25
 8009ed6:	68e3      	ldr	r3, [r4, #12]
 8009ed8:	6832      	ldr	r2, [r6, #0]
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	42ab      	cmp	r3, r5
 8009ede:	dc26      	bgt.n	8009f2e <_printf_common+0x96>
 8009ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ee4:	1e13      	subs	r3, r2, #0
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	bf18      	it	ne
 8009eea:	2301      	movne	r3, #1
 8009eec:	0692      	lsls	r2, r2, #26
 8009eee:	d42b      	bmi.n	8009f48 <_printf_common+0xb0>
 8009ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	47c0      	blx	r8
 8009efa:	3001      	adds	r0, #1
 8009efc:	d01e      	beq.n	8009f3c <_printf_common+0xa4>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	68e5      	ldr	r5, [r4, #12]
 8009f02:	6832      	ldr	r2, [r6, #0]
 8009f04:	f003 0306 	and.w	r3, r3, #6
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	bf08      	it	eq
 8009f0c:	1aad      	subeq	r5, r5, r2
 8009f0e:	68a3      	ldr	r3, [r4, #8]
 8009f10:	6922      	ldr	r2, [r4, #16]
 8009f12:	bf0c      	ite	eq
 8009f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f18:	2500      	movne	r5, #0
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	bfc4      	itt	gt
 8009f1e:	1a9b      	subgt	r3, r3, r2
 8009f20:	18ed      	addgt	r5, r5, r3
 8009f22:	2600      	movs	r6, #0
 8009f24:	341a      	adds	r4, #26
 8009f26:	42b5      	cmp	r5, r6
 8009f28:	d11a      	bne.n	8009f60 <_printf_common+0xc8>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	e008      	b.n	8009f40 <_printf_common+0xa8>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4652      	mov	r2, sl
 8009f32:	4649      	mov	r1, r9
 8009f34:	4638      	mov	r0, r7
 8009f36:	47c0      	blx	r8
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d103      	bne.n	8009f44 <_printf_common+0xac>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f44:	3501      	adds	r5, #1
 8009f46:	e7c6      	b.n	8009ed6 <_printf_common+0x3e>
 8009f48:	18e1      	adds	r1, r4, r3
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	2030      	movs	r0, #48	; 0x30
 8009f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f52:	4422      	add	r2, r4
 8009f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	e7c7      	b.n	8009ef0 <_printf_common+0x58>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4622      	mov	r2, r4
 8009f64:	4649      	mov	r1, r9
 8009f66:	4638      	mov	r0, r7
 8009f68:	47c0      	blx	r8
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d0e6      	beq.n	8009f3c <_printf_common+0xa4>
 8009f6e:	3601      	adds	r6, #1
 8009f70:	e7d9      	b.n	8009f26 <_printf_common+0x8e>
	...

08009f74 <_printf_i>:
 8009f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	7e0f      	ldrb	r7, [r1, #24]
 8009f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f7c:	2f78      	cmp	r7, #120	; 0x78
 8009f7e:	4691      	mov	r9, r2
 8009f80:	4680      	mov	r8, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	469a      	mov	sl, r3
 8009f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f8a:	d807      	bhi.n	8009f9c <_printf_i+0x28>
 8009f8c:	2f62      	cmp	r7, #98	; 0x62
 8009f8e:	d80a      	bhi.n	8009fa6 <_printf_i+0x32>
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	f000 80d8 	beq.w	800a146 <_printf_i+0x1d2>
 8009f96:	2f58      	cmp	r7, #88	; 0x58
 8009f98:	f000 80a3 	beq.w	800a0e2 <_printf_i+0x16e>
 8009f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fa4:	e03a      	b.n	800a01c <_printf_i+0xa8>
 8009fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009faa:	2b15      	cmp	r3, #21
 8009fac:	d8f6      	bhi.n	8009f9c <_printf_i+0x28>
 8009fae:	a101      	add	r1, pc, #4	; (adr r1, 8009fb4 <_printf_i+0x40>)
 8009fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	0800a021 	.word	0x0800a021
 8009fbc:	08009f9d 	.word	0x08009f9d
 8009fc0:	08009f9d 	.word	0x08009f9d
 8009fc4:	08009f9d 	.word	0x08009f9d
 8009fc8:	08009f9d 	.word	0x08009f9d
 8009fcc:	0800a021 	.word	0x0800a021
 8009fd0:	08009f9d 	.word	0x08009f9d
 8009fd4:	08009f9d 	.word	0x08009f9d
 8009fd8:	08009f9d 	.word	0x08009f9d
 8009fdc:	08009f9d 	.word	0x08009f9d
 8009fe0:	0800a12d 	.word	0x0800a12d
 8009fe4:	0800a051 	.word	0x0800a051
 8009fe8:	0800a10f 	.word	0x0800a10f
 8009fec:	08009f9d 	.word	0x08009f9d
 8009ff0:	08009f9d 	.word	0x08009f9d
 8009ff4:	0800a14f 	.word	0x0800a14f
 8009ff8:	08009f9d 	.word	0x08009f9d
 8009ffc:	0800a051 	.word	0x0800a051
 800a000:	08009f9d 	.word	0x08009f9d
 800a004:	08009f9d 	.word	0x08009f9d
 800a008:	0800a117 	.word	0x0800a117
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	602a      	str	r2, [r5, #0]
 800a014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a01c:	2301      	movs	r3, #1
 800a01e:	e0a3      	b.n	800a168 <_printf_i+0x1f4>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	6829      	ldr	r1, [r5, #0]
 800a024:	0606      	lsls	r6, r0, #24
 800a026:	f101 0304 	add.w	r3, r1, #4
 800a02a:	d50a      	bpl.n	800a042 <_printf_i+0xce>
 800a02c:	680e      	ldr	r6, [r1, #0]
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	2e00      	cmp	r6, #0
 800a032:	da03      	bge.n	800a03c <_printf_i+0xc8>
 800a034:	232d      	movs	r3, #45	; 0x2d
 800a036:	4276      	negs	r6, r6
 800a038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a03c:	485e      	ldr	r0, [pc, #376]	; (800a1b8 <_printf_i+0x244>)
 800a03e:	230a      	movs	r3, #10
 800a040:	e019      	b.n	800a076 <_printf_i+0x102>
 800a042:	680e      	ldr	r6, [r1, #0]
 800a044:	602b      	str	r3, [r5, #0]
 800a046:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a04a:	bf18      	it	ne
 800a04c:	b236      	sxthne	r6, r6
 800a04e:	e7ef      	b.n	800a030 <_printf_i+0xbc>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	6820      	ldr	r0, [r4, #0]
 800a054:	1d19      	adds	r1, r3, #4
 800a056:	6029      	str	r1, [r5, #0]
 800a058:	0601      	lsls	r1, r0, #24
 800a05a:	d501      	bpl.n	800a060 <_printf_i+0xec>
 800a05c:	681e      	ldr	r6, [r3, #0]
 800a05e:	e002      	b.n	800a066 <_printf_i+0xf2>
 800a060:	0646      	lsls	r6, r0, #25
 800a062:	d5fb      	bpl.n	800a05c <_printf_i+0xe8>
 800a064:	881e      	ldrh	r6, [r3, #0]
 800a066:	4854      	ldr	r0, [pc, #336]	; (800a1b8 <_printf_i+0x244>)
 800a068:	2f6f      	cmp	r7, #111	; 0x6f
 800a06a:	bf0c      	ite	eq
 800a06c:	2308      	moveq	r3, #8
 800a06e:	230a      	movne	r3, #10
 800a070:	2100      	movs	r1, #0
 800a072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a076:	6865      	ldr	r5, [r4, #4]
 800a078:	60a5      	str	r5, [r4, #8]
 800a07a:	2d00      	cmp	r5, #0
 800a07c:	bfa2      	ittt	ge
 800a07e:	6821      	ldrge	r1, [r4, #0]
 800a080:	f021 0104 	bicge.w	r1, r1, #4
 800a084:	6021      	strge	r1, [r4, #0]
 800a086:	b90e      	cbnz	r6, 800a08c <_printf_i+0x118>
 800a088:	2d00      	cmp	r5, #0
 800a08a:	d04d      	beq.n	800a128 <_printf_i+0x1b4>
 800a08c:	4615      	mov	r5, r2
 800a08e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a092:	fb03 6711 	mls	r7, r3, r1, r6
 800a096:	5dc7      	ldrb	r7, [r0, r7]
 800a098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a09c:	4637      	mov	r7, r6
 800a09e:	42bb      	cmp	r3, r7
 800a0a0:	460e      	mov	r6, r1
 800a0a2:	d9f4      	bls.n	800a08e <_printf_i+0x11a>
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d10b      	bne.n	800a0c0 <_printf_i+0x14c>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	07de      	lsls	r6, r3, #31
 800a0ac:	d508      	bpl.n	800a0c0 <_printf_i+0x14c>
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	6861      	ldr	r1, [r4, #4]
 800a0b2:	4299      	cmp	r1, r3
 800a0b4:	bfde      	ittt	le
 800a0b6:	2330      	movle	r3, #48	; 0x30
 800a0b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0c0:	1b52      	subs	r2, r2, r5
 800a0c2:	6122      	str	r2, [r4, #16]
 800a0c4:	f8cd a000 	str.w	sl, [sp]
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	aa03      	add	r2, sp, #12
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	f7ff fee2 	bl	8009e98 <_printf_common>
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d14c      	bne.n	800a172 <_printf_i+0x1fe>
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	b004      	add	sp, #16
 800a0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e2:	4835      	ldr	r0, [pc, #212]	; (800a1b8 <_printf_i+0x244>)
 800a0e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0e8:	6829      	ldr	r1, [r5, #0]
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0f0:	6029      	str	r1, [r5, #0]
 800a0f2:	061d      	lsls	r5, r3, #24
 800a0f4:	d514      	bpl.n	800a120 <_printf_i+0x1ac>
 800a0f6:	07df      	lsls	r7, r3, #31
 800a0f8:	bf44      	itt	mi
 800a0fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a0fe:	6023      	strmi	r3, [r4, #0]
 800a100:	b91e      	cbnz	r6, 800a10a <_printf_i+0x196>
 800a102:	6823      	ldr	r3, [r4, #0]
 800a104:	f023 0320 	bic.w	r3, r3, #32
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	2310      	movs	r3, #16
 800a10c:	e7b0      	b.n	800a070 <_printf_i+0xfc>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	f043 0320 	orr.w	r3, r3, #32
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	2378      	movs	r3, #120	; 0x78
 800a118:	4828      	ldr	r0, [pc, #160]	; (800a1bc <_printf_i+0x248>)
 800a11a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a11e:	e7e3      	b.n	800a0e8 <_printf_i+0x174>
 800a120:	0659      	lsls	r1, r3, #25
 800a122:	bf48      	it	mi
 800a124:	b2b6      	uxthmi	r6, r6
 800a126:	e7e6      	b.n	800a0f6 <_printf_i+0x182>
 800a128:	4615      	mov	r5, r2
 800a12a:	e7bb      	b.n	800a0a4 <_printf_i+0x130>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	6826      	ldr	r6, [r4, #0]
 800a130:	6961      	ldr	r1, [r4, #20]
 800a132:	1d18      	adds	r0, r3, #4
 800a134:	6028      	str	r0, [r5, #0]
 800a136:	0635      	lsls	r5, r6, #24
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	d501      	bpl.n	800a140 <_printf_i+0x1cc>
 800a13c:	6019      	str	r1, [r3, #0]
 800a13e:	e002      	b.n	800a146 <_printf_i+0x1d2>
 800a140:	0670      	lsls	r0, r6, #25
 800a142:	d5fb      	bpl.n	800a13c <_printf_i+0x1c8>
 800a144:	8019      	strh	r1, [r3, #0]
 800a146:	2300      	movs	r3, #0
 800a148:	6123      	str	r3, [r4, #16]
 800a14a:	4615      	mov	r5, r2
 800a14c:	e7ba      	b.n	800a0c4 <_printf_i+0x150>
 800a14e:	682b      	ldr	r3, [r5, #0]
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	602a      	str	r2, [r5, #0]
 800a154:	681d      	ldr	r5, [r3, #0]
 800a156:	6862      	ldr	r2, [r4, #4]
 800a158:	2100      	movs	r1, #0
 800a15a:	4628      	mov	r0, r5
 800a15c:	f7f6 f840 	bl	80001e0 <memchr>
 800a160:	b108      	cbz	r0, 800a166 <_printf_i+0x1f2>
 800a162:	1b40      	subs	r0, r0, r5
 800a164:	6060      	str	r0, [r4, #4]
 800a166:	6863      	ldr	r3, [r4, #4]
 800a168:	6123      	str	r3, [r4, #16]
 800a16a:	2300      	movs	r3, #0
 800a16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a170:	e7a8      	b.n	800a0c4 <_printf_i+0x150>
 800a172:	6923      	ldr	r3, [r4, #16]
 800a174:	462a      	mov	r2, r5
 800a176:	4649      	mov	r1, r9
 800a178:	4640      	mov	r0, r8
 800a17a:	47d0      	blx	sl
 800a17c:	3001      	adds	r0, #1
 800a17e:	d0ab      	beq.n	800a0d8 <_printf_i+0x164>
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	079b      	lsls	r3, r3, #30
 800a184:	d413      	bmi.n	800a1ae <_printf_i+0x23a>
 800a186:	68e0      	ldr	r0, [r4, #12]
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	4298      	cmp	r0, r3
 800a18c:	bfb8      	it	lt
 800a18e:	4618      	movlt	r0, r3
 800a190:	e7a4      	b.n	800a0dc <_printf_i+0x168>
 800a192:	2301      	movs	r3, #1
 800a194:	4632      	mov	r2, r6
 800a196:	4649      	mov	r1, r9
 800a198:	4640      	mov	r0, r8
 800a19a:	47d0      	blx	sl
 800a19c:	3001      	adds	r0, #1
 800a19e:	d09b      	beq.n	800a0d8 <_printf_i+0x164>
 800a1a0:	3501      	adds	r5, #1
 800a1a2:	68e3      	ldr	r3, [r4, #12]
 800a1a4:	9903      	ldr	r1, [sp, #12]
 800a1a6:	1a5b      	subs	r3, r3, r1
 800a1a8:	42ab      	cmp	r3, r5
 800a1aa:	dcf2      	bgt.n	800a192 <_printf_i+0x21e>
 800a1ac:	e7eb      	b.n	800a186 <_printf_i+0x212>
 800a1ae:	2500      	movs	r5, #0
 800a1b0:	f104 0619 	add.w	r6, r4, #25
 800a1b4:	e7f5      	b.n	800a1a2 <_printf_i+0x22e>
 800a1b6:	bf00      	nop
 800a1b8:	0800ae22 	.word	0x0800ae22
 800a1bc:	0800ae33 	.word	0x0800ae33

0800a1c0 <__swbuf_r>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	460e      	mov	r6, r1
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	b118      	cbz	r0, 800a1d2 <__swbuf_r+0x12>
 800a1ca:	6983      	ldr	r3, [r0, #24]
 800a1cc:	b90b      	cbnz	r3, 800a1d2 <__swbuf_r+0x12>
 800a1ce:	f000 f9d9 	bl	800a584 <__sinit>
 800a1d2:	4b21      	ldr	r3, [pc, #132]	; (800a258 <__swbuf_r+0x98>)
 800a1d4:	429c      	cmp	r4, r3
 800a1d6:	d12b      	bne.n	800a230 <__swbuf_r+0x70>
 800a1d8:	686c      	ldr	r4, [r5, #4]
 800a1da:	69a3      	ldr	r3, [r4, #24]
 800a1dc:	60a3      	str	r3, [r4, #8]
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	071a      	lsls	r2, r3, #28
 800a1e2:	d52f      	bpl.n	800a244 <__swbuf_r+0x84>
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	b36b      	cbz	r3, 800a244 <__swbuf_r+0x84>
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	6820      	ldr	r0, [r4, #0]
 800a1ec:	1ac0      	subs	r0, r0, r3
 800a1ee:	6963      	ldr	r3, [r4, #20]
 800a1f0:	b2f6      	uxtb	r6, r6
 800a1f2:	4283      	cmp	r3, r0
 800a1f4:	4637      	mov	r7, r6
 800a1f6:	dc04      	bgt.n	800a202 <__swbuf_r+0x42>
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	f000 f92e 	bl	800a45c <_fflush_r>
 800a200:	bb30      	cbnz	r0, 800a250 <__swbuf_r+0x90>
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	3b01      	subs	r3, #1
 800a206:	60a3      	str	r3, [r4, #8]
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	6022      	str	r2, [r4, #0]
 800a20e:	701e      	strb	r6, [r3, #0]
 800a210:	6963      	ldr	r3, [r4, #20]
 800a212:	3001      	adds	r0, #1
 800a214:	4283      	cmp	r3, r0
 800a216:	d004      	beq.n	800a222 <__swbuf_r+0x62>
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	07db      	lsls	r3, r3, #31
 800a21c:	d506      	bpl.n	800a22c <__swbuf_r+0x6c>
 800a21e:	2e0a      	cmp	r6, #10
 800a220:	d104      	bne.n	800a22c <__swbuf_r+0x6c>
 800a222:	4621      	mov	r1, r4
 800a224:	4628      	mov	r0, r5
 800a226:	f000 f919 	bl	800a45c <_fflush_r>
 800a22a:	b988      	cbnz	r0, 800a250 <__swbuf_r+0x90>
 800a22c:	4638      	mov	r0, r7
 800a22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <__swbuf_r+0x9c>)
 800a232:	429c      	cmp	r4, r3
 800a234:	d101      	bne.n	800a23a <__swbuf_r+0x7a>
 800a236:	68ac      	ldr	r4, [r5, #8]
 800a238:	e7cf      	b.n	800a1da <__swbuf_r+0x1a>
 800a23a:	4b09      	ldr	r3, [pc, #36]	; (800a260 <__swbuf_r+0xa0>)
 800a23c:	429c      	cmp	r4, r3
 800a23e:	bf08      	it	eq
 800a240:	68ec      	ldreq	r4, [r5, #12]
 800a242:	e7ca      	b.n	800a1da <__swbuf_r+0x1a>
 800a244:	4621      	mov	r1, r4
 800a246:	4628      	mov	r0, r5
 800a248:	f000 f80c 	bl	800a264 <__swsetup_r>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d0cb      	beq.n	800a1e8 <__swbuf_r+0x28>
 800a250:	f04f 37ff 	mov.w	r7, #4294967295
 800a254:	e7ea      	b.n	800a22c <__swbuf_r+0x6c>
 800a256:	bf00      	nop
 800a258:	0800ae64 	.word	0x0800ae64
 800a25c:	0800ae84 	.word	0x0800ae84
 800a260:	0800ae44 	.word	0x0800ae44

0800a264 <__swsetup_r>:
 800a264:	4b32      	ldr	r3, [pc, #200]	; (800a330 <__swsetup_r+0xcc>)
 800a266:	b570      	push	{r4, r5, r6, lr}
 800a268:	681d      	ldr	r5, [r3, #0]
 800a26a:	4606      	mov	r6, r0
 800a26c:	460c      	mov	r4, r1
 800a26e:	b125      	cbz	r5, 800a27a <__swsetup_r+0x16>
 800a270:	69ab      	ldr	r3, [r5, #24]
 800a272:	b913      	cbnz	r3, 800a27a <__swsetup_r+0x16>
 800a274:	4628      	mov	r0, r5
 800a276:	f000 f985 	bl	800a584 <__sinit>
 800a27a:	4b2e      	ldr	r3, [pc, #184]	; (800a334 <__swsetup_r+0xd0>)
 800a27c:	429c      	cmp	r4, r3
 800a27e:	d10f      	bne.n	800a2a0 <__swsetup_r+0x3c>
 800a280:	686c      	ldr	r4, [r5, #4]
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a288:	0719      	lsls	r1, r3, #28
 800a28a:	d42c      	bmi.n	800a2e6 <__swsetup_r+0x82>
 800a28c:	06dd      	lsls	r5, r3, #27
 800a28e:	d411      	bmi.n	800a2b4 <__swsetup_r+0x50>
 800a290:	2309      	movs	r3, #9
 800a292:	6033      	str	r3, [r6, #0]
 800a294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a298:	81a3      	strh	r3, [r4, #12]
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295
 800a29e:	e03e      	b.n	800a31e <__swsetup_r+0xba>
 800a2a0:	4b25      	ldr	r3, [pc, #148]	; (800a338 <__swsetup_r+0xd4>)
 800a2a2:	429c      	cmp	r4, r3
 800a2a4:	d101      	bne.n	800a2aa <__swsetup_r+0x46>
 800a2a6:	68ac      	ldr	r4, [r5, #8]
 800a2a8:	e7eb      	b.n	800a282 <__swsetup_r+0x1e>
 800a2aa:	4b24      	ldr	r3, [pc, #144]	; (800a33c <__swsetup_r+0xd8>)
 800a2ac:	429c      	cmp	r4, r3
 800a2ae:	bf08      	it	eq
 800a2b0:	68ec      	ldreq	r4, [r5, #12]
 800a2b2:	e7e6      	b.n	800a282 <__swsetup_r+0x1e>
 800a2b4:	0758      	lsls	r0, r3, #29
 800a2b6:	d512      	bpl.n	800a2de <__swsetup_r+0x7a>
 800a2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ba:	b141      	cbz	r1, 800a2ce <__swsetup_r+0x6a>
 800a2bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2c0:	4299      	cmp	r1, r3
 800a2c2:	d002      	beq.n	800a2ca <__swsetup_r+0x66>
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7ff fc41 	bl	8009b4c <_free_r>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	6063      	str	r3, [r4, #4]
 800a2da:	6923      	ldr	r3, [r4, #16]
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f043 0308 	orr.w	r3, r3, #8
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	6923      	ldr	r3, [r4, #16]
 800a2e8:	b94b      	cbnz	r3, 800a2fe <__swsetup_r+0x9a>
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f4:	d003      	beq.n	800a2fe <__swsetup_r+0x9a>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f000 fa09 	bl	800a710 <__smakebuf_r>
 800a2fe:	89a0      	ldrh	r0, [r4, #12]
 800a300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a304:	f010 0301 	ands.w	r3, r0, #1
 800a308:	d00a      	beq.n	800a320 <__swsetup_r+0xbc>
 800a30a:	2300      	movs	r3, #0
 800a30c:	60a3      	str	r3, [r4, #8]
 800a30e:	6963      	ldr	r3, [r4, #20]
 800a310:	425b      	negs	r3, r3
 800a312:	61a3      	str	r3, [r4, #24]
 800a314:	6923      	ldr	r3, [r4, #16]
 800a316:	b943      	cbnz	r3, 800a32a <__swsetup_r+0xc6>
 800a318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a31c:	d1ba      	bne.n	800a294 <__swsetup_r+0x30>
 800a31e:	bd70      	pop	{r4, r5, r6, pc}
 800a320:	0781      	lsls	r1, r0, #30
 800a322:	bf58      	it	pl
 800a324:	6963      	ldrpl	r3, [r4, #20]
 800a326:	60a3      	str	r3, [r4, #8]
 800a328:	e7f4      	b.n	800a314 <__swsetup_r+0xb0>
 800a32a:	2000      	movs	r0, #0
 800a32c:	e7f7      	b.n	800a31e <__swsetup_r+0xba>
 800a32e:	bf00      	nop
 800a330:	200001a8 	.word	0x200001a8
 800a334:	0800ae64 	.word	0x0800ae64
 800a338:	0800ae84 	.word	0x0800ae84
 800a33c:	0800ae44 	.word	0x0800ae44

0800a340 <abort>:
 800a340:	b508      	push	{r3, lr}
 800a342:	2006      	movs	r0, #6
 800a344:	f000 fa4c 	bl	800a7e0 <raise>
 800a348:	2001      	movs	r0, #1
 800a34a:	f7f7 fb5f 	bl	8001a0c <_exit>
	...

0800a350 <__sflush_r>:
 800a350:	898a      	ldrh	r2, [r1, #12]
 800a352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a356:	4605      	mov	r5, r0
 800a358:	0710      	lsls	r0, r2, #28
 800a35a:	460c      	mov	r4, r1
 800a35c:	d458      	bmi.n	800a410 <__sflush_r+0xc0>
 800a35e:	684b      	ldr	r3, [r1, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	dc05      	bgt.n	800a370 <__sflush_r+0x20>
 800a364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a366:	2b00      	cmp	r3, #0
 800a368:	dc02      	bgt.n	800a370 <__sflush_r+0x20>
 800a36a:	2000      	movs	r0, #0
 800a36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a372:	2e00      	cmp	r6, #0
 800a374:	d0f9      	beq.n	800a36a <__sflush_r+0x1a>
 800a376:	2300      	movs	r3, #0
 800a378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a37c:	682f      	ldr	r7, [r5, #0]
 800a37e:	602b      	str	r3, [r5, #0]
 800a380:	d032      	beq.n	800a3e8 <__sflush_r+0x98>
 800a382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	075a      	lsls	r2, r3, #29
 800a388:	d505      	bpl.n	800a396 <__sflush_r+0x46>
 800a38a:	6863      	ldr	r3, [r4, #4]
 800a38c:	1ac0      	subs	r0, r0, r3
 800a38e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a390:	b10b      	cbz	r3, 800a396 <__sflush_r+0x46>
 800a392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a394:	1ac0      	subs	r0, r0, r3
 800a396:	2300      	movs	r3, #0
 800a398:	4602      	mov	r2, r0
 800a39a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a39c:	6a21      	ldr	r1, [r4, #32]
 800a39e:	4628      	mov	r0, r5
 800a3a0:	47b0      	blx	r6
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	d106      	bne.n	800a3b6 <__sflush_r+0x66>
 800a3a8:	6829      	ldr	r1, [r5, #0]
 800a3aa:	291d      	cmp	r1, #29
 800a3ac:	d82c      	bhi.n	800a408 <__sflush_r+0xb8>
 800a3ae:	4a2a      	ldr	r2, [pc, #168]	; (800a458 <__sflush_r+0x108>)
 800a3b0:	40ca      	lsrs	r2, r1
 800a3b2:	07d6      	lsls	r6, r2, #31
 800a3b4:	d528      	bpl.n	800a408 <__sflush_r+0xb8>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	6062      	str	r2, [r4, #4]
 800a3ba:	04d9      	lsls	r1, r3, #19
 800a3bc:	6922      	ldr	r2, [r4, #16]
 800a3be:	6022      	str	r2, [r4, #0]
 800a3c0:	d504      	bpl.n	800a3cc <__sflush_r+0x7c>
 800a3c2:	1c42      	adds	r2, r0, #1
 800a3c4:	d101      	bne.n	800a3ca <__sflush_r+0x7a>
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	b903      	cbnz	r3, 800a3cc <__sflush_r+0x7c>
 800a3ca:	6560      	str	r0, [r4, #84]	; 0x54
 800a3cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ce:	602f      	str	r7, [r5, #0]
 800a3d0:	2900      	cmp	r1, #0
 800a3d2:	d0ca      	beq.n	800a36a <__sflush_r+0x1a>
 800a3d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d8:	4299      	cmp	r1, r3
 800a3da:	d002      	beq.n	800a3e2 <__sflush_r+0x92>
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f7ff fbb5 	bl	8009b4c <_free_r>
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	6360      	str	r0, [r4, #52]	; 0x34
 800a3e6:	e7c1      	b.n	800a36c <__sflush_r+0x1c>
 800a3e8:	6a21      	ldr	r1, [r4, #32]
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b0      	blx	r6
 800a3f0:	1c41      	adds	r1, r0, #1
 800a3f2:	d1c7      	bne.n	800a384 <__sflush_r+0x34>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0c4      	beq.n	800a384 <__sflush_r+0x34>
 800a3fa:	2b1d      	cmp	r3, #29
 800a3fc:	d001      	beq.n	800a402 <__sflush_r+0xb2>
 800a3fe:	2b16      	cmp	r3, #22
 800a400:	d101      	bne.n	800a406 <__sflush_r+0xb6>
 800a402:	602f      	str	r7, [r5, #0]
 800a404:	e7b1      	b.n	800a36a <__sflush_r+0x1a>
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	e7ad      	b.n	800a36c <__sflush_r+0x1c>
 800a410:	690f      	ldr	r7, [r1, #16]
 800a412:	2f00      	cmp	r7, #0
 800a414:	d0a9      	beq.n	800a36a <__sflush_r+0x1a>
 800a416:	0793      	lsls	r3, r2, #30
 800a418:	680e      	ldr	r6, [r1, #0]
 800a41a:	bf08      	it	eq
 800a41c:	694b      	ldreq	r3, [r1, #20]
 800a41e:	600f      	str	r7, [r1, #0]
 800a420:	bf18      	it	ne
 800a422:	2300      	movne	r3, #0
 800a424:	eba6 0807 	sub.w	r8, r6, r7
 800a428:	608b      	str	r3, [r1, #8]
 800a42a:	f1b8 0f00 	cmp.w	r8, #0
 800a42e:	dd9c      	ble.n	800a36a <__sflush_r+0x1a>
 800a430:	6a21      	ldr	r1, [r4, #32]
 800a432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a434:	4643      	mov	r3, r8
 800a436:	463a      	mov	r2, r7
 800a438:	4628      	mov	r0, r5
 800a43a:	47b0      	blx	r6
 800a43c:	2800      	cmp	r0, #0
 800a43e:	dc06      	bgt.n	800a44e <__sflush_r+0xfe>
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a446:	81a3      	strh	r3, [r4, #12]
 800a448:	f04f 30ff 	mov.w	r0, #4294967295
 800a44c:	e78e      	b.n	800a36c <__sflush_r+0x1c>
 800a44e:	4407      	add	r7, r0
 800a450:	eba8 0800 	sub.w	r8, r8, r0
 800a454:	e7e9      	b.n	800a42a <__sflush_r+0xda>
 800a456:	bf00      	nop
 800a458:	20400001 	.word	0x20400001

0800a45c <_fflush_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	690b      	ldr	r3, [r1, #16]
 800a460:	4605      	mov	r5, r0
 800a462:	460c      	mov	r4, r1
 800a464:	b913      	cbnz	r3, 800a46c <_fflush_r+0x10>
 800a466:	2500      	movs	r5, #0
 800a468:	4628      	mov	r0, r5
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	b118      	cbz	r0, 800a476 <_fflush_r+0x1a>
 800a46e:	6983      	ldr	r3, [r0, #24]
 800a470:	b90b      	cbnz	r3, 800a476 <_fflush_r+0x1a>
 800a472:	f000 f887 	bl	800a584 <__sinit>
 800a476:	4b14      	ldr	r3, [pc, #80]	; (800a4c8 <_fflush_r+0x6c>)
 800a478:	429c      	cmp	r4, r3
 800a47a:	d11b      	bne.n	800a4b4 <_fflush_r+0x58>
 800a47c:	686c      	ldr	r4, [r5, #4]
 800a47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0ef      	beq.n	800a466 <_fflush_r+0xa>
 800a486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a488:	07d0      	lsls	r0, r2, #31
 800a48a:	d404      	bmi.n	800a496 <_fflush_r+0x3a>
 800a48c:	0599      	lsls	r1, r3, #22
 800a48e:	d402      	bmi.n	800a496 <_fflush_r+0x3a>
 800a490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a492:	f000 f915 	bl	800a6c0 <__retarget_lock_acquire_recursive>
 800a496:	4628      	mov	r0, r5
 800a498:	4621      	mov	r1, r4
 800a49a:	f7ff ff59 	bl	800a350 <__sflush_r>
 800a49e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4a0:	07da      	lsls	r2, r3, #31
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	d4e0      	bmi.n	800a468 <_fflush_r+0xc>
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	059b      	lsls	r3, r3, #22
 800a4aa:	d4dd      	bmi.n	800a468 <_fflush_r+0xc>
 800a4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ae:	f000 f908 	bl	800a6c2 <__retarget_lock_release_recursive>
 800a4b2:	e7d9      	b.n	800a468 <_fflush_r+0xc>
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <_fflush_r+0x70>)
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	d101      	bne.n	800a4be <_fflush_r+0x62>
 800a4ba:	68ac      	ldr	r4, [r5, #8]
 800a4bc:	e7df      	b.n	800a47e <_fflush_r+0x22>
 800a4be:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <_fflush_r+0x74>)
 800a4c0:	429c      	cmp	r4, r3
 800a4c2:	bf08      	it	eq
 800a4c4:	68ec      	ldreq	r4, [r5, #12]
 800a4c6:	e7da      	b.n	800a47e <_fflush_r+0x22>
 800a4c8:	0800ae64 	.word	0x0800ae64
 800a4cc:	0800ae84 	.word	0x0800ae84
 800a4d0:	0800ae44 	.word	0x0800ae44

0800a4d4 <std>:
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	b510      	push	{r4, lr}
 800a4d8:	4604      	mov	r4, r0
 800a4da:	e9c0 3300 	strd	r3, r3, [r0]
 800a4de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4e2:	6083      	str	r3, [r0, #8]
 800a4e4:	8181      	strh	r1, [r0, #12]
 800a4e6:	6643      	str	r3, [r0, #100]	; 0x64
 800a4e8:	81c2      	strh	r2, [r0, #14]
 800a4ea:	6183      	str	r3, [r0, #24]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	2208      	movs	r2, #8
 800a4f0:	305c      	adds	r0, #92	; 0x5c
 800a4f2:	f7fd fb89 	bl	8007c08 <memset>
 800a4f6:	4b05      	ldr	r3, [pc, #20]	; (800a50c <std+0x38>)
 800a4f8:	6263      	str	r3, [r4, #36]	; 0x24
 800a4fa:	4b05      	ldr	r3, [pc, #20]	; (800a510 <std+0x3c>)
 800a4fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4fe:	4b05      	ldr	r3, [pc, #20]	; (800a514 <std+0x40>)
 800a500:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a502:	4b05      	ldr	r3, [pc, #20]	; (800a518 <std+0x44>)
 800a504:	6224      	str	r4, [r4, #32]
 800a506:	6323      	str	r3, [r4, #48]	; 0x30
 800a508:	bd10      	pop	{r4, pc}
 800a50a:	bf00      	nop
 800a50c:	0800a819 	.word	0x0800a819
 800a510:	0800a83b 	.word	0x0800a83b
 800a514:	0800a873 	.word	0x0800a873
 800a518:	0800a897 	.word	0x0800a897

0800a51c <_cleanup_r>:
 800a51c:	4901      	ldr	r1, [pc, #4]	; (800a524 <_cleanup_r+0x8>)
 800a51e:	f000 b8af 	b.w	800a680 <_fwalk_reent>
 800a522:	bf00      	nop
 800a524:	0800a45d 	.word	0x0800a45d

0800a528 <__sfmoreglue>:
 800a528:	b570      	push	{r4, r5, r6, lr}
 800a52a:	2268      	movs	r2, #104	; 0x68
 800a52c:	1e4d      	subs	r5, r1, #1
 800a52e:	4355      	muls	r5, r2
 800a530:	460e      	mov	r6, r1
 800a532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a536:	f7ff fa17 	bl	8009968 <_malloc_r>
 800a53a:	4604      	mov	r4, r0
 800a53c:	b140      	cbz	r0, 800a550 <__sfmoreglue+0x28>
 800a53e:	2100      	movs	r1, #0
 800a540:	e9c0 1600 	strd	r1, r6, [r0]
 800a544:	300c      	adds	r0, #12
 800a546:	60a0      	str	r0, [r4, #8]
 800a548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a54c:	f7fd fb5c 	bl	8007c08 <memset>
 800a550:	4620      	mov	r0, r4
 800a552:	bd70      	pop	{r4, r5, r6, pc}

0800a554 <__sfp_lock_acquire>:
 800a554:	4801      	ldr	r0, [pc, #4]	; (800a55c <__sfp_lock_acquire+0x8>)
 800a556:	f000 b8b3 	b.w	800a6c0 <__retarget_lock_acquire_recursive>
 800a55a:	bf00      	nop
 800a55c:	200016f9 	.word	0x200016f9

0800a560 <__sfp_lock_release>:
 800a560:	4801      	ldr	r0, [pc, #4]	; (800a568 <__sfp_lock_release+0x8>)
 800a562:	f000 b8ae 	b.w	800a6c2 <__retarget_lock_release_recursive>
 800a566:	bf00      	nop
 800a568:	200016f9 	.word	0x200016f9

0800a56c <__sinit_lock_acquire>:
 800a56c:	4801      	ldr	r0, [pc, #4]	; (800a574 <__sinit_lock_acquire+0x8>)
 800a56e:	f000 b8a7 	b.w	800a6c0 <__retarget_lock_acquire_recursive>
 800a572:	bf00      	nop
 800a574:	200016fa 	.word	0x200016fa

0800a578 <__sinit_lock_release>:
 800a578:	4801      	ldr	r0, [pc, #4]	; (800a580 <__sinit_lock_release+0x8>)
 800a57a:	f000 b8a2 	b.w	800a6c2 <__retarget_lock_release_recursive>
 800a57e:	bf00      	nop
 800a580:	200016fa 	.word	0x200016fa

0800a584 <__sinit>:
 800a584:	b510      	push	{r4, lr}
 800a586:	4604      	mov	r4, r0
 800a588:	f7ff fff0 	bl	800a56c <__sinit_lock_acquire>
 800a58c:	69a3      	ldr	r3, [r4, #24]
 800a58e:	b11b      	cbz	r3, 800a598 <__sinit+0x14>
 800a590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a594:	f7ff bff0 	b.w	800a578 <__sinit_lock_release>
 800a598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a59c:	6523      	str	r3, [r4, #80]	; 0x50
 800a59e:	4b13      	ldr	r3, [pc, #76]	; (800a5ec <__sinit+0x68>)
 800a5a0:	4a13      	ldr	r2, [pc, #76]	; (800a5f0 <__sinit+0x6c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	bf04      	itt	eq
 800a5aa:	2301      	moveq	r3, #1
 800a5ac:	61a3      	streq	r3, [r4, #24]
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f000 f820 	bl	800a5f4 <__sfp>
 800a5b4:	6060      	str	r0, [r4, #4]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f000 f81c 	bl	800a5f4 <__sfp>
 800a5bc:	60a0      	str	r0, [r4, #8]
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f000 f818 	bl	800a5f4 <__sfp>
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	60e0      	str	r0, [r4, #12]
 800a5c8:	2104      	movs	r1, #4
 800a5ca:	6860      	ldr	r0, [r4, #4]
 800a5cc:	f7ff ff82 	bl	800a4d4 <std>
 800a5d0:	68a0      	ldr	r0, [r4, #8]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	2109      	movs	r1, #9
 800a5d6:	f7ff ff7d 	bl	800a4d4 <std>
 800a5da:	68e0      	ldr	r0, [r4, #12]
 800a5dc:	2202      	movs	r2, #2
 800a5de:	2112      	movs	r1, #18
 800a5e0:	f7ff ff78 	bl	800a4d4 <std>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	61a3      	str	r3, [r4, #24]
 800a5e8:	e7d2      	b.n	800a590 <__sinit+0xc>
 800a5ea:	bf00      	nop
 800a5ec:	0800aa74 	.word	0x0800aa74
 800a5f0:	0800a51d 	.word	0x0800a51d

0800a5f4 <__sfp>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	f7ff ffac 	bl	800a554 <__sfp_lock_acquire>
 800a5fc:	4b1e      	ldr	r3, [pc, #120]	; (800a678 <__sfp+0x84>)
 800a5fe:	681e      	ldr	r6, [r3, #0]
 800a600:	69b3      	ldr	r3, [r6, #24]
 800a602:	b913      	cbnz	r3, 800a60a <__sfp+0x16>
 800a604:	4630      	mov	r0, r6
 800a606:	f7ff ffbd 	bl	800a584 <__sinit>
 800a60a:	3648      	adds	r6, #72	; 0x48
 800a60c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a610:	3b01      	subs	r3, #1
 800a612:	d503      	bpl.n	800a61c <__sfp+0x28>
 800a614:	6833      	ldr	r3, [r6, #0]
 800a616:	b30b      	cbz	r3, 800a65c <__sfp+0x68>
 800a618:	6836      	ldr	r6, [r6, #0]
 800a61a:	e7f7      	b.n	800a60c <__sfp+0x18>
 800a61c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a620:	b9d5      	cbnz	r5, 800a658 <__sfp+0x64>
 800a622:	4b16      	ldr	r3, [pc, #88]	; (800a67c <__sfp+0x88>)
 800a624:	60e3      	str	r3, [r4, #12]
 800a626:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a62a:	6665      	str	r5, [r4, #100]	; 0x64
 800a62c:	f000 f847 	bl	800a6be <__retarget_lock_init_recursive>
 800a630:	f7ff ff96 	bl	800a560 <__sfp_lock_release>
 800a634:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a63c:	6025      	str	r5, [r4, #0]
 800a63e:	61a5      	str	r5, [r4, #24]
 800a640:	2208      	movs	r2, #8
 800a642:	4629      	mov	r1, r5
 800a644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a648:	f7fd fade 	bl	8007c08 <memset>
 800a64c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a654:	4620      	mov	r0, r4
 800a656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a658:	3468      	adds	r4, #104	; 0x68
 800a65a:	e7d9      	b.n	800a610 <__sfp+0x1c>
 800a65c:	2104      	movs	r1, #4
 800a65e:	4638      	mov	r0, r7
 800a660:	f7ff ff62 	bl	800a528 <__sfmoreglue>
 800a664:	4604      	mov	r4, r0
 800a666:	6030      	str	r0, [r6, #0]
 800a668:	2800      	cmp	r0, #0
 800a66a:	d1d5      	bne.n	800a618 <__sfp+0x24>
 800a66c:	f7ff ff78 	bl	800a560 <__sfp_lock_release>
 800a670:	230c      	movs	r3, #12
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	e7ee      	b.n	800a654 <__sfp+0x60>
 800a676:	bf00      	nop
 800a678:	0800aa74 	.word	0x0800aa74
 800a67c:	ffff0001 	.word	0xffff0001

0800a680 <_fwalk_reent>:
 800a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a684:	4606      	mov	r6, r0
 800a686:	4688      	mov	r8, r1
 800a688:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a68c:	2700      	movs	r7, #0
 800a68e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a692:	f1b9 0901 	subs.w	r9, r9, #1
 800a696:	d505      	bpl.n	800a6a4 <_fwalk_reent+0x24>
 800a698:	6824      	ldr	r4, [r4, #0]
 800a69a:	2c00      	cmp	r4, #0
 800a69c:	d1f7      	bne.n	800a68e <_fwalk_reent+0xe>
 800a69e:	4638      	mov	r0, r7
 800a6a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a4:	89ab      	ldrh	r3, [r5, #12]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d907      	bls.n	800a6ba <_fwalk_reent+0x3a>
 800a6aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	d003      	beq.n	800a6ba <_fwalk_reent+0x3a>
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	47c0      	blx	r8
 800a6b8:	4307      	orrs	r7, r0
 800a6ba:	3568      	adds	r5, #104	; 0x68
 800a6bc:	e7e9      	b.n	800a692 <_fwalk_reent+0x12>

0800a6be <__retarget_lock_init_recursive>:
 800a6be:	4770      	bx	lr

0800a6c0 <__retarget_lock_acquire_recursive>:
 800a6c0:	4770      	bx	lr

0800a6c2 <__retarget_lock_release_recursive>:
 800a6c2:	4770      	bx	lr

0800a6c4 <__swhatbuf_r>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	460e      	mov	r6, r1
 800a6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6cc:	2900      	cmp	r1, #0
 800a6ce:	b096      	sub	sp, #88	; 0x58
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	461d      	mov	r5, r3
 800a6d4:	da08      	bge.n	800a6e8 <__swhatbuf_r+0x24>
 800a6d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	602a      	str	r2, [r5, #0]
 800a6de:	061a      	lsls	r2, r3, #24
 800a6e0:	d410      	bmi.n	800a704 <__swhatbuf_r+0x40>
 800a6e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6e6:	e00e      	b.n	800a706 <__swhatbuf_r+0x42>
 800a6e8:	466a      	mov	r2, sp
 800a6ea:	f000 f8fb 	bl	800a8e4 <_fstat_r>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	dbf1      	blt.n	800a6d6 <__swhatbuf_r+0x12>
 800a6f2:	9a01      	ldr	r2, [sp, #4]
 800a6f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6fc:	425a      	negs	r2, r3
 800a6fe:	415a      	adcs	r2, r3
 800a700:	602a      	str	r2, [r5, #0]
 800a702:	e7ee      	b.n	800a6e2 <__swhatbuf_r+0x1e>
 800a704:	2340      	movs	r3, #64	; 0x40
 800a706:	2000      	movs	r0, #0
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	b016      	add	sp, #88	; 0x58
 800a70c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a710 <__smakebuf_r>:
 800a710:	898b      	ldrh	r3, [r1, #12]
 800a712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a714:	079d      	lsls	r5, r3, #30
 800a716:	4606      	mov	r6, r0
 800a718:	460c      	mov	r4, r1
 800a71a:	d507      	bpl.n	800a72c <__smakebuf_r+0x1c>
 800a71c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	6123      	str	r3, [r4, #16]
 800a724:	2301      	movs	r3, #1
 800a726:	6163      	str	r3, [r4, #20]
 800a728:	b002      	add	sp, #8
 800a72a:	bd70      	pop	{r4, r5, r6, pc}
 800a72c:	ab01      	add	r3, sp, #4
 800a72e:	466a      	mov	r2, sp
 800a730:	f7ff ffc8 	bl	800a6c4 <__swhatbuf_r>
 800a734:	9900      	ldr	r1, [sp, #0]
 800a736:	4605      	mov	r5, r0
 800a738:	4630      	mov	r0, r6
 800a73a:	f7ff f915 	bl	8009968 <_malloc_r>
 800a73e:	b948      	cbnz	r0, 800a754 <__smakebuf_r+0x44>
 800a740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a744:	059a      	lsls	r2, r3, #22
 800a746:	d4ef      	bmi.n	800a728 <__smakebuf_r+0x18>
 800a748:	f023 0303 	bic.w	r3, r3, #3
 800a74c:	f043 0302 	orr.w	r3, r3, #2
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	e7e3      	b.n	800a71c <__smakebuf_r+0xc>
 800a754:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <__smakebuf_r+0x7c>)
 800a756:	62b3      	str	r3, [r6, #40]	; 0x28
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	6020      	str	r0, [r4, #0]
 800a75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	9b00      	ldr	r3, [sp, #0]
 800a764:	6163      	str	r3, [r4, #20]
 800a766:	9b01      	ldr	r3, [sp, #4]
 800a768:	6120      	str	r0, [r4, #16]
 800a76a:	b15b      	cbz	r3, 800a784 <__smakebuf_r+0x74>
 800a76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a770:	4630      	mov	r0, r6
 800a772:	f000 f8c9 	bl	800a908 <_isatty_r>
 800a776:	b128      	cbz	r0, 800a784 <__smakebuf_r+0x74>
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	f023 0303 	bic.w	r3, r3, #3
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	81a3      	strh	r3, [r4, #12]
 800a784:	89a0      	ldrh	r0, [r4, #12]
 800a786:	4305      	orrs	r5, r0
 800a788:	81a5      	strh	r5, [r4, #12]
 800a78a:	e7cd      	b.n	800a728 <__smakebuf_r+0x18>
 800a78c:	0800a51d 	.word	0x0800a51d

0800a790 <_raise_r>:
 800a790:	291f      	cmp	r1, #31
 800a792:	b538      	push	{r3, r4, r5, lr}
 800a794:	4604      	mov	r4, r0
 800a796:	460d      	mov	r5, r1
 800a798:	d904      	bls.n	800a7a4 <_raise_r+0x14>
 800a79a:	2316      	movs	r3, #22
 800a79c:	6003      	str	r3, [r0, #0]
 800a79e:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7a6:	b112      	cbz	r2, 800a7ae <_raise_r+0x1e>
 800a7a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7ac:	b94b      	cbnz	r3, 800a7c2 <_raise_r+0x32>
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 f830 	bl	800a814 <_getpid_r>
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7be:	f000 b817 	b.w	800a7f0 <_kill_r>
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d00a      	beq.n	800a7dc <_raise_r+0x4c>
 800a7c6:	1c59      	adds	r1, r3, #1
 800a7c8:	d103      	bne.n	800a7d2 <_raise_r+0x42>
 800a7ca:	2316      	movs	r3, #22
 800a7cc:	6003      	str	r3, [r0, #0]
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	e7e7      	b.n	800a7a2 <_raise_r+0x12>
 800a7d2:	2400      	movs	r4, #0
 800a7d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7d8:	4628      	mov	r0, r5
 800a7da:	4798      	blx	r3
 800a7dc:	2000      	movs	r0, #0
 800a7de:	e7e0      	b.n	800a7a2 <_raise_r+0x12>

0800a7e0 <raise>:
 800a7e0:	4b02      	ldr	r3, [pc, #8]	; (800a7ec <raise+0xc>)
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	6818      	ldr	r0, [r3, #0]
 800a7e6:	f7ff bfd3 	b.w	800a790 <_raise_r>
 800a7ea:	bf00      	nop
 800a7ec:	200001a8 	.word	0x200001a8

0800a7f0 <_kill_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4d07      	ldr	r5, [pc, #28]	; (800a810 <_kill_r+0x20>)
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	602b      	str	r3, [r5, #0]
 800a7fe:	f7f7 f8fd 	bl	80019fc <_kill>
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	d102      	bne.n	800a80c <_kill_r+0x1c>
 800a806:	682b      	ldr	r3, [r5, #0]
 800a808:	b103      	cbz	r3, 800a80c <_kill_r+0x1c>
 800a80a:	6023      	str	r3, [r4, #0]
 800a80c:	bd38      	pop	{r3, r4, r5, pc}
 800a80e:	bf00      	nop
 800a810:	200016f4 	.word	0x200016f4

0800a814 <_getpid_r>:
 800a814:	f7f7 b8f0 	b.w	80019f8 <_getpid>

0800a818 <__sread>:
 800a818:	b510      	push	{r4, lr}
 800a81a:	460c      	mov	r4, r1
 800a81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a820:	f000 f894 	bl	800a94c <_read_r>
 800a824:	2800      	cmp	r0, #0
 800a826:	bfab      	itete	ge
 800a828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a82a:	89a3      	ldrhlt	r3, [r4, #12]
 800a82c:	181b      	addge	r3, r3, r0
 800a82e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a832:	bfac      	ite	ge
 800a834:	6563      	strge	r3, [r4, #84]	; 0x54
 800a836:	81a3      	strhlt	r3, [r4, #12]
 800a838:	bd10      	pop	{r4, pc}

0800a83a <__swrite>:
 800a83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83e:	461f      	mov	r7, r3
 800a840:	898b      	ldrh	r3, [r1, #12]
 800a842:	05db      	lsls	r3, r3, #23
 800a844:	4605      	mov	r5, r0
 800a846:	460c      	mov	r4, r1
 800a848:	4616      	mov	r6, r2
 800a84a:	d505      	bpl.n	800a858 <__swrite+0x1e>
 800a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a850:	2302      	movs	r3, #2
 800a852:	2200      	movs	r2, #0
 800a854:	f000 f868 	bl	800a928 <_lseek_r>
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a85e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	4632      	mov	r2, r6
 800a866:	463b      	mov	r3, r7
 800a868:	4628      	mov	r0, r5
 800a86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a86e:	f000 b817 	b.w	800a8a0 <_write_r>

0800a872 <__sseek>:
 800a872:	b510      	push	{r4, lr}
 800a874:	460c      	mov	r4, r1
 800a876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87a:	f000 f855 	bl	800a928 <_lseek_r>
 800a87e:	1c43      	adds	r3, r0, #1
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	bf15      	itete	ne
 800a884:	6560      	strne	r0, [r4, #84]	; 0x54
 800a886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a88a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a88e:	81a3      	strheq	r3, [r4, #12]
 800a890:	bf18      	it	ne
 800a892:	81a3      	strhne	r3, [r4, #12]
 800a894:	bd10      	pop	{r4, pc}

0800a896 <__sclose>:
 800a896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a89a:	f000 b813 	b.w	800a8c4 <_close_r>
	...

0800a8a0 <_write_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d07      	ldr	r5, [pc, #28]	; (800a8c0 <_write_r+0x20>)
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	602a      	str	r2, [r5, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f7f7 f8c0 	bl	8001a34 <_write>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_write_r+0x1e>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_write_r+0x1e>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	200016f4 	.word	0x200016f4

0800a8c4 <_close_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d06      	ldr	r5, [pc, #24]	; (800a8e0 <_close_r+0x1c>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7f7 f8be 	bl	8001a50 <_close>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d102      	bne.n	800a8de <_close_r+0x1a>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	b103      	cbz	r3, 800a8de <_close_r+0x1a>
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	200016f4 	.word	0x200016f4

0800a8e4 <_fstat_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	; (800a904 <_fstat_r+0x20>)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	f7f7 f8b1 	bl	8001a58 <_fstat>
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	d102      	bne.n	800a900 <_fstat_r+0x1c>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	b103      	cbz	r3, 800a900 <_fstat_r+0x1c>
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	bd38      	pop	{r3, r4, r5, pc}
 800a902:	bf00      	nop
 800a904:	200016f4 	.word	0x200016f4

0800a908 <_isatty_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d06      	ldr	r5, [pc, #24]	; (800a924 <_isatty_r+0x1c>)
 800a90c:	2300      	movs	r3, #0
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	f7f7 f8a6 	bl	8001a64 <_isatty>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_isatty_r+0x1a>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_isatty_r+0x1a>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	200016f4 	.word	0x200016f4

0800a928 <_lseek_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d07      	ldr	r5, [pc, #28]	; (800a948 <_lseek_r+0x20>)
 800a92c:	4604      	mov	r4, r0
 800a92e:	4608      	mov	r0, r1
 800a930:	4611      	mov	r1, r2
 800a932:	2200      	movs	r2, #0
 800a934:	602a      	str	r2, [r5, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	f7f7 f896 	bl	8001a68 <_lseek>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_lseek_r+0x1e>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_lseek_r+0x1e>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	200016f4 	.word	0x200016f4

0800a94c <_read_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4d07      	ldr	r5, [pc, #28]	; (800a96c <_read_r+0x20>)
 800a950:	4604      	mov	r4, r0
 800a952:	4608      	mov	r0, r1
 800a954:	4611      	mov	r1, r2
 800a956:	2200      	movs	r2, #0
 800a958:	602a      	str	r2, [r5, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	f7f7 f85c 	bl	8001a18 <_read>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_read_r+0x1e>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_read_r+0x1e>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	200016f4 	.word	0x200016f4

0800a970 <round>:
 800a970:	ec51 0b10 	vmov	r0, r1, d0
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a97a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a97e:	2c13      	cmp	r4, #19
 800a980:	ee10 2a10 	vmov	r2, s0
 800a984:	460b      	mov	r3, r1
 800a986:	dc19      	bgt.n	800a9bc <round+0x4c>
 800a988:	2c00      	cmp	r4, #0
 800a98a:	da09      	bge.n	800a9a0 <round+0x30>
 800a98c:	3401      	adds	r4, #1
 800a98e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a992:	d103      	bne.n	800a99c <round+0x2c>
 800a994:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a998:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a99c:	2200      	movs	r2, #0
 800a99e:	e028      	b.n	800a9f2 <round+0x82>
 800a9a0:	4d15      	ldr	r5, [pc, #84]	; (800a9f8 <round+0x88>)
 800a9a2:	4125      	asrs	r5, r4
 800a9a4:	ea01 0605 	and.w	r6, r1, r5
 800a9a8:	4332      	orrs	r2, r6
 800a9aa:	d00e      	beq.n	800a9ca <round+0x5a>
 800a9ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a9b0:	fa42 f404 	asr.w	r4, r2, r4
 800a9b4:	4423      	add	r3, r4
 800a9b6:	ea23 0305 	bic.w	r3, r3, r5
 800a9ba:	e7ef      	b.n	800a99c <round+0x2c>
 800a9bc:	2c33      	cmp	r4, #51	; 0x33
 800a9be:	dd07      	ble.n	800a9d0 <round+0x60>
 800a9c0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a9c4:	d101      	bne.n	800a9ca <round+0x5a>
 800a9c6:	f7f5 fc61 	bl	800028c <__adddf3>
 800a9ca:	ec41 0b10 	vmov	d0, r0, r1
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a9d4:	f04f 35ff 	mov.w	r5, #4294967295
 800a9d8:	40f5      	lsrs	r5, r6
 800a9da:	4228      	tst	r0, r5
 800a9dc:	d0f5      	beq.n	800a9ca <round+0x5a>
 800a9de:	2101      	movs	r1, #1
 800a9e0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a9e4:	fa01 f404 	lsl.w	r4, r1, r4
 800a9e8:	1912      	adds	r2, r2, r4
 800a9ea:	bf28      	it	cs
 800a9ec:	185b      	addcs	r3, r3, r1
 800a9ee:	ea22 0205 	bic.w	r2, r2, r5
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	e7e8      	b.n	800a9ca <round+0x5a>
 800a9f8:	000fffff 	.word	0x000fffff

0800a9fc <_init>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	bf00      	nop
 800aa00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa02:	bc08      	pop	{r3}
 800aa04:	469e      	mov	lr, r3
 800aa06:	4770      	bx	lr

0800aa08 <_fini>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	bf00      	nop
 800aa0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0e:	bc08      	pop	{r3}
 800aa10:	469e      	mov	lr, r3
 800aa12:	4770      	bx	lr
